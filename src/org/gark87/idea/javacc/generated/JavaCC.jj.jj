/*@bgen(jjtree) Generated By:JJTree(jj2IntelliJ output version): Do not edit this line. JavaCC.jj.jj */
/*@egen*//* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/* adapted for jj2IntelliJ by gark87 (c) 2011 */

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(JavaCC)

package org.gark87.idea.javacc.generated;

public class JavaCC/*@bgen(jjtree)*/implements JavaCCTreeConstants/*@egen*/ {/*@bgen(jjtree)*/

/*@egen*/

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    IElementType t;
    t = getTokenType(1);
    if (t == BIT_OR || t == COMMA || t == RPAREN || t == RBRACE || t == RBRACKET)
      return false;
    return true;
  }

}

PARSER_END(JavaCC)


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */

TOKEN :
{
  < _OPTIONS: "options" >
| < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _JAVACODE: "JAVACODE" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _TOKEN_MGR_DECLS: "TOKEN_MGR_DECLS" >
| < _EOF: "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
//	| < LSHIFT: "<<" >
//	| < RSIGNEDSHIFT: ">>" >
//	| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < SHARP: "#" >
//	| < LSHIFTASSIGN: "<<=" >
//	| < RSIGNEDSHIFTASSIGN: ">>=" >
//	| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void javacc_input() :
{/*@bgen(jjtree) javacc_input */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacc_input */
  (
/*@egen*/
  javacc_options()
  "PARSER_BEGIN" "(" identifier() ")"
  CompilationUnit()
  "PARSER_END" "(" identifier() ")"
  ( production() )+
  <EOF>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_INPUT); }
        }
      }
  }
/*@egen*/
}

void javacc_options() :
{/*@bgen(jjtree) javacc_options */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacc_options */
  (
/*@egen*/
  [ "options" "{" ( option_binding() )+ "}" ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_OPTIONS); }
        }
      }
  }
/*@egen*/
}

void option_binding() :
{/*@bgen(jjtree) option_binding */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) option_binding */
  (
/*@egen*/
  ( <IDENTIFIER> | "LOOKAHEAD" | "IGNORE_CASE" | "static" )
  "="
  ( IntegerLiteral() | BooleanLiteral() | StringLiteral() )
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTOPTION_BINDING); }
        }
      }
  }
/*@egen*/
}

void production() :
{/*@bgen(jjtree) production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) production */
  (
/*@egen*/
  LOOKAHEAD(1)
  /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "javacode_production" over
   * "bnf_production".
   */
  javacode_production()
|
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
|
  LOOKAHEAD(1)
  /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "token_manager_decls" over
   * "bnf_production".
   */
  token_manager_decls()
|
  bnf_production()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRODUCTION); }
        }
      }
  }
/*@egen*/
}

void javacode_production() :
{/*@bgen(jjtree) javacode_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) javacode_production */
  (
/*@egen*/
  "JAVACODE"
  ResultType() identifier() FormalParameters()
  [ "throws" Name() ( "," Name() )* ]
  [ node_descriptor() ]
  Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACODE_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void bnf_production() :
{/*@bgen(jjtree) bnf_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) bnf_production */
  (
/*@egen*/
  ResultType() identifier() FormalParameters()
  [ "throws" Name() ( "," Name() )* ]
  [ node_descriptor() ]
  ":"
  Block()
  "{" expansion_choices() "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBNF_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void regular_expr_production() :
{/*@bgen(jjtree) regular_expr_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regular_expr_production */
  (
/*@egen*/
  [
    LOOKAHEAD(2) "<" "*" ">"
  |
    "<" <IDENTIFIER> ( "," <IDENTIFIER> )* ">"
  ]
  regexpr_kind() [ "[" "IGNORE_CASE" "]" ] ":"
  "{" regexpr_spec() ( "|" regexpr_spec() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPR_PRODUCTION); }
        }
      }
  }
/*@egen*/
}

void token_manager_decls() :
{/*@bgen(jjtree) token_manager_decls */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) token_manager_decls */
  (
/*@egen*/
  "TOKEN_MGR_DECLS" ":" ClassBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTOKEN_MANAGER_DECLS); }
        }
      }
  }
/*@egen*/
}

void regexpr_kind() :
{/*@bgen(jjtree) regexpr_kind */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regexpr_kind */
  (
/*@egen*/
  "TOKEN"
|
  "SPECIAL_TOKEN"
|
  "SKIP"
|
  "MORE"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_KIND); }
        }
      }
  }
/*@egen*/
}

void regexpr_spec() :
{/*@bgen(jjtree) regexpr_spec */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regexpr_spec */
  (
/*@egen*/
  regular_expression() [ Block() ] [ ":" <IDENTIFIER> ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_SPEC); }
        }
      }
  }
/*@egen*/
}

void expansion_choices() :
{/*@bgen(jjtree) expansion_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) expansion_choices */
  (
/*@egen*/
  expansion() ( "|" expansion() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_CHOICES); }
        }
      }
  }
/*@egen*/
}

void expansion() :
{/*@bgen(jjtree) expansion */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) expansion */
  (
/*@egen*/
  ( LOOKAHEAD(1)
    "LOOKAHEAD" "(" local_lookahead() ")"
  )?
  ( LOOKAHEAD(0, { notTailOfExpansionUnit() } )
    expansion_unit()
    [ node_descriptor() ]
  )+/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION); }
        }
      }
  }
/*@egen*/
}

void local_lookahead() :
	{/*@bgen(jjtree) local_lookahead */
          boolean jjtc000 = true;
          PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/
	  boolean commaAtEnd = false, emptyLA = true;
	}
{/*@bgen(jjtree) local_lookahead */
  (
/*@egen*/
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    IntegerLiteral()
	{
	  emptyLA = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && (getTokenType(1) != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { getTokenType(1) != RPAREN && getTokenType(1) != LBRACE } )
    expansion_choices()
	{
	  emptyLA = false; commaAtEnd = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && !commaAtEnd && (getTokenType(1) != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { emptyLA || commaAtEnd } )
    "{" Expression() "}"
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCAL_LOOKAHEAD); }
        }
      }
  }
/*@egen*/
}

void expansion_unit() :
{/*@bgen(jjtree) expansion_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) expansion_unit */
  (
/*@egen*/
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  "LOOKAHEAD" "(" local_lookahead() ")"
|
  Block()
|
  "[" expansion_choices() "]"
|
  "try" "{" expansion_choices() "}"
  ( "catch" "(" Name() <IDENTIFIER> ")" Block() )*
  [ "finally" Block() ]
|
  LOOKAHEAD( identifier() | StringLiteral() | "<" | PrimaryExpression() "=" )
  [
    LOOKAHEAD(PrimaryExpression() "=")
    PrimaryExpression() "="
  ]
  ( regular_expression() | identifier() Arguments() )
|
  "(" expansion_choices() ")" ( "+" | "*" | "?" )?/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_UNIT); }
        }
      }
  }
/*@egen*/
}

void regular_expression() :
{/*@bgen(jjtree) regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) regular_expression */
  (
/*@egen*/
  StringLiteral()
|
  LOOKAHEAD(3)
  "<" [ [ "#" ] identifier() ":" ] complex_regular_expression_choices() ">"
|
  LOOKAHEAD(2)
  "<" identifier() ">"
|
  "<" "EOF" ">"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPRESSION); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression_choices() :
{/*@bgen(jjtree) complex_regular_expression_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression_choices */
  (
/*@egen*/
  complex_regular_expression() ( "|" complex_regular_expression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_CHOICES); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression() :
{/*@bgen(jjtree) complex_regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression */
  (
/*@egen*/
  ( complex_regular_expression_unit() )+/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION); }
        }
      }
  }
/*@egen*/
}

void complex_regular_expression_unit() :
{/*@bgen(jjtree) complex_regular_expression_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) complex_regular_expression_unit */
  (
/*@egen*/
  StringLiteral()
|
  "<" identifier() ">"
|
  character_list()
|
  "(" complex_regular_expression_choices() ")" ( "+" | "*" | "?" )?/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_UNIT); }
        }
      }
  }
/*@egen*/
}

void character_list() :
{/*@bgen(jjtree) character_list */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) character_list */
  (
/*@egen*/
  [ "~" ] "[" [ character_descriptor() ( "," character_descriptor() )* ] "]"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_LIST); }
        }
      }
  }
/*@egen*/
}

void character_descriptor() :
{/*@bgen(jjtree) character_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) character_descriptor */
  (
/*@egen*/
  StringLiteral() [ "-" StringLiteral() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_DESCRIPTOR); }
        }
      }
  }
/*@egen*/
}

void identifier() :
{/*@bgen(jjtree) identifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) identifier */
  (
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIDENTIFIER); }
        }
      }
  }
/*@egen*/
}


/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/

void node_descriptor() :
{/*@bgen(jjtree) node_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) node_descriptor */
  (
/*@egen*/
  "#" ( <IDENTIFIER> | <VOID> )
  [
   LOOKAHEAD(1)
   "(" [ ">" ] node_descriptor_expression() ")"
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNODE_DESCRIPTOR); }
        }
      }
  }
/*@egen*/
}


JAVACODE
void node_descriptor_expression()
{/*@bgen(jjtree) node_descriptor_expression */
boolean jjtc000 = true;
PsiBuilder.Marker jjtn000 = builder.mark();
try {
/*@egen*/
  IElementType tok;
  int nesting = 1;
  while (true) {
    tok = getTokenType(1);
    if (builder.eof()) {
      break;
    }
    if (tok == LPAREN) nesting++;
    if (tok == RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    builder.advanceLexer();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    {
      if (jjtc000) {
        jjtc000 = false;
        {jjtn000.done(JJTNODE_DESCRIPTOR_EXPRESSION); }
      }
    }
  }
}
/*@egen*/
}


/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

void JavaIdentifier() :
{/*@bgen(jjtree) JavaIdentifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) JavaIdentifier */
  (
/*@egen*/
  <IDENTIFIER>
| "options"
| "LOOKAHEAD"
| "IGNORE_CASE"
| "PARSER_BEGIN"
| "PARSER_END"
| "JAVACODE"
| "TOKEN"
| "SPECIAL_TOKEN"
| "MORE"
| "SKIP"
| "TOKEN_MGR_DECLS"
| "EOF"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVAIDENTIFIER); }
        }
      }
  }
/*@egen*/
}

/*
 * The productions for the missing code follows.  Obviously
 * these productions accept more than what is legal in Java,
 * but that is OK for our purposes.
 */

void ShiftOps() :
{/*@bgen(jjtree) ShiftOps */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ShiftOps */
  (
/*@egen*/
  "<" "<"
|
  ">" ">" [ ">" ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSHIFTOPS); }
        }
      }
  }
/*@egen*/
}

void OtherAssignmentOps() :
{/*@bgen(jjtree) OtherAssignmentOps */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) OtherAssignmentOps */
  (
/*@egen*/
  "<" "<="
|
  ">" [ ">" ] ">="/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTOTHERASSIGNMENTOPS); }
        }
      }
  }
/*@egen*/
}

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
/*
 * The <EOF> is deleted since the compilation unit is embedded
 * within grammar code.  To parse to CompilationUnit, we use
 * a special production JavaCompilationUnit below.
 */
{/*@bgen(jjtree) CompilationUnit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
  (
/*@egen*/
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPILATIONUNIT); }
        }
      }
  }
/*@egen*/
}

void JavaCompilationUnit() :
/*
 * Use this to parse a Java compilation unit.
 */
{/*@bgen(jjtree) JavaCompilationUnit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) JavaCompilationUnit */
  (
/*@egen*/
  CompilationUnit() <EOF>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACOMPILATIONUNIT); }
        }
      }
  }
/*@egen*/
}

void PackageDeclaration() :
{/*@bgen(jjtree) PackageDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PackageDeclaration */
  (
/*@egen*/
  "package" Name() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPACKAGEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ImportDeclaration() :
{/*@bgen(jjtree) ImportDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
  (
/*@egen*/
  "import" Name() [ "." "*" ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIMPORTDECLARATION); }
        }
      }
  }
/*@egen*/
}

void TypeDeclaration() :
{/*@bgen(jjtree) TypeDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
  (
/*@egen*/
  LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTYPEDECLARATION); }
        }
      }
  }
/*@egen*/
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{/*@bgen(jjtree) ClassDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
  (
/*@egen*/
  ( "abstract" | "final" | "public" )*
  UnmodifiedClassDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSDECLARATION); }
        }
      }
  }
/*@egen*/
}

void UnmodifiedClassDeclaration() :
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
  (
/*@egen*/
  "class" JavaIdentifier() [ "extends" Name() ] [ "implements" NameList() ]
  ClassBody()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNMODIFIEDCLASSDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ClassBody() :
{/*@bgen(jjtree) ClassBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassBody */
  (
/*@egen*/
  "{" ( ClassBodyDeclaration() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSBODY); }
        }
      }
  }
/*@egen*/
}

void NestedClassDeclaration() :
{/*@bgen(jjtree) NestedClassDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NestedClassDeclaration */
  (
/*@egen*/
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedClassDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNESTEDCLASSDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ClassBodyDeclaration() :
{/*@bgen(jjtree) ClassBodyDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ClassBodyDeclaration */
  (
/*@egen*/
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSBODYDECLARATION); }
        }
      }
  }
/*@egen*/
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{/*@bgen(jjtree) MethodDeclarationLookahead */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MethodDeclarationLookahead */
  (
/*@egen*/
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() JavaIdentifier() "("/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATIONLOOKAHEAD); }
        }
      }
  }
/*@egen*/
}

void InterfaceDeclaration() :
{/*@bgen(jjtree) InterfaceDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) InterfaceDeclaration */
  (
/*@egen*/
  ( "abstract" | "public" )*
  UnmodifiedInterfaceDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINTERFACEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void NestedInterfaceDeclaration() :
{/*@bgen(jjtree) NestedInterfaceDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NestedInterfaceDeclaration */
  (
/*@egen*/
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedInterfaceDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNESTEDINTERFACEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void UnmodifiedInterfaceDeclaration() :
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
  (
/*@egen*/
  "interface" JavaIdentifier() [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNMODIFIEDINTERFACEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void InterfaceMemberDeclaration() :
{/*@bgen(jjtree) InterfaceMemberDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) InterfaceMemberDeclaration */
  (
/*@egen*/
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINTERFACEMEMBERDECLARATION); }
        }
      }
  }
/*@egen*/
}

void FieldDeclaration() :
{/*@bgen(jjtree) FieldDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FieldDeclaration */
  (
/*@egen*/
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFIELDDECLARATION); }
        }
      }
  }
/*@egen*/
}

void VariableDeclarator() :
{/*@bgen(jjtree) VariableDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarator */
  (
/*@egen*/
  VariableDeclaratorId() [ "=" VariableInitializer() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATOR); }
        }
      }
  }
/*@egen*/
}

void VariableDeclaratorId() :
{/*@bgen(jjtree) VariableDeclaratorId */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaratorId */
  (
/*@egen*/
  JavaIdentifier() ( "[" "]" )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATORID); }
        }
      }
  }
/*@egen*/
}

void VariableInitializer() :
{/*@bgen(jjtree) VariableInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
  (
/*@egen*/
  ArrayInitializer()
|
  Expression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEINITIALIZER); }
        }
      }
  }
/*@egen*/
}

void ArrayInitializer() :
{/*@bgen(jjtree) ArrayInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArrayInitializer */
  (
/*@egen*/
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYINITIALIZER); }
        }
      }
  }
/*@egen*/
}

void MethodDeclaration() :
{/*@bgen(jjtree) MethodDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
  (
/*@egen*/
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATION); }
        }
      }
  }
/*@egen*/
}

void MethodDeclarator() :
{/*@bgen(jjtree) MethodDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MethodDeclarator */
  (
/*@egen*/
  JavaIdentifier() FormalParameters() ( "[" "]" )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATOR); }
        }
      }
  }
/*@egen*/
}

void FormalParameters() :
{/*@bgen(jjtree) FormalParameters */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FormalParameters */
  (
/*@egen*/
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETERS); }
        }
      }
  }
/*@egen*/
}

void FormalParameter() :
{/*@bgen(jjtree) FormalParameter */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) FormalParameter */
  (
/*@egen*/
  [ "final" ] Type() VariableDeclaratorId()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETER); }
        }
      }
  }
/*@egen*/
}

void ConstructorDeclaration() :
{/*@bgen(jjtree) ConstructorDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ConstructorDeclaration */
  (
/*@egen*/
  [ "public" | "protected" | "private" ]
  JavaIdentifier() FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONSTRUCTORDECLARATION); }
        }
      }
  }
/*@egen*/
}

void ExplicitConstructorInvocation() :
{/*@bgen(jjtree) ExplicitConstructorInvocation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ExplicitConstructorInvocation */
  (
/*@egen*/
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPLICITCONSTRUCTORINVOCATION); }
        }
      }
  }
/*@egen*/
}

void Initializer() :
{/*@bgen(jjtree) Initializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Initializer */
  (
/*@egen*/
  [ "static" ] Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINITIALIZER); }
        }
      }
  }
/*@egen*/
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{/*@bgen(jjtree) Type */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Type */
  (
/*@egen*/
  ( PrimitiveType() | Name() ) ( "[" "]" )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTYPE); }
        }
      }
  }
/*@egen*/
}

void PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
  (
/*@egen*/
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMITIVETYPE); }
        }
      }
  }
/*@egen*/
}

void ResultType() :
{/*@bgen(jjtree) ResultType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ResultType */
  (
/*@egen*/
  "void"
|
  Type()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRESULTTYPE); }
        }
      }
  }
/*@egen*/
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{/*@bgen(jjtree) Name */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Name */
  (
/*@egen*/
  JavaIdentifier()
  ( LOOKAHEAD(2) "." JavaIdentifier() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAME); }
        }
      }
  }
/*@egen*/
}

void NameList() :
{/*@bgen(jjtree) NameList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NameList */
  (
/*@egen*/
  Name() ( "," Name() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAMELIST); }
        }
      }
  }
/*@egen*/
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{/*@bgen(jjtree) Expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Expression */
  (
/*@egen*/
  ConditionalExpression() [ AssignmentOperator() Expression() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void AssignmentOperator() :
{/*@bgen(jjtree) AssignmentOperator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
  (
/*@egen*/
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|="
|
  OtherAssignmentOps()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTASSIGNMENTOPERATOR); }
        }
      }
  }
/*@egen*/
}

void ConditionalExpression() :
{/*@bgen(jjtree) ConditionalExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
  (
/*@egen*/
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ConditionalOrExpression() :
{/*@bgen(jjtree) ConditionalOrExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ConditionalOrExpression */
  (
/*@egen*/
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ConditionalAndExpression() :
{/*@bgen(jjtree) ConditionalAndExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ConditionalAndExpression */
  (
/*@egen*/
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALANDEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void InclusiveOrExpression() :
{/*@bgen(jjtree) InclusiveOrExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) InclusiveOrExpression */
  (
/*@egen*/
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINCLUSIVEOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ExclusiveOrExpression() :
{/*@bgen(jjtree) ExclusiveOrExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ExclusiveOrExpression */
  (
/*@egen*/
  AndExpression() ( "^" AndExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXCLUSIVEOREXPRESSION); }
        }
      }
  }
/*@egen*/
}

void AndExpression() :
{/*@bgen(jjtree) AndExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AndExpression */
  (
/*@egen*/
  EqualityExpression() ( "&" EqualityExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANDEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void EqualityExpression() :
{/*@bgen(jjtree) EqualityExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EqualityExpression */
  (
/*@egen*/
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEQUALITYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void InstanceOfExpression() :
{/*@bgen(jjtree) InstanceOfExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) InstanceOfExpression */
  (
/*@egen*/
  RelationalExpression() [ "instanceof" Type() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINSTANCEOFEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void RelationalExpression() :
{/*@bgen(jjtree) RelationalExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) RelationalExpression */
  (
/*@egen*/
  /*
   * The lookahead of 2 below is due to the fact that we have split
   * the shift and shift assignment operator into multiple tokens that
   * now clash with these tokens.
   */
  ShiftExpression() ( LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRELATIONALEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void ShiftExpression() :
{/*@bgen(jjtree) ShiftExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ShiftExpression */
  (
/*@egen*/
  /*
   * The lookahead of 3 below is due to the fact that we have split
   * the shift and shift assignment operator into multiple tokens that
   * now clash with these tokens and the relational operators.
   */
  AdditiveExpression() ( LOOKAHEAD(3) ( ShiftOps() ) AdditiveExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSHIFTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AdditiveExpression */
  (
/*@egen*/
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTADDITIVEEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) MultiplicativeExpression */
  (
/*@egen*/
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMULTIPLICATIVEEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
  (
/*@egen*/
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PreIncrementExpression() :
{/*@bgen(jjtree) PreIncrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PreIncrementExpression */
  (
/*@egen*/
  "++" PrimaryExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREINCREMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PreDecrementExpression() :
{/*@bgen(jjtree) PreDecrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PreDecrementExpression */
  (
/*@egen*/
  "--" PrimaryExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREDECREMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void UnaryExpressionNotPlusMinus() :
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  (
/*@egen*/
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSIONNOTPLUSMINUS); }
        }
      }
  }
/*@egen*/
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{/*@bgen(jjtree) CastLookahead */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CastLookahead */
  (
/*@egen*/
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | JavaIdentifier() | "this" | "super" | "new" | Literal() )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTLOOKAHEAD); }
        }
      }
  }
/*@egen*/
}

void PostfixExpression() :
{/*@bgen(jjtree) PostfixExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PostfixExpression */
  (
/*@egen*/
  PrimaryExpression() [ "++" | "--" ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPOSTFIXEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void CastExpression() :
{/*@bgen(jjtree) CastExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) CastExpression */
  (
/*@egen*/
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  LOOKAHEAD("(" Name())
  "(" Type() ")" UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PrimaryExpression() :
{/*@bgen(jjtree) PrimaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
  (
/*@egen*/
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void PrimaryPrefix() :
{/*@bgen(jjtree) PrimaryPrefix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimaryPrefix */
  (
/*@egen*/
  Literal()
|
  "this"
|
  "super" "." JavaIdentifier()
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYPREFIX); }
        }
      }
  }
/*@egen*/
}

void PrimarySuffix() :
{/*@bgen(jjtree) PrimarySuffix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) PrimarySuffix */
  (
/*@egen*/
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression() "]"
|
  "." JavaIdentifier()
|
  Arguments()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYSUFFIX); }
        }
      }
  }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Literal */
  (
/*@egen*/
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLITERAL); }
        }
      }
  }
/*@egen*/
}

void IntegerLiteral() :
{/*@bgen(jjtree) IntegerLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) IntegerLiteral */
  (
/*@egen*/
  <INTEGER_LITERAL>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINTEGERLITERAL); }
        }
      }
  }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
  (
/*@egen*/
  "true"
|
  "false"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBOOLEANLITERAL); }
        }
      }
  }
/*@egen*/
}

void StringLiteral() :
{/*@bgen(jjtree) StringLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) StringLiteral */
  (
/*@egen*/
  <STRING_LITERAL>/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTRINGLITERAL); }
        }
      }
  }
/*@egen*/
}

void NullLiteral() :
{/*@bgen(jjtree) NullLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
  (
/*@egen*/
  "null"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNULLLITERAL); }
        }
      }
  }
/*@egen*/
}

void Arguments() :
{/*@bgen(jjtree) Arguments */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Arguments */
  (
/*@egen*/
  "(" [ ArgumentList() ] ")"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTS); }
        }
      }
  }
/*@egen*/
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
  (
/*@egen*/
  Expression() ( "," Expression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTLIST); }
        }
      }
  }
/*@egen*/
}

void AllocationExpression() :
{/*@bgen(jjtree) AllocationExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) AllocationExpression */
  (
/*@egen*/
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTALLOCATIONEXPRESSION); }
        }
      }
  }
/*@egen*/
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{/*@bgen(jjtree) ArrayDimsAndInits */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ArrayDimsAndInits */
  (
/*@egen*/
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYDIMSANDINITS); }
        }
      }
  }
/*@egen*/
}


/*
 * Statement syntax follows.
 */

void Statement() :
{/*@bgen(jjtree) Statement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Statement */
  (
/*@egen*/
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void LabeledStatement() :
{/*@bgen(jjtree) LabeledStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) LabeledStatement */
  (
/*@egen*/
  JavaIdentifier() ":" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLABELEDSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void Block() :
{/*@bgen(jjtree) Block */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) Block */
  (
/*@egen*/
  "{" ( BlockStatement() )* "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBLOCK); }
        }
      }
  }
/*@egen*/
}

void BlockStatement() :
{/*@bgen(jjtree) BlockStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) BlockStatement */
  (
/*@egen*/
  LOOKAHEAD([ "final" ] Type() JavaIdentifier())
  LocalVariableDeclaration() ";"
|
  Statement()
|
  UnmodifiedClassDeclaration()
|
  UnmodifiedInterfaceDeclaration()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBLOCKSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void LocalVariableDeclaration() :
{/*@bgen(jjtree) LocalVariableDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) LocalVariableDeclaration */
  (
/*@egen*/
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCALVARIABLEDECLARATION); }
        }
      }
  }
/*@egen*/
}

void EmptyStatement() :
{/*@bgen(jjtree) EmptyStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) EmptyStatement */
  (
/*@egen*/
  ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEMPTYSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{/*@bgen(jjtree) StatementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) StatementExpression */
  (
/*@egen*/
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSION); }
        }
      }
  }
/*@egen*/
}

void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
  (
/*@egen*/
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void SwitchLabel() :
{/*@bgen(jjtree) SwitchLabel */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SwitchLabel */
  (
/*@egen*/
  "case" Expression() ":"
|
  "default" ":"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHLABEL); }
        }
      }
  }
/*@egen*/
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) IfStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  (
/*@egen*/
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIFSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  (
/*@egen*/
  "while" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTWHILESTATEMENT); }
        }
      }
  }
/*@egen*/
}

void DoStatement() :
{/*@bgen(jjtree) DoStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) DoStatement */
  (
/*@egen*/
  "do" Statement() "while" "(" Expression() ")" ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTDOSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
  (
/*@egen*/
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ForInit() :
{/*@bgen(jjtree) ForInit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForInit */
  (
/*@egen*/
  LOOKAHEAD( [ "final" ] Type() JavaIdentifier() )
  LocalVariableDeclaration()
|
  StatementExpressionList()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORINIT); }
        }
      }
  }
/*@egen*/
}

void StatementExpressionList() :
{/*@bgen(jjtree) StatementExpressionList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) StatementExpressionList */
  (
/*@egen*/
  StatementExpression() ( "," StatementExpression() )*/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSIONLIST); }
        }
      }
  }
/*@egen*/
}

void ForUpdate() :
{/*@bgen(jjtree) ForUpdate */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ForUpdate */
  (
/*@egen*/
  StatementExpressionList()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORUPDATE); }
        }
      }
  }
/*@egen*/
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
  (
/*@egen*/
  "break" [ JavaIdentifier() ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBREAKSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
  (
/*@egen*/
  "continue" [ JavaIdentifier() ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONTINUESTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ReturnStatement() :
{/*@bgen(jjtree) ReturnStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  (
/*@egen*/
  "return" [ Expression() ] ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRETURNSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void ThrowStatement() :
{/*@bgen(jjtree) ThrowStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
  (
/*@egen*/
  "throw" Expression() ";"/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTHROWSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void SynchronizedStatement() :
{/*@bgen(jjtree) SynchronizedStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) SynchronizedStatement */
  (
/*@egen*/
  "synchronized" "(" Expression() ")" Block()/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSYNCHRONIZEDSTATEMENT); }
        }
      }
  }
/*@egen*/
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{/*@bgen(jjtree) TryStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
/*@egen*/}
{/*@bgen(jjtree) TryStatement */
  (
/*@egen*/
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]/*@bgen(jjtree)*/
  ) {
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTRYSTATEMENT); }
        }
      }
  }
/*@egen*/
}
