/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. JavaCC.java */
package org.gark87.idea.javacc.generated;
import com.intellij.psi.tree.IElementType;
import com.intellij.lang.PsiBuilder;
import java.util.ArrayList;


public class JavaCC/*@bgen(jjtree)*/implements JavaCCTreeConstants, JavaCCConstants {/*@bgen(jjtree)*/

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    IElementType t;
    t = getTokenType(1);
    if (t == BIT_OR || t == COMMA || t == RPAREN || t == RBRACE || t == RBRACKET || t == null) return false;
    return true;
  }

/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/
  final public void javacc_input()  {
 /*@bgen(jjtree) javacc_input */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    javacc_options();
    jj_consume_token(_PARSER_BEGIN);
    jj_consume_token(LPAREN);
    identifier();
    jj_consume_token(RPAREN);
    CompilationUnit();
    jj_consume_token(_PARSER_END);
    jj_consume_token(LPAREN);
    identifier();
    jj_consume_token(RPAREN);
    label_1:
    while (true) {
      production();
      IElementType type_2 = getType();
      if ( type_2 == _JAVACODE || type_2 == _TOKEN || type_2 == _SPECIAL_TOKEN || type_2 == _MORE || type_2 == _SKIP || type_2 == _TOKEN_MGR_DECLS || type_2 == BOOLEAN || type_2 == BYTE || type_2 == CHAR || type_2 == DOUBLE || type_2 == FLOAT || type_2 == INT || type_2 == LONG || type_2 == PRIVATE || type_2 == PROTECTED || type_2 == PUBLIC || type_2 == SHORT || type_2 == VOID || type_2 == IDENTIFIER || type_2 == LT) { 
;} else 
{
break label_1;
}
}
//assert (builder.eof());
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_INPUT); }
        }
      }
  }

  final public void javacc_options()  {
 /*@bgen(jjtree) javacc_options */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_5 = getType();
    if ( type_5 == _OPTIONS) { 
  jj_consume_token(_OPTIONS);
  jj_consume_token(LBRACE);
  label_3:
  while (true) {
    IElementType type_4 = getType();
    if ( type_4 == _LOOKAHEAD || type_4 == _IGNORE_CASE || type_4 == STATIC || type_4 == IDENTIFIER) { 
;} else 
{
break label_3;
}
option_binding();
}
jj_consume_token(RBRACE);} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACC_OPTIONS); }
        }
      }
  }

  final public void option_binding()  {
 /*@bgen(jjtree) option_binding */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_6 = getType();
    if ( type_6 == IDENTIFIER) { 
  jj_consume_token(IDENTIFIER);} else if ( type_6 == _LOOKAHEAD) { 
jj_consume_token(_LOOKAHEAD);} else if ( type_6 == _IGNORE_CASE) { 
jj_consume_token(_IGNORE_CASE);} else if ( type_6 == STATIC) { 
jj_consume_token(STATIC);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
jj_consume_token(ASSIGN);
IElementType type_7 = getType();
if ( type_7 == INTEGER_LITERAL) { 
IntegerLiteral();} else if ( type_7 == FALSE || type_7 == TRUE) { 
BooleanLiteral();} else if ( type_7 == STRING_LITERAL) { 
StringLiteral();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTOPTION_BINDING); }
        }
      }
  }

  final public void production()  {
 /*@bgen(jjtree) production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_8 = getType();
    if ( type_8 == _JAVACODE) { 
  javacode_production();} else if ( type_8 == _TOKEN || type_8 == _SPECIAL_TOKEN || type_8 == _MORE || type_8 == _SKIP || type_8 == LT) { 
regular_expr_production();} else if ( type_8 == _TOKEN_MGR_DECLS) { 
token_manager_decls();} else if ( type_8 == BOOLEAN || type_8 == BYTE || type_8 == CHAR || type_8 == DOUBLE || type_8 == FLOAT || type_8 == INT || type_8 == LONG || type_8 == PRIVATE || type_8 == PROTECTED || type_8 == PUBLIC || type_8 == SHORT || type_8 == VOID || type_8 == IDENTIFIER) { 
bnf_production();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRODUCTION); }
        }
      }
  }

  final public void javacode_production()  {
 /*@bgen(jjtree) javacode_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(_JAVACODE);
    AccessModifier();
    ResultType();
    identifier();
    FormalParameters();
    IElementType type_11 = getType();
    if ( type_11 == THROWS) { 
  jj_consume_token(THROWS);
  Name();
  label_9:
  while (true) {
    IElementType type_10 = getType();
    if ( type_10 == COMMA) { 
  ;} else 
{
  break label_9;
}
jj_consume_token(COMMA);
Name();
}} else 
{
;
}
IElementType type_12 = getType();
if ( type_12 == SHARP) { 
node_descriptor();} else 
{
;
}
Block();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVACODE_PRODUCTION); }
        }
      }
  }

  final public void bnf_production()  {
 /*@bgen(jjtree) bnf_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    AccessModifier();
    ResultType();
    identifier();
    FormalParameters();
    IElementType type_15 = getType();
    if ( type_15 == THROWS) { 
  jj_consume_token(THROWS);
  Name();
  label_13:
  while (true) {
    IElementType type_14 = getType();
    if ( type_14 == COMMA) { 
  ;} else 
{
  break label_13;
}
jj_consume_token(COMMA);
Name();
}} else 
{
;
}
IElementType type_16 = getType();
if ( type_16 == SHARP) { 
node_descriptor();} else 
{
;
}
jj_consume_token(COLON);
Block();
jj_consume_token(LBRACE);
expansion_choices();
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBNF_PRODUCTION); }
        }
      }
  }

  final public void AccessModifier()  {
 /*@bgen(jjtree) AccessModifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_18 = getType();
    if ( type_18 == PRIVATE || type_18 == PROTECTED || type_18 == PUBLIC) { 
IElementType type_17 = getType();
if ( type_17 == PUBLIC) { 
jj_consume_token(PUBLIC);} else if ( type_17 == PROTECTED) { 
jj_consume_token(PROTECTED);} else if ( type_17 == PRIVATE) { 
jj_consume_token(PRIVATE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTACCESSMODIFIER); }
        }
      }
  }

  final public void regular_expr_production()  {
 /*@bgen(jjtree) regular_expr_production */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_22 = getType();
    if ( type_22 == LT) { 
  if (jj_2_1(2)) {
    jj_consume_token(LT);
    jj_consume_token(STAR);
    jj_consume_token(GT);
  } else {
    IElementType type_21 = getType();
    if ( type_21 == LT) { 
  jj_consume_token(LT);
  jj_consume_token(IDENTIFIER);
  label_19:
  while (true) {
    IElementType type_20 = getType();
    if ( type_20 == COMMA) { 
  ;} else 
{
  break label_19;
}
jj_consume_token(COMMA);
jj_consume_token(IDENTIFIER);
}
jj_consume_token(GT);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}} else 
{
;
}
regexpr_kind();
IElementType type_23 = getType();
if ( type_23 == LBRACKET) { 
jj_consume_token(LBRACKET);
jj_consume_token(_IGNORE_CASE);
jj_consume_token(RBRACKET);} else 
{
;
}
jj_consume_token(COLON);
jj_consume_token(LBRACE);
regexpr_spec();
label_24:
while (true) {
IElementType type_25 = getType();
if ( type_25 == BIT_OR) { 
;} else 
{
break label_24;
}
jj_consume_token(BIT_OR);
regexpr_spec();
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPR_PRODUCTION); }
        }
      }
  }

  final public void token_manager_decls()  {
 /*@bgen(jjtree) token_manager_decls */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(_TOKEN_MGR_DECLS);
    jj_consume_token(COLON);
    ClassOrInterfaceBody();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTOKEN_MANAGER_DECLS); }
        }
      }
  }

  final public void regexpr_kind()  {
 /*@bgen(jjtree) regexpr_kind */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_26 = getType();
    if ( type_26 == _TOKEN) { 
  jj_consume_token(_TOKEN);} else if ( type_26 == _SPECIAL_TOKEN) { 
jj_consume_token(_SPECIAL_TOKEN);} else if ( type_26 == _SKIP) { 
jj_consume_token(_SKIP);} else if ( type_26 == _MORE) { 
jj_consume_token(_MORE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_KIND); }
        }
      }
  }

  final public void regexpr_spec()  {
 /*@bgen(jjtree) regexpr_spec */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    regular_expression();
    IElementType type_27 = getType();
    if ( type_27 == LBRACE) { 
  Block();} else 
{
  ;
}
IElementType type_28 = getType();
if ( type_28 == COLON) { 
jj_consume_token(COLON);
jj_consume_token(IDENTIFIER);} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGEXPR_SPEC); }
        }
      }
  }

  final public void expansion_choices()  {
 /*@bgen(jjtree) expansion_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    expansion();
    label_29:
    while (true) {
      IElementType type_30 = getType();
      if ( type_30 == BIT_OR) { 
    ;} else 
  {
    break label_29;
  }
  jj_consume_token(BIT_OR);
  expansion();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_CHOICES); }
        }
      }
  }

  final public void expansion()  {
 /*@bgen(jjtree) expansion */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_31 = getType();
    if ( type_31 == _LOOKAHEAD) { 
  jj_consume_token(_LOOKAHEAD);
  jj_consume_token(LPAREN);
  local_lookahead();
  jj_consume_token(RPAREN);} else 
{
  ;
}
label_32:
while (true) {
  expansion_unit();
  IElementType type_33 = getType();
  if ( type_33 == SHARP) { 
node_descriptor();} else 
{
;
}
if (notTailOfExpansionUnit()) {
;
} else {
break label_32;
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION); }
        }
      }
  }

  final public void local_lookahead()  {
         /*@bgen(jjtree) local_lookahead */
          boolean jjtc000 = true;
          PsiBuilder.Marker jjtn000 = builder.mark();boolean commaAtEnd = false, emptyLA = true;
    IElementType type_34 = getType();
    if ( type_34 == INTEGER_LITERAL) { 
  IntegerLiteral();
          emptyLA = false;} else 
{
  ;
}
if (!emptyLA && (getTokenType(1) != RPAREN)) {
  jj_consume_token(COMMA);
          commaAtEnd = true;
} else {
  ;
}
if (getTokenType(1) != RPAREN && getTokenType(1) != LBRACE) {
  expansion_choices();
          emptyLA = false; commaAtEnd = false;
} else {
  ;
}
if (!emptyLA && !commaAtEnd && (getTokenType(1) != RPAREN)) {
  jj_consume_token(COMMA);
          commaAtEnd = true;
} else {
  ;
}
if (emptyLA || commaAtEnd) {
  jj_consume_token(LBRACE);
  Expression();
  jj_consume_token(RBRACE);
} else {
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCAL_LOOKAHEAD); }
        }
      }
  }

  final public void expansion_unit()  {
 /*@bgen(jjtree) expansion_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_42 = getType();
    if ( type_42 == _LOOKAHEAD) { 
  jj_consume_token(_LOOKAHEAD);
  jj_consume_token(LPAREN);
  local_lookahead();
  jj_consume_token(RPAREN);} else if ( type_42 == LBRACE) { 
Block();} else if ( type_42 == LBRACKET) { 
jj_consume_token(LBRACKET);
expansion_choices();
jj_consume_token(RBRACKET);} else if ( type_42 == TRY) { 
jj_consume_token(TRY);
jj_consume_token(LBRACE);
expansion_choices();
jj_consume_token(RBRACE);
label_35:
while (true) {
IElementType type_36 = getType();
if ( type_36 == CATCH) { 
;} else 
{
break label_35;
}
jj_consume_token(CATCH);
jj_consume_token(LPAREN);
Name();
jj_consume_token(IDENTIFIER);
jj_consume_token(RPAREN);
Block();
}
IElementType type_37 = getType();
if ( type_37 == FINALLY) { 
jj_consume_token(FINALLY);
Block();} else 
{
;
}} else 
{
if (jj_2_4(2147483647)) {
if (jj_2_2(2147483647)) {
PrimaryExpression();
jj_consume_token(ASSIGN);
} else {
;
}
if (jj_2_3(2147483647)) {
identifier();
Arguments();
} else {
IElementType type_39 = getType();
if ( type_39 == STRING_LITERAL || type_39 == LT) { 
regular_expression();
IElementType type_38 = getType();
if ( type_38 == DOT) { 
jj_consume_token(DOT);
jj_consume_token(IDENTIFIER);} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
} else {
IElementType type_43 = getType();
if ( type_43 == LPAREN) { 
jj_consume_token(LPAREN);
expansion_choices();
jj_consume_token(RPAREN);
IElementType type_41 = getType();
if ( type_41 == HOOK || type_41 == PLUS || type_41 == STAR) { 
IElementType type_40 = getType();
if ( type_40 == PLUS) { 
jj_consume_token(PLUS);} else if ( type_40 == STAR) { 
jj_consume_token(STAR);} else if ( type_40 == HOOK) { 
jj_consume_token(HOOK);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPANSION_UNIT); }
        }
      }
  }

  final public void regular_expression()  {
 /*@bgen(jjtree) regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_46 = getType();
    if ( type_46 == STRING_LITERAL) { 
  StringLiteral();} else 
{
  if (jj_2_5(3)) {
    jj_consume_token(LT);
    IElementType type_45 = getType();
    if ( type_45 == _OPTIONS || type_45 == IDENTIFIER || type_45 == SHARP) { 
IElementType type_44 = getType();
if ( type_44 == SHARP) { 
jj_consume_token(SHARP);} else 
{
;
}
identifier();
jj_consume_token(COLON);} else 
{
;
}
complex_regular_expression_choices();
jj_consume_token(GT);
} else if (jj_2_6(2)) {
jj_consume_token(LT);
identifier();
jj_consume_token(GT);
} else {
IElementType type_47 = getType();
if ( type_47 == LT) { 
jj_consume_token(LT);
jj_consume_token(_EOF);
jj_consume_token(GT);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTREGULAR_EXPRESSION); }
        }
      }
  }

  final public void complex_regular_expression_choices()  {
 /*@bgen(jjtree) complex_regular_expression_choices */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    complex_regular_expression();
    label_48:
    while (true) {
      IElementType type_49 = getType();
      if ( type_49 == BIT_OR) { 
    ;} else 
  {
    break label_48;
  }
  jj_consume_token(BIT_OR);
  complex_regular_expression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_CHOICES); }
        }
      }
  }

  final public void complex_regular_expression()  {
 /*@bgen(jjtree) complex_regular_expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    label_50:
    while (true) {
      complex_regular_expression_unit();
      IElementType type_51 = getType();
      if ( type_51 == STRING_LITERAL || type_51 == LPAREN || type_51 == LBRACKET || type_51 == LT || type_51 == TILDE) { 
;} else 
{
break label_50;
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION); }
        }
      }
  }

  final public void complex_regular_expression_unit()  {
 /*@bgen(jjtree) complex_regular_expression_unit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_56 = getType();
    if ( type_56 == STRING_LITERAL) { 
  StringLiteral();} else if ( type_56 == LT) { 
jj_consume_token(LT);
identifier();
jj_consume_token(GT);} else if ( type_56 == LBRACKET || type_56 == TILDE) { 
character_list();} else if ( type_56 == LPAREN) { 
jj_consume_token(LPAREN);
complex_regular_expression_choices();
jj_consume_token(RPAREN);
IElementType type_55 = getType();
if ( type_55 == LBRACE || type_55 == HOOK || type_55 == PLUS || type_55 == STAR) { 
IElementType type_54 = getType();
if ( type_54 == PLUS) { 
jj_consume_token(PLUS);} else if ( type_54 == STAR) { 
jj_consume_token(STAR);} else if ( type_54 == HOOK) { 
jj_consume_token(HOOK);} else if ( type_54 == LBRACE) { 
jj_consume_token(LBRACE);
IntegerLiteral();
IElementType type_53 = getType();
if ( type_53 == COMMA) { 
jj_consume_token(COMMA);
IElementType type_52 = getType();
if ( type_52 == INTEGER_LITERAL) { 
IntegerLiteral();} else 
{
;
}} else 
{
;
}
jj_consume_token(RBRACE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPLEX_REGULAR_EXPRESSION_UNIT); }
        }
      }
  }

  final public void character_list()  {
 /*@bgen(jjtree) character_list */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_57 = getType();
    if ( type_57 == TILDE) { 
  jj_consume_token(TILDE);} else 
{
  ;
}
jj_consume_token(LBRACKET);
IElementType type_60 = getType();
if ( type_60 == STRING_LITERAL) { 
character_descriptor();
label_58:
while (true) {
IElementType type_59 = getType();
if ( type_59 == COMMA) { 
;} else 
{
break label_58;
}
jj_consume_token(COMMA);
character_descriptor();
}} else 
{
;
}
jj_consume_token(RBRACKET);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_LIST); }
        }
      }
  }

  final public void character_descriptor()  {
 /*@bgen(jjtree) character_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    StringLiteral();
    IElementType type_61 = getType();
    if ( type_61 == MINUS) { 
  jj_consume_token(MINUS);
  StringLiteral();} else 
{
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCHARACTER_DESCRIPTOR); }
        }
      }
  }

  final public void identifier()  {
 /*@bgen(jjtree) identifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_62 = getType();
    if ( type_62 == IDENTIFIER) { 
  jj_consume_token(IDENTIFIER);} else if ( type_62 == _OPTIONS) { 
jj_consume_token(_OPTIONS);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIDENTIFIER); }
        }
      }
  }

/**********************************************
 * THE JJTREE PRODUCTIONS START HERE          *
 **********************************************/
  final public void node_descriptor()  {
 /*@bgen(jjtree) node_descriptor */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(SHARP);
    IElementType type_63 = getType();
    if ( type_63 == _LOOKAHEAD || type_63 == _IGNORE_CASE || type_63 == _PARSER_BEGIN || type_63 == _PARSER_END || type_63 == _JAVACODE || type_63 == _TOKEN || type_63 == _SPECIAL_TOKEN || type_63 == _MORE || type_63 == _SKIP || type_63 == _TOKEN_MGR_DECLS || type_63 == _EOF || type_63 == IDENTIFIER) { 
Name();} else if ( type_63 == VOID) { 
jj_consume_token(VOID);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
IElementType type_65 = getType();
if ( type_65 == LPAREN) { 
jj_consume_token(LPAREN);
IElementType type_64 = getType();
if ( type_64 == GT) { 
jj_consume_token(GT);} else 
{
;
}
node_descriptor_expression();
jj_consume_token(RPAREN);} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNODE_DESCRIPTOR); }
        }
      }
  }

  void node_descriptor_expression()  {
 /*@bgen(jjtree) node_descriptor_expression */
boolean jjtc000 = true;
PsiBuilder.Marker jjtn000 = builder.mark();
try {IElementType kind;
  int nesting = 1;
  while (true) {
    kind = getType();
    if (kind == JavaCCConstants._EOF)
      builder.error("Unexpected <EOF>");
    if (kind == JavaCCConstants.LPAREN) nesting++;
    if (kind == JavaCCConstants.RPAREN) {
      nesting--;
      if (nesting == 0) break;
    }
    builder.advanceLexer();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    {
      if (jjtc000) {
        jjtc000 = false;
        {jjtn000.done(JJTNODE_DESCRIPTOR_EXPRESSION); }
      }
    }
  }
}
  }

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */
  final public void JavaIdentifier()  {
 /*@bgen(jjtree) JavaIdentifier */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_66 = getType();
    if ( type_66 == IDENTIFIER) { 
  jj_consume_token(IDENTIFIER);} else if ( type_66 == _LOOKAHEAD) { 
jj_consume_token(_LOOKAHEAD);} else if ( type_66 == _IGNORE_CASE) { 
jj_consume_token(_IGNORE_CASE);} else if ( type_66 == _PARSER_BEGIN) { 
jj_consume_token(_PARSER_BEGIN);} else if ( type_66 == _PARSER_END) { 
jj_consume_token(_PARSER_END);} else if ( type_66 == _JAVACODE) { 
jj_consume_token(_JAVACODE);} else if ( type_66 == _TOKEN) { 
jj_consume_token(_TOKEN);} else if ( type_66 == _SPECIAL_TOKEN) { 
jj_consume_token(_SPECIAL_TOKEN);} else if ( type_66 == _MORE) { 
jj_consume_token(_MORE);} else if ( type_66 == _SKIP) { 
jj_consume_token(_SKIP);} else if ( type_66 == _TOKEN_MGR_DECLS) { 
jj_consume_token(_TOKEN_MGR_DECLS);} else if ( type_66 == _EOF) { 
jj_consume_token(_EOF);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTJAVAIDENTIFIER); }
        }
      }
  }

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit()  {
 /*@bgen(jjtree) CompilationUnit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_7(2147483647)) {
      PackageDeclaration();
    } else {
      ;
    }
    label_67:
    while (true) {
      IElementType type_68 = getType();
      if ( type_68 == IMPORT) { 
    ;} else 
  {
    break label_67;
  }
  ImportDeclaration();
}
label_69:
while (true) {
  IElementType type_70 = getType();
  if ( type_70 == ABSTRACT || type_70 == CLASS || type_70 == ENUM || type_70 == FINAL || type_70 == INTERFACE || type_70 == NATIVE || type_70 == PRIVATE || type_70 == PROTECTED || type_70 == PUBLIC || type_70 == STATIC || type_70 == STRICTFP || type_70 == SYNCHRONIZED || type_70 == TRANSIENT || type_70 == VOLATILE || type_70 == SEMICOLON || type_70 == AT) { 
;} else 
{
break label_69;
}
TypeDeclaration();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCOMPILATIONUNIT); }
        }
      }
  }

  final public void PackageDeclaration()  {
 /*@bgen(jjtree) PackageDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Modifiers();
    jj_consume_token(PACKAGE);
    Name();
    jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPACKAGEDECLARATION); }
        }
      }
  }

  final public void ImportDeclaration()  {
 /*@bgen(jjtree) ImportDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IMPORT);
    IElementType type_71 = getType();
    if ( type_71 == STATIC) { 
  jj_consume_token(STATIC);} else 
{
  ;
}
Name();
IElementType type_72 = getType();
if ( type_72 == DOT) { 
jj_consume_token(DOT);
jj_consume_token(STAR);} else 
{
;
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIMPORTDECLARATION); }
        }
      }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public void Modifiers()  {
 /*@bgen(jjtree) Modifiers */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    label_73:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_73;
      }
      IElementType type_74 = getType();
      if ( type_74 == PUBLIC) { 
    jj_consume_token(PUBLIC);} else if ( type_74 == STATIC) { 
  jj_consume_token(STATIC);} else if ( type_74 == PROTECTED) { 
jj_consume_token(PROTECTED);} else if ( type_74 == PRIVATE) { 
jj_consume_token(PRIVATE);} else if ( type_74 == FINAL) { 
jj_consume_token(FINAL);} else if ( type_74 == ABSTRACT) { 
jj_consume_token(ABSTRACT);} else if ( type_74 == SYNCHRONIZED) { 
jj_consume_token(SYNCHRONIZED);} else if ( type_74 == NATIVE) { 
jj_consume_token(NATIVE);} else if ( type_74 == TRANSIENT) { 
jj_consume_token(TRANSIENT);} else if ( type_74 == VOLATILE) { 
jj_consume_token(VOLATILE);} else if ( type_74 == STRICTFP) { 
jj_consume_token(STRICTFP);} else if ( type_74 == AT) { 
Annotation();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
     {
       if (jjtc000) {
         jjtc000 = false;
         {jjtn000.done(JJTMODIFIERS); }
       }
     }
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration()  {
 /*@bgen(jjtree) TypeDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_76 = getType();
    if ( type_76 == SEMICOLON) { 
  jj_consume_token(SEMICOLON);} else if ( type_76 == ABSTRACT || type_76 == CLASS || type_76 == ENUM || type_76 == FINAL || type_76 == INTERFACE || type_76 == NATIVE || type_76 == PRIVATE || type_76 == PROTECTED || type_76 == PUBLIC || type_76 == STATIC || type_76 == STRICTFP || type_76 == SYNCHRONIZED || type_76 == TRANSIENT || type_76 == VOLATILE || type_76 == AT) { 
Modifiers();
IElementType type_75 = getType();
if ( type_75 == CLASS || type_75 == INTERFACE) { 
ClassOrInterfaceDeclaration();} else if ( type_75 == ENUM) { 
EnumDeclaration();} else if ( type_75 == AT) { 
AnnotationTypeDeclaration();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTYPEDECLARATION); }
        }
      }
  }

  final public void ClassOrInterfaceDeclaration()  {
 /*@bgen(jjtree) ClassOrInterfaceDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_77 = getType();
    if ( type_77 == CLASS) { 
  jj_consume_token(CLASS);} else if ( type_77 == INTERFACE) { 
jj_consume_token(INTERFACE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
jj_consume_token(IDENTIFIER);
IElementType type_78 = getType();
if ( type_78 == LT) { 
TypeParameters();} else 
{
;
}
IElementType type_79 = getType();
if ( type_79 == EXTENDS) { 
ExtendsList();} else 
{
;
}
IElementType type_80 = getType();
if ( type_80 == IMPLEMENTS) { 
ImplementsList();} else 
{
;
}
ClassOrInterfaceBody();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEDECLARATION); }
        }
      }
  }

  final public void ExtendsList()  {
 /*@bgen(jjtree) ExtendsList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_81:
    while (true) {
      IElementType type_82 = getType();
      if ( type_82 == COMMA) { 
    ;} else 
  {
    break label_81;
  }
  jj_consume_token(COMMA);
  ClassOrInterfaceType();
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTEXTENDSLIST); }
         }
       }
  }

  final public void ImplementsList()  {
 /*@bgen(jjtree) ImplementsList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IMPLEMENTS);
    ClassOrInterfaceType();
    label_83:
    while (true) {
      IElementType type_84 = getType();
      if ( type_84 == COMMA) { 
    ;} else 
  {
    break label_83;
  }
  jj_consume_token(COMMA);
  ClassOrInterfaceType();
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTIMPLEMENTSLIST); }
         }
       }
  }

  final public void EnumDeclaration()  {
 /*@bgen(jjtree) EnumDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    IElementType type_85 = getType();
    if ( type_85 == IMPLEMENTS) { 
  ImplementsList();} else 
{
  ;
}
EnumBody();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTENUMDECLARATION); }
        }
      }
  }

  final public void EnumBody()  {
 /*@bgen(jjtree) EnumBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    IElementType type_87 = getType();
    if ( type_87 == ABSTRACT || type_87 == FINAL || type_87 == NATIVE || type_87 == PRIVATE || type_87 == PROTECTED || type_87 == PUBLIC || type_87 == STATIC || type_87 == STRICTFP || type_87 == SYNCHRONIZED || type_87 == TRANSIENT || type_87 == VOLATILE || type_87 == IDENTIFIER || type_87 == AT) { 
EnumConstant();
label_86:
while (true) {
if (jj_2_9(2)) {
;
} else {
break label_86;
}
jj_consume_token(COMMA);
EnumConstant();
}} else 
{
;
}
IElementType type_88 = getType();
if ( type_88 == COMMA) { 
jj_consume_token(COMMA);} else 
{
;
}
IElementType type_91 = getType();
if ( type_91 == SEMICOLON) { 
jj_consume_token(SEMICOLON);
label_89:
while (true) {
IElementType type_90 = getType();
if ( type_90 == ABSTRACT || type_90 == BOOLEAN || type_90 == BYTE || type_90 == CHAR || type_90 == CLASS || type_90 == DOUBLE || type_90 == ENUM || type_90 == FINAL || type_90 == FLOAT || type_90 == INT || type_90 == INTERFACE || type_90 == LONG || type_90 == NATIVE || type_90 == PRIVATE || type_90 == PROTECTED || type_90 == PUBLIC || type_90 == SHORT || type_90 == STATIC || type_90 == STRICTFP || type_90 == SYNCHRONIZED || type_90 == TRANSIENT || type_90 == VOID || type_90 == VOLATILE || type_90 == IDENTIFIER || type_90 == LBRACE || type_90 == SEMICOLON || type_90 == LT || type_90 == AT) { 
;} else 
{
break label_89;
}
ClassOrInterfaceBodyDeclaration();
}} else 
{
;
}
jj_consume_token(RBRACE);
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTENUMBODY); }
         }
       }
  }

  final public void EnumConstant()  {
 /*@bgen(jjtree) EnumConstant */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Modifiers();
    jj_consume_token(IDENTIFIER);
    IElementType type_92 = getType();
    if ( type_92 == LPAREN) { 
  Arguments();} else 
{
  ;
}
IElementType type_93 = getType();
if ( type_93 == LBRACE) { 
ClassOrInterfaceBody();} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTENUMCONSTANT); }
        }
      }
  }

  final public void TypeParameters()  {
 /*@bgen(jjtree) TypeParameters */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LT);
    TypeParameter();
    label_94:
    while (true) {
      IElementType type_95 = getType();
      if ( type_95 == COMMA) { 
    ;} else 
  {
    break label_94;
  }
  jj_consume_token(COMMA);
  TypeParameter();
}
jj_consume_token(GT);
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEPARAMETERS); }
         }
       }
  }

  final public void TypeParameter()  {
 /*@bgen(jjtree) TypeParameter */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    IElementType type_96 = getType();
    if ( type_96 == EXTENDS) { 
  TypeBound();} else 
{
  ;
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEPARAMETER); }
         }
       }
  }

  final public void TypeBound()  {
 /*@bgen(jjtree) TypeBound */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_97:
    while (true) {
      IElementType type_98 = getType();
      if ( type_98 == BIT_AND) { 
    ;} else 
  {
    break label_97;
  }
  jj_consume_token(BIT_AND);
  ClassOrInterfaceType();
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEBOUND); }
         }
       }
  }

  final public void ClassOrInterfaceBody()  {
 /*@bgen(jjtree) ClassOrInterfaceBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    label_99:
    while (true) {
      IElementType type_100 = getType();
      if ( type_100 == ABSTRACT || type_100 == BOOLEAN || type_100 == BYTE || type_100 == CHAR || type_100 == CLASS || type_100 == DOUBLE || type_100 == ENUM || type_100 == FINAL || type_100 == FLOAT || type_100 == INT || type_100 == INTERFACE || type_100 == LONG || type_100 == NATIVE || type_100 == PRIVATE || type_100 == PROTECTED || type_100 == PUBLIC || type_100 == SHORT || type_100 == STATIC || type_100 == STRICTFP || type_100 == SYNCHRONIZED || type_100 == TRANSIENT || type_100 == VOID || type_100 == VOLATILE || type_100 == IDENTIFIER || type_100 == LBRACE || type_100 == SEMICOLON || type_100 == LT || type_100 == AT) { 
;} else 
{
break label_99;
}
ClassOrInterfaceBodyDeclaration();
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEBODY); }
        }
      }
  }

  final public void ClassOrInterfaceBodyDeclaration()  {
 /*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_12(2)) {
      Initializer();
    } else {
      IElementType type_103 = getType();
      if ( type_103 == ABSTRACT || type_103 == BOOLEAN || type_103 == BYTE || type_103 == CHAR || type_103 == CLASS || type_103 == DOUBLE || type_103 == ENUM || type_103 == FINAL || type_103 == FLOAT || type_103 == INT || type_103 == INTERFACE || type_103 == LONG || type_103 == NATIVE || type_103 == PRIVATE || type_103 == PROTECTED || type_103 == PUBLIC || type_103 == SHORT || type_103 == STATIC || type_103 == STRICTFP || type_103 == SYNCHRONIZED || type_103 == TRANSIENT || type_103 == VOID || type_103 == VOLATILE || type_103 == IDENTIFIER || type_103 == LT || type_103 == AT) { 
Modifiers();
IElementType type_101 = getType();
if ( type_101 == CLASS || type_101 == INTERFACE) { 
ClassOrInterfaceDeclaration();} else if ( type_101 == ENUM) { 
EnumDeclaration();} else 
{
if (jj_2_10(2147483647)) {
ConstructorDeclaration();
} else if (jj_2_11(2147483647)) {
FieldDeclaration();
} else {
IElementType type_102 = getType();
if ( type_102 == BOOLEAN || type_102 == BYTE || type_102 == CHAR || type_102 == DOUBLE || type_102 == FLOAT || type_102 == INT || type_102 == LONG || type_102 == SHORT || type_102 == VOID || type_102 == IDENTIFIER || type_102 == LT) { 
MethodDeclaration();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
}} else if ( type_103 == SEMICOLON) { 
jj_consume_token(SEMICOLON);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACEBODYDECLARATION); }
        }
      }
  }

  final public void FieldDeclaration()  {
 /*@bgen(jjtree) FieldDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Type();
    VariableDeclarator();
    label_104:
    while (true) {
      IElementType type_105 = getType();
      if ( type_105 == COMMA) { 
    ;} else 
  {
    break label_104;
  }
  jj_consume_token(COMMA);
  VariableDeclarator();
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFIELDDECLARATION); }
        }
      }
  }

  final public void VariableDeclarator()  {
 /*@bgen(jjtree) VariableDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    VariableDeclaratorId();
    IElementType type_106 = getType();
    if ( type_106 == ASSIGN) { 
  jj_consume_token(ASSIGN);
  VariableInitializer();} else 
{
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATOR); }
        }
      }
  }

  final public void VariableDeclaratorId()  {
 /*@bgen(jjtree) VariableDeclaratorId */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    label_107:
    while (true) {
      IElementType type_108 = getType();
      if ( type_108 == LBRACKET) { 
    ;} else 
  {
    break label_107;
  }
  jj_consume_token(LBRACKET);
  jj_consume_token(RBRACKET);
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEDECLARATORID); }
        }
      }
  }

  final public void VariableInitializer()  {
 /*@bgen(jjtree) VariableInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_109 = getType();
    if ( type_109 == LBRACE) { 
  ArrayInitializer();} else if ( type_109 == _LOOKAHEAD || type_109 == _IGNORE_CASE || type_109 == _PARSER_BEGIN || type_109 == _PARSER_END || type_109 == _JAVACODE || type_109 == _TOKEN || type_109 == _SPECIAL_TOKEN || type_109 == _MORE || type_109 == _SKIP || type_109 == _TOKEN_MGR_DECLS || type_109 == _EOF || type_109 == BOOLEAN || type_109 == BYTE || type_109 == CHAR || type_109 == DOUBLE || type_109 == FALSE || type_109 == FLOAT || type_109 == INT || type_109 == LONG || type_109 == NEW || type_109 == NULL || type_109 == SHORT || type_109 == SUPER || type_109 == THIS || type_109 == TRUE || type_109 == VOID || type_109 == INTEGER_LITERAL || type_109 == FLOATING_POINT_LITERAL || type_109 == CHARACTER_LITERAL || type_109 == STRING_LITERAL || type_109 == IDENTIFIER || type_109 == LPAREN || type_109 == BANG || type_109 == TILDE || type_109 == INCR || type_109 == DECR || type_109 == PLUS || type_109 == MINUS) { 
Expression();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTVARIABLEINITIALIZER); }
        }
      }
  }

  final public void ArrayInitializer()  {
 /*@bgen(jjtree) ArrayInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    IElementType type_111 = getType();
    if ( type_111 == _LOOKAHEAD || type_111 == _IGNORE_CASE || type_111 == _PARSER_BEGIN || type_111 == _PARSER_END || type_111 == _JAVACODE || type_111 == _TOKEN || type_111 == _SPECIAL_TOKEN || type_111 == _MORE || type_111 == _SKIP || type_111 == _TOKEN_MGR_DECLS || type_111 == _EOF || type_111 == BOOLEAN || type_111 == BYTE || type_111 == CHAR || type_111 == DOUBLE || type_111 == FALSE || type_111 == FLOAT || type_111 == INT || type_111 == LONG || type_111 == NEW || type_111 == NULL || type_111 == SHORT || type_111 == SUPER || type_111 == THIS || type_111 == TRUE || type_111 == VOID || type_111 == INTEGER_LITERAL || type_111 == FLOATING_POINT_LITERAL || type_111 == CHARACTER_LITERAL || type_111 == STRING_LITERAL || type_111 == IDENTIFIER || type_111 == LPAREN || type_111 == LBRACE || type_111 == BANG || type_111 == TILDE || type_111 == INCR || type_111 == DECR || type_111 == PLUS || type_111 == MINUS) { 
VariableInitializer();
label_110:
while (true) {
if (jj_2_13(2)) {
;
} else {
break label_110;
}
jj_consume_token(COMMA);
VariableInitializer();
}} else 
{
;
}
IElementType type_112 = getType();
if ( type_112 == COMMA) { 
jj_consume_token(COMMA);} else 
{
;
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYINITIALIZER); }
        }
      }
  }

  final public void MethodDeclaration()  {
 /*@bgen(jjtree) MethodDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_113 = getType();
    if ( type_113 == LT) { 
  TypeParameters();} else 
{
  ;
}
ResultType();
MethodDeclarator();
IElementType type_114 = getType();
if ( type_114 == THROWS) { 
jj_consume_token(THROWS);
NameList();} else 
{
;
}
IElementType type_115 = getType();
if ( type_115 == LBRACE) { 
Block();} else if ( type_115 == SEMICOLON) { 
jj_consume_token(SEMICOLON);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATION); }
        }
      }
  }

  final public void MethodDeclarator()  {
 /*@bgen(jjtree) MethodDeclarator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_116:
    while (true) {
      IElementType type_117 = getType();
      if ( type_117 == LBRACKET) { 
    ;} else 
  {
    break label_116;
  }
  jj_consume_token(LBRACKET);
  jj_consume_token(RBRACKET);
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMETHODDECLARATOR); }
        }
      }
  }

  final public void FormalParameters()  {
 /*@bgen(jjtree) FormalParameters */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LPAREN);
    IElementType type_120 = getType();
    if ( type_120 == ABSTRACT || type_120 == BOOLEAN || type_120 == BYTE || type_120 == CHAR || type_120 == DOUBLE || type_120 == FINAL || type_120 == FLOAT || type_120 == INT || type_120 == LONG || type_120 == NATIVE || type_120 == PRIVATE || type_120 == PROTECTED || type_120 == PUBLIC || type_120 == SHORT || type_120 == STATIC || type_120 == STRICTFP || type_120 == SYNCHRONIZED || type_120 == TRANSIENT || type_120 == VOLATILE || type_120 == IDENTIFIER || type_120 == AT) { 
FormalParameter();
label_118:
while (true) {
IElementType type_119 = getType();
if ( type_119 == COMMA) { 
;} else 
{
break label_118;
}
jj_consume_token(COMMA);
FormalParameter();
}} else 
{
;
}
jj_consume_token(RPAREN);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETERS); }
        }
      }
  }

  final public void FormalParameter()  {
 /*@bgen(jjtree) FormalParameter */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Modifiers();
    Type();
    IElementType type_121 = getType();
    if ( type_121 == ELLIPSIS) { 
  jj_consume_token(ELLIPSIS);} else 
{
  ;
}
VariableDeclaratorId();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORMALPARAMETER); }
        }
      }
  }

  final public void ConstructorDeclaration()  {
 /*@bgen(jjtree) ConstructorDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_122 = getType();
    if ( type_122 == LT) { 
  TypeParameters();} else 
{
  ;
}
jj_consume_token(IDENTIFIER);
FormalParameters();
IElementType type_123 = getType();
if ( type_123 == THROWS) { 
jj_consume_token(THROWS);
NameList();} else 
{
;
}
jj_consume_token(LBRACE);
if (jj_2_14(2147483647)) {
ExplicitConstructorInvocation();
} else {
;
}
label_124:
while (true) {
IElementType type_125 = getType();
if ( type_125 == _LOOKAHEAD || type_125 == _IGNORE_CASE || type_125 == _PARSER_BEGIN || type_125 == _PARSER_END || type_125 == _JAVACODE || type_125 == _TOKEN || type_125 == _SPECIAL_TOKEN || type_125 == _MORE || type_125 == _SKIP || type_125 == _TOKEN_MGR_DECLS || type_125 == _EOF || type_125 == ABSTRACT || type_125 == ASSERT || type_125 == BOOLEAN || type_125 == BREAK || type_125 == BYTE || type_125 == CHAR || type_125 == CLASS || type_125 == CONTINUE || type_125 == DO || type_125 == DOUBLE || type_125 == FALSE || type_125 == FINAL || type_125 == FLOAT || type_125 == FOR || type_125 == IF || type_125 == INT || type_125 == INTERFACE || type_125 == LONG || type_125 == NATIVE || type_125 == NEW || type_125 == NULL || type_125 == PRIVATE || type_125 == PROTECTED || type_125 == PUBLIC || type_125 == RETURN || type_125 == SHORT || type_125 == STATIC || type_125 == STRICTFP || type_125 == SUPER || type_125 == SWITCH || type_125 == SYNCHRONIZED || type_125 == THIS || type_125 == THROW || type_125 == TRANSIENT || type_125 == TRUE || type_125 == TRY || type_125 == VOID || type_125 == VOLATILE || type_125 == WHILE || type_125 == INTEGER_LITERAL || type_125 == FLOATING_POINT_LITERAL || type_125 == CHARACTER_LITERAL || type_125 == STRING_LITERAL || type_125 == IDENTIFIER || type_125 == LPAREN || type_125 == LBRACE || type_125 == SEMICOLON || type_125 == INCR || type_125 == DECR || type_125 == AT) { 
;} else 
{
break label_124;
}
BlockStatement();
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONSTRUCTORDECLARATION); }
        }
      }
  }

  final public void ExplicitConstructorInvocation()  {
 /*@bgen(jjtree) ExplicitConstructorInvocation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_16(2147483647)) {
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      IElementType type_126 = getType();
      if ( type_126 == _LOOKAHEAD || type_126 == _IGNORE_CASE || type_126 == _PARSER_BEGIN || type_126 == _PARSER_END || type_126 == _JAVACODE || type_126 == _TOKEN || type_126 == _SPECIAL_TOKEN || type_126 == _MORE || type_126 == _SKIP || type_126 == _TOKEN_MGR_DECLS || type_126 == _EOF || type_126 == BOOLEAN || type_126 == BYTE || type_126 == CHAR || type_126 == DOUBLE || type_126 == FALSE || type_126 == FLOAT || type_126 == INT || type_126 == LONG || type_126 == NEW || type_126 == NULL || type_126 == SHORT || type_126 == SUPER || type_126 == THIS || type_126 == TRUE || type_126 == VOID || type_126 == INTEGER_LITERAL || type_126 == FLOATING_POINT_LITERAL || type_126 == CHARACTER_LITERAL || type_126 == STRING_LITERAL || type_126 == IDENTIFIER || type_126 == LPAREN) { 
if (jj_2_15(2)) {
PrimaryExpression();
jj_consume_token(DOT);
} else {
;
}
jj_consume_token(SUPER);
Arguments();
jj_consume_token(SEMICOLON);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPLICITCONSTRUCTORINVOCATION); }
        }
      }
  }

  final public void Initializer()  {
 /*@bgen(jjtree) Initializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_127 = getType();
    if ( type_127 == STATIC) { 
  jj_consume_token(STATIC);} else 
{
  ;
}
Block();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINITIALIZER); }
        }
      }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type()  {
 /*@bgen(jjtree) Type */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_17(2)) {
      ReferenceType();
    } else {
      IElementType type_128 = getType();
      if ( type_128 == BOOLEAN || type_128 == BYTE || type_128 == CHAR || type_128 == DOUBLE || type_128 == FLOAT || type_128 == INT || type_128 == LONG || type_128 == SHORT) { 
PrimitiveType();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPE); }
         }
       }
  }

  final public void ReferenceType()  {
 /*@bgen(jjtree) ReferenceType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_131 = getType();
    if ( type_131 == BOOLEAN || type_131 == BYTE || type_131 == CHAR || type_131 == DOUBLE || type_131 == FLOAT || type_131 == INT || type_131 == LONG || type_131 == SHORT) { 
PrimitiveType();
label_129:
while (true) {
jj_consume_token(LBRACKET);
jj_consume_token(RBRACKET);
if (jj_2_18(2)) {
;
} else {
break label_129;
}
}} else if ( type_131 == IDENTIFIER) { 
ClassOrInterfaceType();
label_130:
while (true) {
if (jj_2_19(2)) {
;
} else {
break label_130;
}
jj_consume_token(LBRACKET);
jj_consume_token(RBRACKET);
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTREFERENCETYPE); }
         }
       }
  }

  final public void ClassOrInterfaceType()  {
 /*@bgen(jjtree) ClassOrInterfaceType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    if (jj_2_20(2)) {
      TypeArguments();
    } else {
      ;
    }
    label_132:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_132;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      if (jj_2_22(2)) {
        TypeArguments();
      } else {
        ;
      }
    }
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCLASSORINTERFACETYPE); }
        }
      }
  }

  final public void TypeArguments()  {
 /*@bgen(jjtree) TypeArguments */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LT);
    TypeArgument();
    label_133:
    while (true) {
      IElementType type_134 = getType();
      if ( type_134 == COMMA) { 
    ;} else 
  {
    break label_133;
  }
  jj_consume_token(COMMA);
  TypeArgument();
}
jj_consume_token(GT);
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEARGUMENTS); }
         }
       }
  }

  final public void TypeArgument()  {
 /*@bgen(jjtree) TypeArgument */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_136 = getType();
    if ( type_136 == BOOLEAN || type_136 == BYTE || type_136 == CHAR || type_136 == DOUBLE || type_136 == FLOAT || type_136 == INT || type_136 == LONG || type_136 == SHORT || type_136 == IDENTIFIER) { 
ReferenceType();} else if ( type_136 == HOOK) { 
jj_consume_token(HOOK);
IElementType type_135 = getType();
if ( type_135 == EXTENDS || type_135 == SUPER) { 
WildcardBounds();} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTTYPEARGUMENT); }
         }
       }
  }

  final public void WildcardBounds()  {
 /*@bgen(jjtree) WildcardBounds */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_137 = getType();
    if ( type_137 == EXTENDS) { 
  jj_consume_token(EXTENDS);
  ReferenceType();} else if ( type_137 == SUPER) { 
jj_consume_token(SUPER);
ReferenceType();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTWILDCARDBOUNDS); }
         }
       }
  }

  final public void PrimitiveType()  {
 /*@bgen(jjtree) PrimitiveType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_138 = getType();
    if ( type_138 == BOOLEAN) { 
  jj_consume_token(BOOLEAN);} else if ( type_138 == CHAR) { 
jj_consume_token(CHAR);} else if ( type_138 == BYTE) { 
jj_consume_token(BYTE);} else if ( type_138 == SHORT) { 
jj_consume_token(SHORT);} else if ( type_138 == INT) { 
jj_consume_token(INT);} else if ( type_138 == LONG) { 
jj_consume_token(LONG);} else if ( type_138 == FLOAT) { 
jj_consume_token(FLOAT);} else if ( type_138 == DOUBLE) { 
jj_consume_token(DOUBLE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMITIVETYPE); }
        }
      }
  }

  final public void ResultType()  {
 /*@bgen(jjtree) ResultType */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_139 = getType();
    if ( type_139 == VOID) { 
  jj_consume_token(VOID);} else if ( type_139 == BOOLEAN || type_139 == BYTE || type_139 == CHAR || type_139 == DOUBLE || type_139 == FLOAT || type_139 == INT || type_139 == LONG || type_139 == SHORT || type_139 == IDENTIFIER) { 
Type();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRESULTTYPE); }
        }
      }
  }

  final public void Name()  {
 /*@bgen(jjtree) Name */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    JavaIdentifier();
    label_140:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_140;
      }
      jj_consume_token(DOT);
      JavaIdentifier();
    }
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAME); }
        }
      }
  }

  final public void NameList()  {
 /*@bgen(jjtree) NameList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Name();
    label_141:
    while (true) {
      IElementType type_142 = getType();
      if ( type_142 == COMMA) { 
    ;} else 
  {
    break label_141;
  }
  jj_consume_token(COMMA);
  Name();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTNAMELIST); }
        }
      }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression()  {
 /*@bgen(jjtree) Expression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    ConditionalExpression();
    if (jj_2_24(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXPRESSION); }
        }
      }
  }

  final public void AssignmentOperator()  {
 /*@bgen(jjtree) AssignmentOperator */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_144 = getType();
    if ( type_144 == ASSIGN) { 
  jj_consume_token(ASSIGN);} else if ( type_144 == STARASSIGN) { 
jj_consume_token(STARASSIGN);} else if ( type_144 == SLASHASSIGN) { 
jj_consume_token(SLASHASSIGN);} else if ( type_144 == REMASSIGN) { 
jj_consume_token(REMASSIGN);} else if ( type_144 == PLUSASSIGN) { 
jj_consume_token(PLUSASSIGN);} else if ( type_144 == MINUSASSIGN) { 
jj_consume_token(MINUSASSIGN);} else if ( type_144 == LT) { 
jj_consume_token(LT);
jj_consume_token(LT);
jj_consume_token(ASSIGN);} else if ( type_144 == GT) { 
jj_consume_token(GT);
jj_consume_token(GT);
IElementType type_143 = getType();
if ( type_143 == GT) { 
jj_consume_token(GT);} else 
{
;
}
jj_consume_token(ASSIGN);} else if ( type_144 == ANDASSIGN) { 
jj_consume_token(ANDASSIGN);} else if ( type_144 == XORASSIGN) { 
jj_consume_token(XORASSIGN);} else if ( type_144 == ORASSIGN) { 
jj_consume_token(ORASSIGN);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTASSIGNMENTOPERATOR); }
        }
      }
  }

  final public void ConditionalExpression()  {
 /*@bgen(jjtree) #ConditionalExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    ConditionalOrExpression();
    IElementType type_145 = getType();
    if ( type_145 == HOOK) { 
  jj_consume_token(HOOK);
  Expression();
  jj_consume_token(COLON);
  Expression();} else 
{
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALEXPRESSION); }
        }
      }
  }

  final public void ConditionalOrExpression()  {
 /*@bgen(jjtree) #ConditionalOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    ConditionalAndExpression();
    label_146:
    while (true) {
      IElementType type_147 = getType();
      if ( type_147 == SC_OR) { 
    ;} else 
  {
    break label_146;
  }
  jj_consume_token(SC_OR);
  ConditionalAndExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALOREXPRESSION); }
        }
      }
  }

  final public void ConditionalAndExpression()  {
 /*@bgen(jjtree) #ConditionalAndExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    InclusiveOrExpression();
    label_148:
    while (true) {
      IElementType type_149 = getType();
      if ( type_149 == SC_AND) { 
    ;} else 
  {
    break label_148;
  }
  jj_consume_token(SC_AND);
  InclusiveOrExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONDITIONALANDEXPRESSION); }
        }
      }
  }

  final public void InclusiveOrExpression()  {
 /*@bgen(jjtree) #InclusiveOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    ExclusiveOrExpression();
    label_150:
    while (true) {
      IElementType type_151 = getType();
      if ( type_151 == BIT_OR) { 
    ;} else 
  {
    break label_150;
  }
  jj_consume_token(BIT_OR);
  ExclusiveOrExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINCLUSIVEOREXPRESSION); }
        }
      }
  }

  final public void ExclusiveOrExpression()  {
 /*@bgen(jjtree) #ExclusiveOrExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    AndExpression();
    label_152:
    while (true) {
      IElementType type_153 = getType();
      if ( type_153 == XOR) { 
    ;} else 
  {
    break label_152;
  }
  jj_consume_token(XOR);
  AndExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEXCLUSIVEOREXPRESSION); }
        }
      }
  }

  final public void AndExpression()  {
 /*@bgen(jjtree) #AndExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    EqualityExpression();
    label_154:
    while (true) {
      IElementType type_155 = getType();
      if ( type_155 == BIT_AND) { 
    ;} else 
  {
    break label_154;
  }
  jj_consume_token(BIT_AND);
  EqualityExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANDEXPRESSION); }
        }
      }
  }

  final public void EqualityExpression()  {
 /*@bgen(jjtree) #EqualityExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    InstanceOfExpression();
    label_156:
    while (true) {
      IElementType type_157 = getType();
      if ( type_157 == EQ || type_157 == NE) { 
  ;} else 
{
  break label_156;
}
IElementType type_158 = getType();
if ( type_158 == EQ) { 
jj_consume_token(EQ);} else if ( type_158 == NE) { 
jj_consume_token(NE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
InstanceOfExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEQUALITYEXPRESSION); }
        }
      }
  }

  final public void InstanceOfExpression()  {
 /*@bgen(jjtree) #InstanceOfExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    RelationalExpression();
    IElementType type_159 = getType();
    if ( type_159 == INSTANCEOF) { 
  jj_consume_token(INSTANCEOF);
  Type();} else 
{
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTINSTANCEOFEXPRESSION); }
        }
      }
  }

  final public void RelationalExpression()  {
 /*@bgen(jjtree) #RelationalExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    ShiftExpression();
    label_160:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_160;
      }
      IElementType type_161 = getType();
      if ( type_161 == LT) { 
    jj_consume_token(LT);} else if ( type_161 == GT) { 
  jj_consume_token(GT);} else 
{
  if (!builder.eof()) {
    PsiBuilder.Marker errorMarker = builder.mark();
    String text = builder.getTokenText();
    builder.advanceLexer();
    errorMarker.error("Unexpected token " + text);
  } else {
    builder.error("Unexpected end of file");
  }
  
}
IElementType type_162 = getType();
if ( type_162 == ASSIGN) { 
jj_consume_token(ASSIGN);} else 
{
;
}
ShiftExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRELATIONALEXPRESSION); }
        }
      }
  }

  final public void ShiftExpression()  {
 /*@bgen(jjtree) #ShiftExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    AdditiveExpression();
    label_163:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_163;
      }
      IElementType type_164 = getType();
      if ( type_164 == LT) { 
    jj_consume_token(LT);
    jj_consume_token(LT);} else 
  {
    if (jj_2_27(3)) {
      RUNSIGNEDSHIFT();
    } else {
      IElementType type_165 = getType();
      if ( type_165 == GT) { 
    RSIGNEDSHIFT();} else 
  {
    if (!builder.eof()) {
      PsiBuilder.Marker errorMarker = builder.mark();
      String text = builder.getTokenText();
      builder.advanceLexer();
      errorMarker.error("Unexpected token " + text);
    } else {
      builder.error("Unexpected end of file");
    }
    
  }
}
}
AdditiveExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSHIFTEXPRESSION); }
        }
      }
  }

  final public void AdditiveExpression()  {
 /*@bgen(jjtree) #AdditiveExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    MultiplicativeExpression();
    label_166:
    while (true) {
      IElementType type_167 = getType();
      if ( type_167 == PLUS || type_167 == MINUS) { 
  ;} else 
{
  break label_166;
}
IElementType type_168 = getType();
if ( type_168 == PLUS) { 
jj_consume_token(PLUS);} else if ( type_168 == MINUS) { 
jj_consume_token(MINUS);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
MultiplicativeExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTADDITIVEEXPRESSION); }
        }
      }
  }

  final public void MultiplicativeExpression()  {
 /*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    UnaryExpression();
    label_169:
    while (true) {
      IElementType type_170 = getType();
      if ( type_170 == STAR || type_170 == SLASH || type_170 == REM) { 
;} else 
{
break label_169;
}
IElementType type_171 = getType();
if ( type_171 == STAR) { 
jj_consume_token(STAR);} else if ( type_171 == SLASH) { 
jj_consume_token(SLASH);} else if ( type_171 == REM) { 
jj_consume_token(REM);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
UnaryExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMULTIPLICATIVEEXPRESSION); }
        }
      }
  }

  final public void UnaryExpression()  {
 /*@bgen(jjtree) UnaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_173 = getType();
    if ( type_173 == PLUS || type_173 == MINUS) { 
IElementType type_172 = getType();
if ( type_172 == PLUS) { 
jj_consume_token(PLUS);} else if ( type_172 == MINUS) { 
jj_consume_token(MINUS);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
UnaryExpression();} else if ( type_173 == INCR) { 
PreIncrementExpression();} else if ( type_173 == DECR) { 
PreDecrementExpression();} else if ( type_173 == _LOOKAHEAD || type_173 == _IGNORE_CASE || type_173 == _PARSER_BEGIN || type_173 == _PARSER_END || type_173 == _JAVACODE || type_173 == _TOKEN || type_173 == _SPECIAL_TOKEN || type_173 == _MORE || type_173 == _SKIP || type_173 == _TOKEN_MGR_DECLS || type_173 == _EOF || type_173 == BOOLEAN || type_173 == BYTE || type_173 == CHAR || type_173 == DOUBLE || type_173 == FALSE || type_173 == FLOAT || type_173 == INT || type_173 == LONG || type_173 == NEW || type_173 == NULL || type_173 == SHORT || type_173 == SUPER || type_173 == THIS || type_173 == TRUE || type_173 == VOID || type_173 == INTEGER_LITERAL || type_173 == FLOATING_POINT_LITERAL || type_173 == CHARACTER_LITERAL || type_173 == STRING_LITERAL || type_173 == IDENTIFIER || type_173 == LPAREN || type_173 == BANG || type_173 == TILDE) { 
UnaryExpressionNotPlusMinus();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSION); }
        }
      }
  }

  final public void PreIncrementExpression()  {
 /*@bgen(jjtree) PreIncrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(INCR);
    PrimaryExpression();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREINCREMENTEXPRESSION); }
        }
      }
  }

  final public void PreDecrementExpression()  {
 /*@bgen(jjtree) PreDecrementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(DECR);
    PrimaryExpression();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPREDECREMENTEXPRESSION); }
        }
      }
  }

  final public void UnaryExpressionNotPlusMinus()  {
 /*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_175 = getType();
    if ( type_175 == BANG || type_175 == TILDE) { 
IElementType type_174 = getType();
if ( type_174 == TILDE) { 
jj_consume_token(TILDE);} else if ( type_174 == BANG) { 
jj_consume_token(BANG);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
UnaryExpression();} else 
{
if (jj_2_28(2147483647)) {
CastExpression();
} else {
IElementType type_176 = getType();
if ( type_176 == _LOOKAHEAD || type_176 == _IGNORE_CASE || type_176 == _PARSER_BEGIN || type_176 == _PARSER_END || type_176 == _JAVACODE || type_176 == _TOKEN || type_176 == _SPECIAL_TOKEN || type_176 == _MORE || type_176 == _SKIP || type_176 == _TOKEN_MGR_DECLS || type_176 == _EOF || type_176 == BOOLEAN || type_176 == BYTE || type_176 == CHAR || type_176 == DOUBLE || type_176 == FALSE || type_176 == FLOAT || type_176 == INT || type_176 == LONG || type_176 == NEW || type_176 == NULL || type_176 == SHORT || type_176 == SUPER || type_176 == THIS || type_176 == TRUE || type_176 == VOID || type_176 == INTEGER_LITERAL || type_176 == FLOATING_POINT_LITERAL || type_176 == CHARACTER_LITERAL || type_176 == STRING_LITERAL || type_176 == IDENTIFIER || type_176 == LPAREN) { 
PostfixExpression();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTUNARYEXPRESSIONNOTPLUSMINUS); }
        }
      }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead()  {
 /*@bgen(jjtree) CastLookahead */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_29(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_30(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      IElementType type_178 = getType();
      if ( type_178 == LPAREN) { 
    jj_consume_token(LPAREN);
    Type();
    jj_consume_token(RPAREN);
    IElementType type_177 = getType();
    if ( type_177 == TILDE) { 
  jj_consume_token(TILDE);} else if ( type_177 == BANG) { 
jj_consume_token(BANG);} else if ( type_177 == LPAREN) { 
jj_consume_token(LPAREN);} else if ( type_177 == IDENTIFIER) { 
jj_consume_token(IDENTIFIER);} else if ( type_177 == THIS) { 
jj_consume_token(THIS);} else if ( type_177 == SUPER) { 
jj_consume_token(SUPER);} else if ( type_177 == NEW) { 
jj_consume_token(NEW);} else if ( type_177 == FALSE || type_177 == NULL || type_177 == TRUE || type_177 == INTEGER_LITERAL || type_177 == FLOATING_POINT_LITERAL || type_177 == CHARACTER_LITERAL || type_177 == STRING_LITERAL) { 
Literal();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTLOOKAHEAD); }
        }
      }
  }

  final public void PostfixExpression()  {
 /*@bgen(jjtree) #PostfixExpression(> 1) */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    PrimaryExpression();
    IElementType type_180 = getType();
    if ( type_180 == INCR || type_180 == DECR) { 
IElementType type_179 = getType();
if ( type_179 == INCR) { 
jj_consume_token(INCR);} else if ( type_179 == DECR) { 
jj_consume_token(DECR);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPOSTFIXEXPRESSION); }
        }
      }
  }

  final public void CastExpression()  {
 /*@bgen(jjtree) CastExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_31(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(RPAREN);
      UnaryExpression();
    } else {
      IElementType type_181 = getType();
      if ( type_181 == LPAREN) { 
    jj_consume_token(LPAREN);
    Type();
    jj_consume_token(RPAREN);
    UnaryExpressionNotPlusMinus();} else 
  {
    if (!builder.eof()) {
      PsiBuilder.Marker errorMarker = builder.mark();
      String text = builder.getTokenText();
      builder.advanceLexer();
      errorMarker.error("Unexpected token " + text);
    } else {
      builder.error("Unexpected end of file");
    }
    
  }
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCASTEXPRESSION); }
        }
      }
  }

  final public void PrimaryExpression()  {
 /*@bgen(jjtree) PrimaryExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    PrimaryPrefix();
    label_182:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_182;
      }
      PrimarySuffix();
    }
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYEXPRESSION); }
        }
      }
  }

  final public void MemberSelector()  {
 /*@bgen(jjtree) MemberSelector */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(DOT);
    TypeArguments();
    jj_consume_token(IDENTIFIER);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMEMBERSELECTOR); }
        }
      }
  }

  final public void PrimaryPrefix()  {
 /*@bgen(jjtree) PrimaryPrefix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_183 = getType();
    if ( type_183 == FALSE || type_183 == NULL || type_183 == TRUE || type_183 == INTEGER_LITERAL || type_183 == FLOATING_POINT_LITERAL || type_183 == CHARACTER_LITERAL || type_183 == STRING_LITERAL) { 
Literal();} else if ( type_183 == THIS) { 
jj_consume_token(THIS);} else if ( type_183 == SUPER) { 
jj_consume_token(SUPER);
jj_consume_token(DOT);
jj_consume_token(IDENTIFIER);} else if ( type_183 == LPAREN) { 
jj_consume_token(LPAREN);
Expression();
jj_consume_token(RPAREN);} else if ( type_183 == NEW) { 
AllocationExpression();} else 
{
if (jj_2_33(2147483647)) {
ResultType();
jj_consume_token(DOT);
jj_consume_token(CLASS);
} else {
IElementType type_184 = getType();
if ( type_184 == _LOOKAHEAD || type_184 == _IGNORE_CASE || type_184 == _PARSER_BEGIN || type_184 == _PARSER_END || type_184 == _JAVACODE || type_184 == _TOKEN || type_184 == _SPECIAL_TOKEN || type_184 == _MORE || type_184 == _SKIP || type_184 == _TOKEN_MGR_DECLS || type_184 == _EOF || type_184 == IDENTIFIER) { 
Name();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYPREFIX); }
        }
      }
  }

  final public void PrimarySuffix()  {
 /*@bgen(jjtree) PrimarySuffix */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_34(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_35(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else if (jj_2_36(3)) {
      MemberSelector();
    } else {
      IElementType type_185 = getType();
      if ( type_185 == LBRACKET) { 
    jj_consume_token(LBRACKET);
    Expression();
    jj_consume_token(RBRACKET);} else if ( type_185 == DOT) { 
  jj_consume_token(DOT);
  jj_consume_token(IDENTIFIER);} else if ( type_185 == LPAREN) { 
Arguments();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTPRIMARYSUFFIX); }
        }
      }
  }

  final public void Literal()  {
 /*@bgen(jjtree) Literal */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_186 = getType();
    if ( type_186 == INTEGER_LITERAL) { 
  jj_consume_token(INTEGER_LITERAL);} else if ( type_186 == FLOATING_POINT_LITERAL) { 
jj_consume_token(FLOATING_POINT_LITERAL);} else if ( type_186 == CHARACTER_LITERAL) { 
jj_consume_token(CHARACTER_LITERAL);} else if ( type_186 == STRING_LITERAL) { 
jj_consume_token(STRING_LITERAL);} else if ( type_186 == FALSE || type_186 == TRUE) { 
BooleanLiteral();} else if ( type_186 == NULL) { 
NullLiteral();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLITERAL); }
        }
      }
  }

  final public void IntegerLiteral()  {
    jj_consume_token(INTEGER_LITERAL);
  }

  final public void BooleanLiteral()  {
 /*@bgen(jjtree) BooleanLiteral */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_187 = getType();
    if ( type_187 == TRUE) { 
  jj_consume_token(TRUE);} else if ( type_187 == FALSE) { 
jj_consume_token(FALSE);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBOOLEANLITERAL); }
        }
      }
  }

  final public void StringLiteral()  {
    jj_consume_token(STRING_LITERAL);
  }

  final public void NullLiteral()  {
    jj_consume_token(NULL);
  }

  final public void Arguments()  {
 /*@bgen(jjtree) Arguments */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LPAREN);
    IElementType type_188 = getType();
    if ( type_188 == _LOOKAHEAD || type_188 == _IGNORE_CASE || type_188 == _PARSER_BEGIN || type_188 == _PARSER_END || type_188 == _JAVACODE || type_188 == _TOKEN || type_188 == _SPECIAL_TOKEN || type_188 == _MORE || type_188 == _SKIP || type_188 == _TOKEN_MGR_DECLS || type_188 == _EOF || type_188 == BOOLEAN || type_188 == BYTE || type_188 == CHAR || type_188 == DOUBLE || type_188 == FALSE || type_188 == FLOAT || type_188 == INT || type_188 == LONG || type_188 == NEW || type_188 == NULL || type_188 == SHORT || type_188 == SUPER || type_188 == THIS || type_188 == TRUE || type_188 == VOID || type_188 == INTEGER_LITERAL || type_188 == FLOATING_POINT_LITERAL || type_188 == CHARACTER_LITERAL || type_188 == STRING_LITERAL || type_188 == IDENTIFIER || type_188 == LPAREN || type_188 == BANG || type_188 == TILDE || type_188 == INCR || type_188 == DECR || type_188 == PLUS || type_188 == MINUS) { 
ArgumentList();} else 
{
;
}
jj_consume_token(RPAREN);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTS); }
        }
      }
  }

  final public void ArgumentList()  {
 /*@bgen(jjtree) ArgumentList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Expression();
    label_189:
    while (true) {
      IElementType type_190 = getType();
      if ( type_190 == COMMA) { 
    ;} else 
  {
    break label_189;
  }
  jj_consume_token(COMMA);
  Expression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARGUMENTLIST); }
        }
      }
  }

  final public void AllocationExpression()  {
 /*@bgen(jjtree) AllocationExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_37(2)) {
      jj_consume_token(NEW);
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      IElementType type_194 = getType();
      if ( type_194 == NEW) { 
    jj_consume_token(NEW);
    ClassOrInterfaceType();
    IElementType type_191 = getType();
    if ( type_191 == LT) { 
  TypeArguments();} else 
{
  ;
}
IElementType type_193 = getType();
if ( type_193 == LBRACKET) { 
ArrayDimsAndInits();} else if ( type_193 == LPAREN) { 
Arguments();
IElementType type_192 = getType();
if ( type_192 == LBRACE) { 
ClassOrInterfaceBody();} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTALLOCATIONEXPRESSION); }
        }
      }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits()  {
 /*@bgen(jjtree) ArrayDimsAndInits */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_40(2)) {
      label_195:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        if (jj_2_38(2)) {
          ;
        } else {
          break label_195;
        }
      }
      label_196:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_196;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      IElementType type_199 = getType();
      if ( type_199 == LBRACKET) { 
    label_197:
    while (true) {
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
      IElementType type_198 = getType();
      if ( type_198 == LBRACKET) { 
    ;} else 
  {
    break label_197;
  }
}
ArrayInitializer();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTARRAYDIMSANDINITS); }
        }
      }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement()  {
    if (jj_2_41(2)) {
      LabeledStatement();
    } else {
      IElementType type_200 = getType();
      if ( type_200 == ASSERT) { 
    AssertStatement();} else if ( type_200 == LBRACE) { 
  Block();} else if ( type_200 == SEMICOLON) { 
EmptyStatement();} else if ( type_200 == _LOOKAHEAD || type_200 == _IGNORE_CASE || type_200 == _PARSER_BEGIN || type_200 == _PARSER_END || type_200 == _JAVACODE || type_200 == _TOKEN || type_200 == _SPECIAL_TOKEN || type_200 == _MORE || type_200 == _SKIP || type_200 == _TOKEN_MGR_DECLS || type_200 == _EOF || type_200 == BOOLEAN || type_200 == BYTE || type_200 == CHAR || type_200 == DOUBLE || type_200 == FALSE || type_200 == FLOAT || type_200 == INT || type_200 == LONG || type_200 == NEW || type_200 == NULL || type_200 == SHORT || type_200 == SUPER || type_200 == THIS || type_200 == TRUE || type_200 == VOID || type_200 == INTEGER_LITERAL || type_200 == FLOATING_POINT_LITERAL || type_200 == CHARACTER_LITERAL || type_200 == STRING_LITERAL || type_200 == IDENTIFIER || type_200 == LPAREN || type_200 == INCR || type_200 == DECR) { 
StatementExpression();
jj_consume_token(SEMICOLON);} else if ( type_200 == SWITCH) { 
SwitchStatement();} else if ( type_200 == IF) { 
IfStatement();} else if ( type_200 == WHILE) { 
WhileStatement();} else if ( type_200 == DO) { 
DoStatement();} else if ( type_200 == FOR) { 
ForStatement();} else if ( type_200 == BREAK) { 
BreakStatement();} else if ( type_200 == CONTINUE) { 
ContinueStatement();} else if ( type_200 == RETURN) { 
ReturnStatement();} else if ( type_200 == THROW) { 
ThrowStatement();} else if ( type_200 == SYNCHRONIZED) { 
SynchronizedStatement();} else if ( type_200 == TRY) { 
TryStatement();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
  }

  final public void AssertStatement()  {
 /*@bgen(jjtree) AssertStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(ASSERT);
    Expression();
    IElementType type_201 = getType();
    if ( type_201 == COLON) { 
  jj_consume_token(COLON);
  Expression();} else 
{
  ;
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTASSERTSTATEMENT); }
        }
      }
  }

  final public void LabeledStatement()  {
 /*@bgen(jjtree) LabeledStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLABELEDSTATEMENT); }
        }
      }
  }

  final public void Block()  {
 /*@bgen(jjtree) Block */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    label_202:
    while (true) {
      IElementType type_203 = getType();
      if ( type_203 == _LOOKAHEAD || type_203 == _IGNORE_CASE || type_203 == _PARSER_BEGIN || type_203 == _PARSER_END || type_203 == _JAVACODE || type_203 == _TOKEN || type_203 == _SPECIAL_TOKEN || type_203 == _MORE || type_203 == _SKIP || type_203 == _TOKEN_MGR_DECLS || type_203 == _EOF || type_203 == ABSTRACT || type_203 == ASSERT || type_203 == BOOLEAN || type_203 == BREAK || type_203 == BYTE || type_203 == CHAR || type_203 == CLASS || type_203 == CONTINUE || type_203 == DO || type_203 == DOUBLE || type_203 == FALSE || type_203 == FINAL || type_203 == FLOAT || type_203 == FOR || type_203 == IF || type_203 == INT || type_203 == INTERFACE || type_203 == LONG || type_203 == NATIVE || type_203 == NEW || type_203 == NULL || type_203 == PRIVATE || type_203 == PROTECTED || type_203 == PUBLIC || type_203 == RETURN || type_203 == SHORT || type_203 == STATIC || type_203 == STRICTFP || type_203 == SUPER || type_203 == SWITCH || type_203 == SYNCHRONIZED || type_203 == THIS || type_203 == THROW || type_203 == TRANSIENT || type_203 == TRUE || type_203 == TRY || type_203 == VOID || type_203 == VOLATILE || type_203 == WHILE || type_203 == INTEGER_LITERAL || type_203 == FLOATING_POINT_LITERAL || type_203 == CHARACTER_LITERAL || type_203 == STRING_LITERAL || type_203 == IDENTIFIER || type_203 == LPAREN || type_203 == LBRACE || type_203 == SEMICOLON || type_203 == INCR || type_203 == DECR || type_203 == AT) { 
;} else 
{
break label_202;
}
BlockStatement();
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBLOCK); }
        }
      }
  }

  final public void BlockStatement()  {
    if (jj_2_42(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      IElementType type_204 = getType();
      if ( type_204 == _LOOKAHEAD || type_204 == _IGNORE_CASE || type_204 == _PARSER_BEGIN || type_204 == _PARSER_END || type_204 == _JAVACODE || type_204 == _TOKEN || type_204 == _SPECIAL_TOKEN || type_204 == _MORE || type_204 == _SKIP || type_204 == _TOKEN_MGR_DECLS || type_204 == _EOF || type_204 == ASSERT || type_204 == BOOLEAN || type_204 == BREAK || type_204 == BYTE || type_204 == CHAR || type_204 == CONTINUE || type_204 == DO || type_204 == DOUBLE || type_204 == FALSE || type_204 == FLOAT || type_204 == FOR || type_204 == IF || type_204 == INT || type_204 == LONG || type_204 == NEW || type_204 == NULL || type_204 == RETURN || type_204 == SHORT || type_204 == SUPER || type_204 == SWITCH || type_204 == SYNCHRONIZED || type_204 == THIS || type_204 == THROW || type_204 == TRUE || type_204 == TRY || type_204 == VOID || type_204 == WHILE || type_204 == INTEGER_LITERAL || type_204 == FLOATING_POINT_LITERAL || type_204 == CHARACTER_LITERAL || type_204 == STRING_LITERAL || type_204 == IDENTIFIER || type_204 == LPAREN || type_204 == LBRACE || type_204 == SEMICOLON || type_204 == INCR || type_204 == DECR) { 
Statement();} else if ( type_204 == CLASS || type_204 == INTERFACE) { 
ClassOrInterfaceDeclaration();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
  }

  final public void LocalVariableDeclaration()  {
 /*@bgen(jjtree) LocalVariableDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    Modifiers();
    Type();
    VariableDeclarator();
    label_205:
    while (true) {
      IElementType type_206 = getType();
      if ( type_206 == COMMA) { 
    ;} else 
  {
    break label_205;
  }
  jj_consume_token(COMMA);
  VariableDeclarator();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTLOCALVARIABLEDECLARATION); }
        }
      }
  }

  final public void EmptyStatement()  {
 /*@bgen(jjtree) EmptyStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTEMPTYSTATEMENT); }
        }
      }
  }

  final public void StatementExpression()  {
 /*@bgen(jjtree) StatementExpression */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_209 = getType();
    if ( type_209 == INCR) { 
  PreIncrementExpression();} else if ( type_209 == DECR) { 
PreDecrementExpression();} else if ( type_209 == _LOOKAHEAD || type_209 == _IGNORE_CASE || type_209 == _PARSER_BEGIN || type_209 == _PARSER_END || type_209 == _JAVACODE || type_209 == _TOKEN || type_209 == _SPECIAL_TOKEN || type_209 == _MORE || type_209 == _SKIP || type_209 == _TOKEN_MGR_DECLS || type_209 == _EOF || type_209 == BOOLEAN || type_209 == BYTE || type_209 == CHAR || type_209 == DOUBLE || type_209 == FALSE || type_209 == FLOAT || type_209 == INT || type_209 == LONG || type_209 == NEW || type_209 == NULL || type_209 == SHORT || type_209 == SUPER || type_209 == THIS || type_209 == TRUE || type_209 == VOID || type_209 == INTEGER_LITERAL || type_209 == FLOATING_POINT_LITERAL || type_209 == CHARACTER_LITERAL || type_209 == STRING_LITERAL || type_209 == IDENTIFIER || type_209 == LPAREN) { 
PrimaryExpression();
IElementType type_208 = getType();
if ( type_208 == ASSIGN || type_208 == GT || type_208 == LT || type_208 == INCR || type_208 == DECR || type_208 == PLUSASSIGN || type_208 == MINUSASSIGN || type_208 == STARASSIGN || type_208 == SLASHASSIGN || type_208 == ANDASSIGN || type_208 == ORASSIGN || type_208 == XORASSIGN || type_208 == REMASSIGN) { 
IElementType type_207 = getType();
if ( type_207 == INCR) { 
jj_consume_token(INCR);} else if ( type_207 == DECR) { 
jj_consume_token(DECR);} else if ( type_207 == ASSIGN || type_207 == GT || type_207 == LT || type_207 == PLUSASSIGN || type_207 == MINUSASSIGN || type_207 == STARASSIGN || type_207 == SLASHASSIGN || type_207 == ANDASSIGN || type_207 == ORASSIGN || type_207 == XORASSIGN || type_207 == REMASSIGN) { 
AssignmentOperator();
Expression();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSION); }
        }
      }
  }

  final public void SwitchStatement()  {
 /*@bgen(jjtree) SwitchStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_210:
    while (true) {
      IElementType type_211 = getType();
      if ( type_211 == CASE || type_211 == _DEFAULT) { 
  ;} else 
{
  break label_210;
}
SwitchLabel();
label_212:
while (true) {
  IElementType type_213 = getType();
  if ( type_213 == _LOOKAHEAD || type_213 == _IGNORE_CASE || type_213 == _PARSER_BEGIN || type_213 == _PARSER_END || type_213 == _JAVACODE || type_213 == _TOKEN || type_213 == _SPECIAL_TOKEN || type_213 == _MORE || type_213 == _SKIP || type_213 == _TOKEN_MGR_DECLS || type_213 == _EOF || type_213 == ABSTRACT || type_213 == ASSERT || type_213 == BOOLEAN || type_213 == BREAK || type_213 == BYTE || type_213 == CHAR || type_213 == CLASS || type_213 == CONTINUE || type_213 == DO || type_213 == DOUBLE || type_213 == FALSE || type_213 == FINAL || type_213 == FLOAT || type_213 == FOR || type_213 == IF || type_213 == INT || type_213 == INTERFACE || type_213 == LONG || type_213 == NATIVE || type_213 == NEW || type_213 == NULL || type_213 == PRIVATE || type_213 == PROTECTED || type_213 == PUBLIC || type_213 == RETURN || type_213 == SHORT || type_213 == STATIC || type_213 == STRICTFP || type_213 == SUPER || type_213 == SWITCH || type_213 == SYNCHRONIZED || type_213 == THIS || type_213 == THROW || type_213 == TRANSIENT || type_213 == TRUE || type_213 == TRY || type_213 == VOID || type_213 == VOLATILE || type_213 == WHILE || type_213 == INTEGER_LITERAL || type_213 == FLOATING_POINT_LITERAL || type_213 == CHARACTER_LITERAL || type_213 == STRING_LITERAL || type_213 == IDENTIFIER || type_213 == LPAREN || type_213 == LBRACE || type_213 == SEMICOLON || type_213 == INCR || type_213 == DECR || type_213 == AT) { 
;} else 
{
break label_212;
}
BlockStatement();
}
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHSTATEMENT); }
        }
      }
  }

  final public void SwitchLabel()  {
 /*@bgen(jjtree) SwitchLabel */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_214 = getType();
    if ( type_214 == CASE) { 
  jj_consume_token(CASE);
  Expression();
  jj_consume_token(COLON);} else if ( type_214 == _DEFAULT) { 
jj_consume_token(_DEFAULT);
jj_consume_token(COLON);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSWITCHLABEL); }
        }
      }
  }

  final public void IfStatement()  {
 /*@bgen(jjtree) IfStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    IElementType type_215 = getType();
    if ( type_215 == ELSE) { 
  jj_consume_token(ELSE);
  Statement();} else 
{
  ;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTIFSTATEMENT); }
        }
      }
  }

  final public void WhileStatement()  {
 /*@bgen(jjtree) WhileStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTWHILESTATEMENT); }
        }
      }
  }

  final public void DoStatement()  {
 /*@bgen(jjtree) DoStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTDOSTATEMENT); }
        }
      }
  }

  final public void ForStatement()  {
 /*@bgen(jjtree) ForStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_43(2147483647)) {
      Modifiers();
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Expression();
    } else {
      IElementType type_219 = getType();
      if ( type_219 == _LOOKAHEAD || type_219 == _IGNORE_CASE || type_219 == _PARSER_BEGIN || type_219 == _PARSER_END || type_219 == _JAVACODE || type_219 == _TOKEN || type_219 == _SPECIAL_TOKEN || type_219 == _MORE || type_219 == _SKIP || type_219 == _TOKEN_MGR_DECLS || type_219 == _EOF || type_219 == ABSTRACT || type_219 == BOOLEAN || type_219 == BYTE || type_219 == CHAR || type_219 == DOUBLE || type_219 == FALSE || type_219 == FINAL || type_219 == FLOAT || type_219 == INT || type_219 == LONG || type_219 == NATIVE || type_219 == NEW || type_219 == NULL || type_219 == PRIVATE || type_219 == PROTECTED || type_219 == PUBLIC || type_219 == SHORT || type_219 == STATIC || type_219 == STRICTFP || type_219 == SUPER || type_219 == SYNCHRONIZED || type_219 == THIS || type_219 == TRANSIENT || type_219 == TRUE || type_219 == VOID || type_219 == VOLATILE || type_219 == INTEGER_LITERAL || type_219 == FLOATING_POINT_LITERAL || type_219 == CHARACTER_LITERAL || type_219 == STRING_LITERAL || type_219 == IDENTIFIER || type_219 == LPAREN || type_219 == SEMICOLON || type_219 == INCR || type_219 == DECR || type_219 == AT) { 
IElementType type_216 = getType();
if ( type_216 == _LOOKAHEAD || type_216 == _IGNORE_CASE || type_216 == _PARSER_BEGIN || type_216 == _PARSER_END || type_216 == _JAVACODE || type_216 == _TOKEN || type_216 == _SPECIAL_TOKEN || type_216 == _MORE || type_216 == _SKIP || type_216 == _TOKEN_MGR_DECLS || type_216 == _EOF || type_216 == ABSTRACT || type_216 == BOOLEAN || type_216 == BYTE || type_216 == CHAR || type_216 == DOUBLE || type_216 == FALSE || type_216 == FINAL || type_216 == FLOAT || type_216 == INT || type_216 == LONG || type_216 == NATIVE || type_216 == NEW || type_216 == NULL || type_216 == PRIVATE || type_216 == PROTECTED || type_216 == PUBLIC || type_216 == SHORT || type_216 == STATIC || type_216 == STRICTFP || type_216 == SUPER || type_216 == SYNCHRONIZED || type_216 == THIS || type_216 == TRANSIENT || type_216 == TRUE || type_216 == VOID || type_216 == VOLATILE || type_216 == INTEGER_LITERAL || type_216 == FLOATING_POINT_LITERAL || type_216 == CHARACTER_LITERAL || type_216 == STRING_LITERAL || type_216 == IDENTIFIER || type_216 == LPAREN || type_216 == INCR || type_216 == DECR || type_216 == AT) { 
ForInit();} else 
{
;
}
jj_consume_token(SEMICOLON);
IElementType type_217 = getType();
if ( type_217 == _LOOKAHEAD || type_217 == _IGNORE_CASE || type_217 == _PARSER_BEGIN || type_217 == _PARSER_END || type_217 == _JAVACODE || type_217 == _TOKEN || type_217 == _SPECIAL_TOKEN || type_217 == _MORE || type_217 == _SKIP || type_217 == _TOKEN_MGR_DECLS || type_217 == _EOF || type_217 == BOOLEAN || type_217 == BYTE || type_217 == CHAR || type_217 == DOUBLE || type_217 == FALSE || type_217 == FLOAT || type_217 == INT || type_217 == LONG || type_217 == NEW || type_217 == NULL || type_217 == SHORT || type_217 == SUPER || type_217 == THIS || type_217 == TRUE || type_217 == VOID || type_217 == INTEGER_LITERAL || type_217 == FLOATING_POINT_LITERAL || type_217 == CHARACTER_LITERAL || type_217 == STRING_LITERAL || type_217 == IDENTIFIER || type_217 == LPAREN || type_217 == BANG || type_217 == TILDE || type_217 == INCR || type_217 == DECR || type_217 == PLUS || type_217 == MINUS) { 
Expression();} else 
{
;
}
jj_consume_token(SEMICOLON);
IElementType type_218 = getType();
if ( type_218 == _LOOKAHEAD || type_218 == _IGNORE_CASE || type_218 == _PARSER_BEGIN || type_218 == _PARSER_END || type_218 == _JAVACODE || type_218 == _TOKEN || type_218 == _SPECIAL_TOKEN || type_218 == _MORE || type_218 == _SKIP || type_218 == _TOKEN_MGR_DECLS || type_218 == _EOF || type_218 == BOOLEAN || type_218 == BYTE || type_218 == CHAR || type_218 == DOUBLE || type_218 == FALSE || type_218 == FLOAT || type_218 == INT || type_218 == LONG || type_218 == NEW || type_218 == NULL || type_218 == SHORT || type_218 == SUPER || type_218 == THIS || type_218 == TRUE || type_218 == VOID || type_218 == INTEGER_LITERAL || type_218 == FLOATING_POINT_LITERAL || type_218 == CHARACTER_LITERAL || type_218 == STRING_LITERAL || type_218 == IDENTIFIER || type_218 == LPAREN || type_218 == INCR || type_218 == DECR) { 
ForUpdate();} else 
{
;
}} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
jj_consume_token(RPAREN);
Statement();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORSTATEMENT); }
        }
      }
  }

  final public void ForInit()  {
 /*@bgen(jjtree) ForInit */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_44(2147483647)) {
      LocalVariableDeclaration();
    } else {
      IElementType type_220 = getType();
      if ( type_220 == _LOOKAHEAD || type_220 == _IGNORE_CASE || type_220 == _PARSER_BEGIN || type_220 == _PARSER_END || type_220 == _JAVACODE || type_220 == _TOKEN || type_220 == _SPECIAL_TOKEN || type_220 == _MORE || type_220 == _SKIP || type_220 == _TOKEN_MGR_DECLS || type_220 == _EOF || type_220 == BOOLEAN || type_220 == BYTE || type_220 == CHAR || type_220 == DOUBLE || type_220 == FALSE || type_220 == FLOAT || type_220 == INT || type_220 == LONG || type_220 == NEW || type_220 == NULL || type_220 == SHORT || type_220 == SUPER || type_220 == THIS || type_220 == TRUE || type_220 == VOID || type_220 == INTEGER_LITERAL || type_220 == FLOATING_POINT_LITERAL || type_220 == CHARACTER_LITERAL || type_220 == STRING_LITERAL || type_220 == IDENTIFIER || type_220 == LPAREN || type_220 == INCR || type_220 == DECR) { 
StatementExpressionList();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORINIT); }
        }
      }
  }

  final public void StatementExpressionList()  {
 /*@bgen(jjtree) StatementExpressionList */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    StatementExpression();
    label_221:
    while (true) {
      IElementType type_222 = getType();
      if ( type_222 == COMMA) { 
    ;} else 
  {
    break label_221;
  }
  jj_consume_token(COMMA);
  StatementExpression();
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSTATEMENTEXPRESSIONLIST); }
        }
      }
  }

  final public void ForUpdate()  {
 /*@bgen(jjtree) ForUpdate */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    StatementExpressionList();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTFORUPDATE); }
        }
      }
  }

  final public void BreakStatement()  {
 /*@bgen(jjtree) BreakStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(BREAK);
    IElementType type_223 = getType();
    if ( type_223 == IDENTIFIER) { 
  jj_consume_token(IDENTIFIER);} else 
{
  ;
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTBREAKSTATEMENT); }
        }
      }
  }

  final public void ContinueStatement()  {
 /*@bgen(jjtree) ContinueStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(CONTINUE);
    IElementType type_224 = getType();
    if ( type_224 == IDENTIFIER) { 
  jj_consume_token(IDENTIFIER);} else 
{
  ;
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTCONTINUESTATEMENT); }
        }
      }
  }

  final public void ReturnStatement()  {
 /*@bgen(jjtree) ReturnStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(RETURN);
    IElementType type_225 = getType();
    if ( type_225 == _LOOKAHEAD || type_225 == _IGNORE_CASE || type_225 == _PARSER_BEGIN || type_225 == _PARSER_END || type_225 == _JAVACODE || type_225 == _TOKEN || type_225 == _SPECIAL_TOKEN || type_225 == _MORE || type_225 == _SKIP || type_225 == _TOKEN_MGR_DECLS || type_225 == _EOF || type_225 == BOOLEAN || type_225 == BYTE || type_225 == CHAR || type_225 == DOUBLE || type_225 == FALSE || type_225 == FLOAT || type_225 == INT || type_225 == LONG || type_225 == NEW || type_225 == NULL || type_225 == SHORT || type_225 == SUPER || type_225 == THIS || type_225 == TRUE || type_225 == VOID || type_225 == INTEGER_LITERAL || type_225 == FLOATING_POINT_LITERAL || type_225 == CHARACTER_LITERAL || type_225 == STRING_LITERAL || type_225 == IDENTIFIER || type_225 == LPAREN || type_225 == BANG || type_225 == TILDE || type_225 == INCR || type_225 == DECR || type_225 == PLUS || type_225 == MINUS) { 
Expression();} else 
{
;
}
jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRETURNSTATEMENT); }
        }
      }
  }

  final public void ThrowStatement()  {
 /*@bgen(jjtree) ThrowStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTHROWSTATEMENT); }
        }
      }
  }

  final public void SynchronizedStatement()  {
 /*@bgen(jjtree) SynchronizedStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSYNCHRONIZEDSTATEMENT); }
        }
      }
  }

  final public void TryStatement()  {
 /*@bgen(jjtree) TryStatement */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(TRY);
    Block();
    label_226:
    while (true) {
      IElementType type_227 = getType();
      if ( type_227 == CATCH) { 
    ;} else 
  {
    break label_226;
  }
  jj_consume_token(CATCH);
  jj_consume_token(LPAREN);
  FormalParameter();
  jj_consume_token(RPAREN);
  Block();
}
IElementType type_228 = getType();
if ( type_228 == FINALLY) { 
jj_consume_token(FINALLY);
Block();} else 
{
;
}
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTTRYSTATEMENT); }
        }
      }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT()  {
 /*@bgen(jjtree) RUNSIGNEDSHIFT */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRUNSIGNEDSHIFT); }
        }
      }
  }

  final public void RSIGNEDSHIFT()  {
 /*@bgen(jjtree) RSIGNEDSHIFT */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(GT);
    jj_consume_token(GT);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTRSIGNEDSHIFT); }
        }
      }
  }

/* Annotation syntax follows. */
  final public void Annotation()  {
 /*@bgen(jjtree) Annotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    if (jj_2_45(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_46(2147483647)) {
      SingleMemberAnnotation();
    } else {
      IElementType type_229 = getType();
      if ( type_229 == AT) { 
    MarkerAnnotation();} else 
  {
    if (!builder.eof()) {
      PsiBuilder.Marker errorMarker = builder.mark();
      String text = builder.getTokenText();
      builder.advanceLexer();
      errorMarker.error("Unexpected token " + text);
    } else {
      builder.error("Unexpected end of file");
    }
    
  }
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTANNOTATION); }
         }
       }
  }

  final public void NormalAnnotation()  {
 /*@bgen(jjtree) NormalAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    IElementType type_230 = getType();
    if ( type_230 == IDENTIFIER) { 
  MemberValuePairs();} else 
{
  ;
}
jj_consume_token(RPAREN);
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTNORMALANNOTATION); }
         }
       }
  }

  final public void MarkerAnnotation()  {
 /*@bgen(jjtree) MarkerAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(AT);
    Name();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMARKERANNOTATION); }
        }
      }
  }

  final public void SingleMemberAnnotation()  {
 /*@bgen(jjtree) SingleMemberAnnotation */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTSINGLEMEMBERANNOTATION); }
        }
      }
  }

  final public void MemberValuePairs()  {
 /*@bgen(jjtree) MemberValuePairs */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    MemberValuePair();
    label_231:
    while (true) {
      IElementType type_232 = getType();
      if ( type_232 == COMMA) { 
    ;} else 
  {
    break label_231;
  }
  jj_consume_token(COMMA);
  MemberValuePair();
}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTMEMBERVALUEPAIRS); }
         }
       }
  }

  final public void MemberValuePair()  {
 /*@bgen(jjtree) MemberValuePair */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
        {
          if (jjtc000) {
            jjtc000 = false;
            {jjtn000.done(JJTMEMBERVALUEPAIR); }
          }
        }
  }

  final public void MemberValue()  {
 /*@bgen(jjtree) MemberValue */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_233 = getType();
    if ( type_233 == AT) { 
  Annotation();} else if ( type_233 == LBRACE) { 
MemberValueArrayInitializer();} else if ( type_233 == _LOOKAHEAD || type_233 == _IGNORE_CASE || type_233 == _PARSER_BEGIN || type_233 == _PARSER_END || type_233 == _JAVACODE || type_233 == _TOKEN || type_233 == _SPECIAL_TOKEN || type_233 == _MORE || type_233 == _SKIP || type_233 == _TOKEN_MGR_DECLS || type_233 == _EOF || type_233 == BOOLEAN || type_233 == BYTE || type_233 == CHAR || type_233 == DOUBLE || type_233 == FALSE || type_233 == FLOAT || type_233 == INT || type_233 == LONG || type_233 == NEW || type_233 == NULL || type_233 == SHORT || type_233 == SUPER || type_233 == THIS || type_233 == TRUE || type_233 == VOID || type_233 == INTEGER_LITERAL || type_233 == FLOATING_POINT_LITERAL || type_233 == CHARACTER_LITERAL || type_233 == STRING_LITERAL || type_233 == IDENTIFIER || type_233 == LPAREN || type_233 == BANG || type_233 == TILDE || type_233 == INCR || type_233 == DECR || type_233 == PLUS || type_233 == MINUS) { 
ConditionalExpression();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
       {
         if (jjtc000) {
           jjtc000 = false;
           {jjtn000.done(JJTMEMBERVALUE); }
         }
       }
  }

  final public void MemberValueArrayInitializer()  {
 /*@bgen(jjtree) MemberValueArrayInitializer */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    MemberValue();
    label_234:
    while (true) {
      if (jj_2_47(2)) {
        ;
      } else {
        break label_234;
      }
      jj_consume_token(COMMA);
      MemberValue();
    }
    IElementType type_235 = getType();
    if ( type_235 == COMMA) { 
  jj_consume_token(COMMA);} else 
{
  ;
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTMEMBERVALUEARRAYINITIALIZER); }
        }
      }
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration()  {
 /*@bgen(jjtree) AnnotationTypeDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANNOTATIONTYPEDECLARATION); }
        }
      }
  }

  final public void AnnotationTypeBody()  {
 /*@bgen(jjtree) AnnotationTypeBody */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(LBRACE);
    label_236:
    while (true) {
      IElementType type_237 = getType();
      if ( type_237 == ABSTRACT || type_237 == BOOLEAN || type_237 == BYTE || type_237 == CHAR || type_237 == CLASS || type_237 == DOUBLE || type_237 == ENUM || type_237 == FINAL || type_237 == FLOAT || type_237 == INT || type_237 == INTERFACE || type_237 == LONG || type_237 == NATIVE || type_237 == PRIVATE || type_237 == PROTECTED || type_237 == PUBLIC || type_237 == SHORT || type_237 == STATIC || type_237 == STRICTFP || type_237 == SYNCHRONIZED || type_237 == TRANSIENT || type_237 == VOLATILE || type_237 == IDENTIFIER || type_237 == SEMICOLON || type_237 == AT) { 
;} else 
{
break label_236;
}
AnnotationTypeMemberDeclaration();
}
jj_consume_token(RBRACE);
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTANNOTATIONTYPEBODY); }
        }
      }
  }

  final public void AnnotationTypeMemberDeclaration()  {
 /*@bgen(jjtree) AnnotationTypeMemberDeclaration */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    IElementType type_240 = getType();
    if ( type_240 == ABSTRACT || type_240 == BOOLEAN || type_240 == BYTE || type_240 == CHAR || type_240 == CLASS || type_240 == DOUBLE || type_240 == ENUM || type_240 == FINAL || type_240 == FLOAT || type_240 == INT || type_240 == INTERFACE || type_240 == LONG || type_240 == NATIVE || type_240 == PRIVATE || type_240 == PROTECTED || type_240 == PUBLIC || type_240 == SHORT || type_240 == STATIC || type_240 == STRICTFP || type_240 == SYNCHRONIZED || type_240 == TRANSIENT || type_240 == VOLATILE || type_240 == IDENTIFIER || type_240 == AT) { 
Modifiers();
if (jj_2_48(2147483647)) {
Type();
jj_consume_token(IDENTIFIER);
jj_consume_token(LPAREN);
jj_consume_token(RPAREN);
IElementType type_238 = getType();
if ( type_238 == _DEFAULT) { 
DefaultValue();} else 
{
;
}
jj_consume_token(SEMICOLON);
} else {
IElementType type_239 = getType();
if ( type_239 == CLASS || type_239 == INTERFACE) { 
ClassOrInterfaceDeclaration();} else if ( type_239 == ENUM) { 
EnumDeclaration();} else if ( type_239 == AT) { 
AnnotationTypeDeclaration();} else if ( type_239 == BOOLEAN || type_239 == BYTE || type_239 == CHAR || type_239 == DOUBLE || type_239 == FLOAT || type_239 == INT || type_239 == LONG || type_239 == SHORT || type_239 == IDENTIFIER) { 
FieldDeclaration();} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
}} else if ( type_240 == SEMICOLON) { 
jj_consume_token(SEMICOLON);} else 
{
if (!builder.eof()) {
  PsiBuilder.Marker errorMarker = builder.mark();
  String text = builder.getTokenText();
  builder.advanceLexer();
  errorMarker.error("Unexpected token " + text);
} else {
  builder.error("Unexpected end of file");
}

}
     {
       if (jjtc000) {
         jjtc000 = false;
         {jjtn000.done(JJTANNOTATIONTYPEMEMBERDECLARATION); }
       }
     }
  }

  final public void DefaultValue()  {
 /*@bgen(jjtree) DefaultValue */
  boolean jjtc000 = true;
  PsiBuilder.Marker jjtn000 = builder.mark();
    jj_consume_token(_DEFAULT);
    MemberValue();
      {
        if (jjtc000) {
          jjtc000 = false;
          {jjtn000.done(JJTDEFAULTVALUE); }
        }
      }
  }

  private boolean jj_2_1(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_1(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_2(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_2(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_3(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_3(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_4(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_4(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_5(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_5(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_6(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_6(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_7(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_7(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_8(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_8(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_9(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_9(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_10(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_10(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_11(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_11(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_12(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_12(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_13(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_13(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_14(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_14(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_15(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_15(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_16(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_16(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_17(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_17(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_18(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_18(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_19(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_19(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_20(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_20(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_21(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_21(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_22(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_22(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_23(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_23(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_24(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_24(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_25(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_25(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_26(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_26(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_27(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_27(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_28(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_28(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_29(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_29(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_30(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_30(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_31(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_31(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_32(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_32(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_33(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_33(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_34(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_34(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_35(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_35(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_36(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_36(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_37(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_37(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_38(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_38(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_39(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_39(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_40(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_40(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_41(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_41(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_42(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_42(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_43(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_43(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_44(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_44(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_45(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_45(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_46(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_46(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_47(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_47(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_2_48(int xla) {
    init(xla);
    PsiBuilder.Marker jj_scanpos = builder.mark();
    try { boolean result =  !jj_3_48(); return result;}
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_scanpos.rollbackTo(); }
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_276()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_47()) { rollbackTo(jj_scanpos); break; }
    }
    {
      if (tokens.get(currentIndex) == (COMMA) )
        jj_on_la1();
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_374()) return true;
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_477()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_304()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_305()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_306()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_455() {
    if (jj_3R_467()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_468()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_252()) { rollbackTo(jj_scanpos); break; }
    }
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (COMMA) ) {
      if (tokens.get(currentIndex) != (ASSIGN) ) {
      if (tokens.get(currentIndex) != (SEMICOLON) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_251()) return true;
    if (jj_3R_455()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_456()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_10() {
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_250()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_374()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_375()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_3R_444()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_443()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_276()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_3R_442()) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_480() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(LPAREN)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_343()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_273()) return true;
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_435()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_436()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_437()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_438()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_439()) {return true;
      }
      }
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_274()) return true;
    if (jj_scan_token(LPAREN)) return true;
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_275()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (RPAREN) ) {return true;
      } else { jj_on_la1(); }
      }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_3R_427()) return true;
    return false;
  }

  private boolean jj_3R_427() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_12()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_431()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (SEMICOLON) ) {return true;
      } else { jj_on_la1(); }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_332()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_344()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_418()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_331()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_314()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_315()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_316()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_322()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_361()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_334()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_317()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_318()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_489() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_474()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_3R_427()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_273()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_479()) rollbackTo(jj_scanpos);
    }
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_480()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_283()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_488()) { rollbackTo(jj_scanpos); break; }
    }
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_489()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_473()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_463() {
    if (jj_3R_249()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_9()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_scan_token(LBRACE)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_463()) rollbackTo(jj_scanpos);
    }
    {
      if (tokens.get(currentIndex) == (COMMA) )
        jj_on_la1();
    }
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_464()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_462()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_448()) rollbackTo(jj_scanpos);
    }
    if (jj_3R_449()) return true;
    return false;
  }

  private boolean jj_3R_495() {
    if (jj_3R_501()) return true;
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_505() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_scan_token(RETURN)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_487()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_322()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_472()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_471() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(CONTINUE)) return true;
    {
      if (tokens.get(currentIndex) == (IDENTIFIER) )
        jj_on_la1();
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_322()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_471()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_scan_token(BREAK)) return true;
    {
      if (tokens.get(currentIndex) == (IDENTIFIER) )
        jj_on_la1();
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_462()) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_501() {
    if (jj_3R_504()) return true;
    return false;
  }

  private boolean jj_3R_494() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (CLASS) ) {
      if (tokens.get(currentIndex) != (INTERFACE) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_445()) rollbackTo(jj_scanpos);
    }
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_446()) rollbackTo(jj_scanpos);
    }
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_447()) rollbackTo(jj_scanpos);
    }
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_504() {
    if (jj_3R_401()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_505()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_503() {
    if (jj_3R_504()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_502() {
    if (jj_3R_362()) return true;
    return false;
  }

  private boolean jj_3R_500() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_502()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_503()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_493() {
    if (jj_3R_500()) return true;
    return false;
  }

  private boolean jj_3R_486() {
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_493()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(SEMICOLON)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_494()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(SEMICOLON)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_495()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3_8() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (PUBLIC) ) {
      if (tokens.get(currentIndex) != (STATIC) ) {
      if (tokens.get(currentIndex) != (PROTECTED) ) {
      if (tokens.get(currentIndex) != (PRIVATE) ) {
      if (tokens.get(currentIndex) != (FINAL) ) {
      if (tokens.get(currentIndex) != (ABSTRACT) ) {
      if (tokens.get(currentIndex) != (SYNCHRONIZED) ) {
      if (tokens.get(currentIndex) != (NATIVE) ) {
      if (tokens.get(currentIndex) != (TRANSIENT) ) {
      if (tokens.get(currentIndex) != (VOLATILE) ) {
      if (tokens.get(currentIndex) != (STRICTFP) ) {
      if (jj_3R_248()) {return true;
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_485()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_486()) {return true;
      }
      }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_8()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_363()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3_7() {
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_247()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_363()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_484()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_499() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_498() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_491() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_498()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_499()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_483() {
    if (jj_3R_491()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_492()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_483()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_497() {
    if (jj_3R_260()) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_490() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (INCR) ) {
      if (tokens.get(currentIndex) != (DECR) ) {
      if (jj_3R_497()) {return true;
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_259() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (IDENTIFIER) ) {
      if (tokens.get(currentIndex) != (_LOOKAHEAD) ) {
      if (tokens.get(currentIndex) != (_IGNORE_CASE) ) {
      if (tokens.get(currentIndex) != (_PARSER_BEGIN) ) {
      if (tokens.get(currentIndex) != (_PARSER_END) ) {
      if (tokens.get(currentIndex) != (_JAVACODE) ) {
      if (tokens.get(currentIndex) != (_TOKEN) ) {
      if (tokens.get(currentIndex) != (_SPECIAL_TOKEN) ) {
      if (tokens.get(currentIndex) != (_MORE) ) {
      if (tokens.get(currentIndex) != (_SKIP) ) {
      if (tokens.get(currentIndex) != (_TOKEN_MGR_DECLS) ) {
      if (tokens.get(currentIndex) != (_EOF) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_241()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_490()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_421() {
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_420()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_421()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_422()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    if (jj_3R_455()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_481()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_345()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_346()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_347()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_362()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_319()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_261()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_482()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_398()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (IDENTIFIER) ) {
      if (tokens.get(currentIndex) != (_OPTIONS) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_412()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_411()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_scan_token(STRING_LITERAL) ) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_410()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_409()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_408()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    {
      if (tokens.get(currentIndex) == (TILDE) )
        jj_on_la1();
    }
    if (jj_scan_token(LBRACKET)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_373()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_407()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_3R_404()) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_403()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_241()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_3R_401()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_400()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (STRING_LITERAL) ) {
        jj_scanpos = currentIndex;
      if (jj_3R_340()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_341()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_342()) {return true;
      }
      }
      }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_399()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_313()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_313()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_41()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_376()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_377()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_378()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_379()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_380()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_381()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_382()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_383()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_384()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_385()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_386()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_387()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_388()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_389()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_390()) {return true;
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_278()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_279()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    {
      if (tokens.get(currentIndex) == (SHARP) )
        jj_on_la1();
    }
    if (jj_3R_242()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_396()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_396()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3_38()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_38()) { rollbackTo(jj_scanpos); break; }
    }
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_39()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_355() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_40()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_370()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_242()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LT)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_245()) rollbackTo(jj_scanpos);
    }
    if (jj_3R_246()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_256()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_371()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_355()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_241()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_243()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (STRING_LITERAL) ) {
      if (tokens.get(currentIndex) != (LT) ) {
      if (jj_3R_244()) {return true;
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      }
    }
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_322()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_356()) rollbackTo(jj_scanpos);
    }
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_357()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_358()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_270() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_37()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_303()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_267()) return true;
    if (jj_3R_355()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_261()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_336()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(LPAREN)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_288()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_353() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (TRUE) ) {
      if (tokens.get(currentIndex) != (FALSE) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (INTEGER_LITERAL) ) {
      if (tokens.get(currentIndex) != (FLOATING_POINT_LITERAL) ) {
      if (tokens.get(currentIndex) != (CHARACTER_LITERAL) ) {
      if (tokens.get(currentIndex) != (STRING_LITERAL) ) {
        jj_scanpos = currentIndex;
      if (jj_3R_339()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (NULL) ) {return true;
      } else { jj_on_la1(); }
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_269()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_34()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3_35()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3_36()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_299()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_300()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_301()) {return true;
      }
      }
      }
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_269()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_307()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (THIS) ) {
        jj_scanpos = currentIndex;
      if (jj_3R_308()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_309()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_310()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_311()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_312()) {return true;
      }
      }
      }
      }
      }
      } else { jj_on_la1(); }
      }
    }
    return false;
  }

  private boolean jj_3R_496() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (INCR) ) {
      if (tokens.get(currentIndex) != (DECR) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_258()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_277()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_32()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_368()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_424()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_425()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_3R_241()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_496()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(RPAREN)) return true;
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (TILDE) ) {
      if (tokens.get(currentIndex) != (BANG) ) {
      if (tokens.get(currentIndex) != (LPAREN) ) {
      if (tokens.get(currentIndex) != (IDENTIFIER) ) {
      if (tokens.get(currentIndex) != (THIS) ) {
      if (tokens.get(currentIndex) != (SUPER) ) {
      if (tokens.get(currentIndex) != (NEW) ) {
      if (jj_3R_327()) {return true;
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_251()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_29()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_297()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_298()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_415()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_414()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_392()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_393()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_394()) {return true;
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_392() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (TILDE) ) {
      if (tokens.get(currentIndex) != (BANG) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_470() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (PLUS) ) {
      if (tokens.get(currentIndex) != (MINUS) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_478() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (STAR) ) {
      if (tokens.get(currentIndex) != (SLASH) ) {
      if (tokens.get(currentIndex) != (REM) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_368()) return true;
    return false;
  }

  private boolean jj_3_26() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_263()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3_27()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_264()) {return true;
      }
      }
      }
    }
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_349()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_350()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_351()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_352()) {return true;
      }
      }
      }
      }
    }
    return false;
  }

  private boolean jj_3R_349() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (PLUS) ) {
      if (tokens.get(currentIndex) != (MINUS) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3_25() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (LT) ) {
      if (tokens.get(currentIndex) != (GT) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    {
      if (tokens.get(currentIndex) == (ASSIGN) )
        jj_on_la1();
    }
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_338()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_478()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_434() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (EQ) ) {
      if (tokens.get(currentIndex) != (NE) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    if (jj_3R_423()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_326()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_470()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_295()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_26()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_413()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    {
      if (tokens.get(currentIndex) == (GT) )
        jj_on_la1();
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_262()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_25()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_365()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_3R_429()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_440()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_423()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_434()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_413()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_430()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_261()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_391()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_426()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_365()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_416()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_260()) return true;
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_348()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_395()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_337()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_369()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_325()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_354()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_260() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (ASSIGN) ) {
      if (tokens.get(currentIndex) != (STARASSIGN) ) {
      if (tokens.get(currentIndex) != (SLASHASSIGN) ) {
      if (tokens.get(currentIndex) != (REMASSIGN) ) {
      if (tokens.get(currentIndex) != (PLUSASSIGN) ) {
      if (tokens.get(currentIndex) != (MINUSASSIGN) ) {
        jj_scanpos = currentIndex;
      if (jj_3R_292()) {
        rollbackTo(jj_scanpos);
        jj_scanpos = currentIndex;
      if (jj_3R_293()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (ANDASSIGN) ) {
      if (tokens.get(currentIndex) != (XORASSIGN) ) {
      if (tokens.get(currentIndex) != (ORASSIGN) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      }
      }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_294()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3_24()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_3R_274()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_476()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_259()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_23()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (VOID) ) {
      if (jj_3R_302()) {return true;
      }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    {
      int jj_scanpos;
      if (tokens.get(currentIndex) != (BOOLEAN) ) {
      if (tokens.get(currentIndex) != (CHAR) ) {
      if (tokens.get(currentIndex) != (BYTE) ) {
      if (tokens.get(currentIndex) != (SHORT) ) {
      if (tokens.get(currentIndex) != (INT) ) {
      if (tokens.get(currentIndex) != (LONG) ) {
      if (tokens.get(currentIndex) != (FLOAT) ) {
      if (tokens.get(currentIndex) != (DOUBLE) ) {return true;
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
      } else { jj_on_la1(); }
    }
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_3R_428()) return true;
    return false;
  }

  private boolean jj_3R_428() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_432()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_433()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(HOOK)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_419()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_323()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_324()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_291()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_372()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3_22()) rollbackTo(jj_scanpos);
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(IDENTIFIER)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3_20()) rollbackTo(jj_scanpos);
    }
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_21()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_322()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_19()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_267()) return true;
    if (jj_3_18()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_18()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_257() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_289()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_290()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_452() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3_17()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_282()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_256()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    {
      if (tokens.get(currentIndex) == (STATIC) )
        jj_on_la1();
    }
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_241()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    {
      int jj_scanpos = currentIndex;
      if (jj_3_15()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_256()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_475() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_474()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_256()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_286()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_287()) {return true;
      }
      }
    }
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_442() {
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_450()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_451()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_452()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(LBRACE)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_453()) rollbackTo(jj_scanpos);
    }
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_454()) { rollbackTo(jj_scanpos); break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_474() {
    if (jj_3R_273()) return true;
    if (jj_3R_251()) return true;
    {
      if (tokens.get(currentIndex) == (ELLIPSIS) )
        jj_on_la1();
    }
    if (jj_3R_467()) return true;
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_3R_474()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_475()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_459() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_scan_token(LPAREN)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_465()) rollbackTo(jj_scanpos);
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_251()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_451()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3R_469()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_457()) rollbackTo(jj_scanpos);
    }
    if (jj_3R_269()) return true;
    if (jj_3R_458()) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_459()) rollbackTo(jj_scanpos);
    }
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_460()) {
        rollbackTo(jj_scanpos);
      if (tokens.get(currentIndex) != (SEMICOLON) ) {return true;
      } else { jj_on_la1(); }
      }
    }
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_3R_254()) return true;
    while (true) {
      int jj_scanpos = currentIndex;
      if (jj_3_13()) { rollbackTo(jj_scanpos); break; }
    }
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(LBRACE)) return true;
    {
      int jj_scanpos = currentIndex;
      if (jj_3R_417()) rollbackTo(jj_scanpos);
    }
    {
      if (tokens.get(currentIndex) == (COMMA) )
        jj_on_la1();
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    {
      int jj_scanpos;
        jj_scanpos = currentIndex;
      if (jj_3R_284()) {
        rollbackTo(jj_scanpos);
      if (jj_3R_285()) {return true;
      }
      }
    }
    return false;
  }

  private final PsiBuilder builder;
  public JavaCC(PsiBuilder builder) {
    this.builder = builder;
  }
  private int jj_la;
  private ArrayList<IElementType> tokens = new ArrayList<IElementType>();
  private int currentIndex = 0;
  private int maxIndex = 0;
  private boolean reportEof = false;

  private void rollbackTo(int scanpos) {
    currentIndex = scanpos;
  }
  private void init(int la) {
    jj_la = la;
    tokens.clear();
    tokens.add(builder.getTokenType());
    currentIndex = 0;
    maxIndex = 0;
  }
  private IElementType jj_consume_token(IElementType type) {
    IElementType actualType = builder.getTokenType();
    if (actualType == type) {
      builder.advanceLexer();
    } else {
      if (builder.eof()) {
        if (!reportEof) {
          reportEof = true;
          builder.error("Unexpected end of file");
        }
      } else {
        PsiBuilder.Marker errorMarker = builder.mark();
        String text = builder.getTokenText();
        builder.advanceLexer();
        errorMarker.error("Expected " + type + ", but get: " + text);
      }
    }
    return type;
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private void jj_on_la1() {
    advanceLexer();
    jj_test_jj_la();
  }

  private void jj_test_jj_la() {
    if (jj_la == 0 && maxIndex == currentIndex)
       throw jj_ls;
  }

  private IElementType advanceLexer() {
    if (maxIndex == currentIndex) {
      IElementType result = tokens.get(currentIndex);
      builder.advanceLexer();
      tokens.add(builder.getTokenType());
      maxIndex++;
      currentIndex++;
      jj_la--;
      return result;
    }
    return tokens.get(currentIndex++);
  }

  private boolean jj_scan_token(IElementType kind) {
    IElementType nextType = advanceLexer();
    if (nextType != kind) return true;
    jj_test_jj_la();
    return false;
  }


/** Get the next Token. Use getNextTokenType instead. 
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  } */

/** Get the specific Token. */
  final public IElementType getTokenType(int index) {
    IElementType t = null;
    for (int i = 0; i < index; i++) {
      t = builder.getTokenType();
    }
    return t;
  }

    private IElementType getType() {
      return builder.getTokenType();
    }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
