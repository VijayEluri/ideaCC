/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. JavaCCParserConstants.java */
package org.gark87.idea.javacc.generated;

import com.intellij.psi.tree.IElementType;
/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

 /* MORE */
 IElementType MORE = new JavaCCParserElementType("|MORE|");
  /** RegularExpression Id. */
  IElementType _OPTIONS = new JavaCCParserElementType("options");
  /** RegularExpression Id. */
  IElementType _LOOKAHEAD = new JavaCCParserElementType("LOOKAHEAD");
  /** RegularExpression Id. */
  IElementType _IGNORE_CASE = new JavaCCParserElementType("IGNORE_CASE");
  /** RegularExpression Id. */
  IElementType _PARSER_BEGIN = new JavaCCParserElementType("PARSER_BEGIN");
  /** RegularExpression Id. */
  IElementType _PARSER_END = new JavaCCParserElementType("PARSER_END");
  /** RegularExpression Id. */
  IElementType _JAVACODE = new JavaCCParserElementType("JAVACODE");
  /** RegularExpression Id. */
  IElementType _TOKEN = new JavaCCParserElementType("TOKEN");
  /** RegularExpression Id. */
  IElementType _SPECIAL_TOKEN = new JavaCCParserElementType("SPECIAL_TOKEN");
  /** RegularExpression Id. */
  IElementType _MORE = new JavaCCParserElementType("MORE");
  /** RegularExpression Id. */
  IElementType _SKIP = new JavaCCParserElementType("SKIP");
  /** RegularExpression Id. */
  IElementType _TOKEN_MGR_DECLS = new JavaCCParserElementType("TOKEN_MGR_DECLS");
  /** RegularExpression Id. */
  IElementType _EOF = new JavaCCParserElementType("EOF");
  /** RegularExpression Id. */
  IElementType SINGLE_LINE_COMMENT = new JavaCCParserElementType("<SINGLE_LINE_COMMENT>");
  /** RegularExpression Id. */
  IElementType FORMAL_COMMENT = new JavaCCParserElementType("*/");
  /** RegularExpression Id. */
  IElementType MULTI_LINE_COMMENT = new JavaCCParserElementType("*/");
  /** RegularExpression Id. */
  IElementType ABSTRACT = new JavaCCParserElementType("abstract");
  /** RegularExpression Id. */
  IElementType BOOLEAN = new JavaCCParserElementType("boolean");
  /** RegularExpression Id. */
  IElementType BREAK = new JavaCCParserElementType("break");
  /** RegularExpression Id. */
  IElementType BYTE = new JavaCCParserElementType("byte");
  /** RegularExpression Id. */
  IElementType CASE = new JavaCCParserElementType("case");
  /** RegularExpression Id. */
  IElementType CATCH = new JavaCCParserElementType("catch");
  /** RegularExpression Id. */
  IElementType CHAR = new JavaCCParserElementType("char");
  /** RegularExpression Id. */
  IElementType CLASS = new JavaCCParserElementType("class");
  /** RegularExpression Id. */
  IElementType CONST = new JavaCCParserElementType("const");
  /** RegularExpression Id. */
  IElementType CONTINUE = new JavaCCParserElementType("continue");
  /** RegularExpression Id. */
  IElementType _DEFAULT = new JavaCCParserElementType("default");
  /** RegularExpression Id. */
  IElementType DO = new JavaCCParserElementType("do");
  /** RegularExpression Id. */
  IElementType DOUBLE = new JavaCCParserElementType("double");
  /** RegularExpression Id. */
  IElementType ELSE = new JavaCCParserElementType("else");
  /** RegularExpression Id. */
  IElementType EXTENDS = new JavaCCParserElementType("extends");
  /** RegularExpression Id. */
  IElementType FALSE = new JavaCCParserElementType("false");
  /** RegularExpression Id. */
  IElementType FINAL = new JavaCCParserElementType("final");
  /** RegularExpression Id. */
  IElementType FINALLY = new JavaCCParserElementType("finally");
  /** RegularExpression Id. */
  IElementType FLOAT = new JavaCCParserElementType("float");
  /** RegularExpression Id. */
  IElementType FOR = new JavaCCParserElementType("for");
  /** RegularExpression Id. */
  IElementType GOTO = new JavaCCParserElementType("goto");
  /** RegularExpression Id. */
  IElementType IF = new JavaCCParserElementType("if");
  /** RegularExpression Id. */
  IElementType IMPLEMENTS = new JavaCCParserElementType("implements");
  /** RegularExpression Id. */
  IElementType IMPORT = new JavaCCParserElementType("import");
  /** RegularExpression Id. */
  IElementType INSTANCEOF = new JavaCCParserElementType("instanceof");
  /** RegularExpression Id. */
  IElementType INT = new JavaCCParserElementType("int");
  /** RegularExpression Id. */
  IElementType INTERFACE = new JavaCCParserElementType("interface");
  /** RegularExpression Id. */
  IElementType LONG = new JavaCCParserElementType("long");
  /** RegularExpression Id. */
  IElementType NATIVE = new JavaCCParserElementType("native");
  /** RegularExpression Id. */
  IElementType NEW = new JavaCCParserElementType("new");
  /** RegularExpression Id. */
  IElementType NULL = new JavaCCParserElementType("null");
  /** RegularExpression Id. */
  IElementType PACKAGE = new JavaCCParserElementType("package");
  /** RegularExpression Id. */
  IElementType PRIVATE = new JavaCCParserElementType("private");
  /** RegularExpression Id. */
  IElementType PROTECTED = new JavaCCParserElementType("protected");
  /** RegularExpression Id. */
  IElementType PUBLIC = new JavaCCParserElementType("public");
  /** RegularExpression Id. */
  IElementType RETURN = new JavaCCParserElementType("return");
  /** RegularExpression Id. */
  IElementType SHORT = new JavaCCParserElementType("short");
  /** RegularExpression Id. */
  IElementType STATIC = new JavaCCParserElementType("static");
  /** RegularExpression Id. */
  IElementType SUPER = new JavaCCParserElementType("super");
  /** RegularExpression Id. */
  IElementType SWITCH = new JavaCCParserElementType("switch");
  /** RegularExpression Id. */
  IElementType SYNCHRONIZED = new JavaCCParserElementType("synchronized");
  /** RegularExpression Id. */
  IElementType THIS = new JavaCCParserElementType("this");
  /** RegularExpression Id. */
  IElementType THROW = new JavaCCParserElementType("throw");
  /** RegularExpression Id. */
  IElementType THROWS = new JavaCCParserElementType("throws");
  /** RegularExpression Id. */
  IElementType TRANSIENT = new JavaCCParserElementType("transient");
  /** RegularExpression Id. */
  IElementType TRUE = new JavaCCParserElementType("true");
  /** RegularExpression Id. */
  IElementType TRY = new JavaCCParserElementType("try");
  /** RegularExpression Id. */
  IElementType VOID = new JavaCCParserElementType("void");
  /** RegularExpression Id. */
  IElementType VOLATILE = new JavaCCParserElementType("volatile");
  /** RegularExpression Id. */
  IElementType WHILE = new JavaCCParserElementType("while");
  /** RegularExpression Id. */
  IElementType INTEGER_LITERAL = new JavaCCParserElementType("<INTEGER_LITERAL>");
  /** RegularExpression Id. */
  IElementType DECIMAL_LITERAL = new JavaCCParserElementType("<DECIMAL_LITERAL>");
  /** RegularExpression Id. */
  IElementType HEX_LITERAL = new JavaCCParserElementType("<HEX_LITERAL>");
  /** RegularExpression Id. */
  IElementType OCTAL_LITERAL = new JavaCCParserElementType("<OCTAL_LITERAL>");
  /** RegularExpression Id. */
  IElementType FLOATING_POINT_LITERAL = new JavaCCParserElementType("<FLOATING_POINT_LITERAL>");
  /** RegularExpression Id. */
  IElementType EXPONENT = new JavaCCParserElementType("<EXPONENT>");
  /** RegularExpression Id. */
  IElementType CHARACTER_LITERAL = new JavaCCParserElementType("<CHARACTER_LITERAL>");
  /** RegularExpression Id. */
  IElementType STRING_LITERAL = new JavaCCParserElementType("<STRING_LITERAL>");
  /** RegularExpression Id. */
  IElementType IDENTIFIER = new JavaCCParserElementType("<IDENTIFIER>");
  /** RegularExpression Id. */
  IElementType LETTER = new JavaCCParserElementType("<LETTER>");
  /** RegularExpression Id. */
  IElementType DIGIT = new JavaCCParserElementType("<DIGIT>");
  /** RegularExpression Id. */
  IElementType LPAREN = new JavaCCParserElementType("(");
  /** RegularExpression Id. */
  IElementType RPAREN = new JavaCCParserElementType(")");
  /** RegularExpression Id. */
  IElementType LBRACE = new JavaCCParserElementType("{");
  /** RegularExpression Id. */
  IElementType RBRACE = new JavaCCParserElementType("}");
  /** RegularExpression Id. */
  IElementType LBRACKET = new JavaCCParserElementType("[");
  /** RegularExpression Id. */
  IElementType RBRACKET = new JavaCCParserElementType("]");
  /** RegularExpression Id. */
  IElementType SEMICOLON = new JavaCCParserElementType(";");
  /** RegularExpression Id. */
  IElementType COMMA = new JavaCCParserElementType(",");
  /** RegularExpression Id. */
  IElementType DOT = new JavaCCParserElementType(".");
  /** RegularExpression Id. */
  IElementType ASSIGN = new JavaCCParserElementType("=");
  /** RegularExpression Id. */
  IElementType GT = new JavaCCParserElementType(">");
  /** RegularExpression Id. */
  IElementType LT = new JavaCCParserElementType("<");
  /** RegularExpression Id. */
  IElementType BANG = new JavaCCParserElementType("!");
  /** RegularExpression Id. */
  IElementType TILDE = new JavaCCParserElementType("~");
  /** RegularExpression Id. */
  IElementType HOOK = new JavaCCParserElementType("?");
  /** RegularExpression Id. */
  IElementType COLON = new JavaCCParserElementType(":");
  /** RegularExpression Id. */
  IElementType EQ = new JavaCCParserElementType("==");
  /** RegularExpression Id. */
  IElementType LE = new JavaCCParserElementType("<=");
  /** RegularExpression Id. */
  IElementType GE = new JavaCCParserElementType(">=");
  /** RegularExpression Id. */
  IElementType NE = new JavaCCParserElementType("!=");
  /** RegularExpression Id. */
  IElementType SC_OR = new JavaCCParserElementType("||");
  /** RegularExpression Id. */
  IElementType SC_AND = new JavaCCParserElementType("&&");
  /** RegularExpression Id. */
  IElementType INCR = new JavaCCParserElementType("++");
  /** RegularExpression Id. */
  IElementType DECR = new JavaCCParserElementType("--");
  /** RegularExpression Id. */
  IElementType PLUS = new JavaCCParserElementType("+");
  /** RegularExpression Id. */
  IElementType MINUS = new JavaCCParserElementType("-");
  /** RegularExpression Id. */
  IElementType STAR = new JavaCCParserElementType("*");
  /** RegularExpression Id. */
  IElementType SLASH = new JavaCCParserElementType("/");
  /** RegularExpression Id. */
  IElementType BIT_AND = new JavaCCParserElementType("&");
  /** RegularExpression Id. */
  IElementType BIT_OR = new JavaCCParserElementType("|");
  /** RegularExpression Id. */
  IElementType XOR = new JavaCCParserElementType("^");
  /** RegularExpression Id. */
  IElementType REM = new JavaCCParserElementType("%");
  /** RegularExpression Id. */
  IElementType PLUSASSIGN = new JavaCCParserElementType("+=");
  /** RegularExpression Id. */
  IElementType MINUSASSIGN = new JavaCCParserElementType("-=");
  /** RegularExpression Id. */
  IElementType STARASSIGN = new JavaCCParserElementType("*=");
  /** RegularExpression Id. */
  IElementType SLASHASSIGN = new JavaCCParserElementType("/=");
  /** RegularExpression Id. */
  IElementType ANDASSIGN = new JavaCCParserElementType("&=");
  /** RegularExpression Id. */
  IElementType ORASSIGN = new JavaCCParserElementType("|=");
  /** RegularExpression Id. */
  IElementType XORASSIGN = new JavaCCParserElementType("^=");
  /** RegularExpression Id. */
  IElementType REMASSIGN = new JavaCCParserElementType("%=");
  /** RegularExpression Id. */
  IElementType SHARP = new JavaCCParserElementType("#");


}
