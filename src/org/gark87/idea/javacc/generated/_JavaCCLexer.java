/* The following code was generated by JFlex 1.4.3 on 08.03.11 1:18 */

/* Generated By:JJTree(jj2IntelliJ output version)&JavaCC(jj2IntelliJ output version): Do not edit this line. _JavaCCLexer.flex */
/**
 * It's an automatically generated code. Do not modify it.
 * ATTENTION! It was generated by JFlex patched by the JetBrains guys.
 *
 *   # git clone git://git.jetbrains.org/idea/community.git $IDEADIR
 *   # $IDEADIR/tools/lexer/jflex-1.4/bin/jflex --skel $IDEADIR/tools/lexer/idea-flex.skeleton \
 *        --charat --jlex -d . _JavaCCLexer.flex
 *
 */
package org.gark87.idea.javacc.generated;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08.03.11 1:18 from the specification file
 * <tt>_JavaCCLexer.flex</tt>
 */
class _JavaCCLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_MULTI_LINE_COMMENT = 6;
  public static final int IN_SINGLE_LINE_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_FORMAL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\122\1\121\1\0\1\122\1\65\22\0\1\122\1\105\1\67"+
    "\1\120\1\71\1\117\1\112\1\64\1\72\1\73\1\114\1\113\1\101"+
    "\1\63\1\62\1\115\1\57\3\70\4\61\2\56\1\110\1\100\1\104"+
    "\1\102\1\103\1\107\1\0\1\12\1\26\1\23\1\15\1\14\1\33"+
    "\1\17\1\13\1\16\1\27\1\11\1\7\1\32\1\20\1\10\1\25"+
    "\1\71\1\21\1\24\1\31\1\71\1\30\1\71\1\60\2\71\1\76"+
    "\1\66\1\77\1\116\1\22\1\0\1\34\1\35\1\37\1\46\1\41"+
    "\1\47\1\51\1\44\1\4\1\71\1\42\1\40\1\52\1\5\1\1"+
    "\1\2\1\71\1\36\1\6\1\3\1\45\1\53\1\54\1\50\1\43"+
    "\1\55\1\74\1\111\1\75\1\106\101\0\27\71\1\0\37\71\1\0"+
    "\u0568\71\12\71\206\71\12\71\u026c\71\12\71\166\71\12\71\166\71\12\71"+
    "\166\71\12\71\166\71\12\71\167\71\11\71\166\71\12\71\166\71\12\71"+
    "\166\71\12\71\340\71\12\71\166\71\12\71\u0166\71\12\71\u0fb6\71\u1040\0"+
    "\u0150\71\u0170\0\200\71\200\0\u092e\71\u10d2\0\u5200\71\u5900\0\u0200\71\u0500\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\32\1\2\2\1\3\1\4\1\0\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\36\2\35\7\1\1\37\36\1\1\40\10\1\1\2"+
    "\1\0\2\41\2\0\1\2\1\42\1\43\3\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\6\1\1\67\3\1\1\70\3\1\1\71"+
    "\7\1\1\72\26\1\1\73\7\1\1\41\1\0\1\2"+
    "\1\74\5\0\6\1\1\75\1\76\6\1\1\77\7\1"+
    "\1\100\4\1\1\101\3\1\1\102\4\1\1\103\1\1"+
    "\1\104\1\105\1\106\6\1\1\107\1\110\2\1\1\0"+
    "\1\111\6\1\1\112\7\1\1\113\1\114\6\1\1\115"+
    "\2\1\1\116\2\1\1\117\1\120\1\121\3\1\1\122"+
    "\1\123\1\124\1\1\1\125\4\1\1\126\1\1\1\127"+
    "\2\1\1\130\1\1\1\131\1\132\1\1\1\133\10\1"+
    "\1\134\2\1\1\135\3\1\1\136\1\137\1\1\1\140"+
    "\14\1\1\141\1\1\1\142\1\143\1\144\14\1\1\145"+
    "\1\1\1\146\1\147\1\150\1\151\1\152\1\153\3\1"+
    "\1\154\5\1\1\155\1\156\3\1\1\157\3\1\1\160"+
    "\3\1\1\161\1\1\1\162\1\1\1\163\2\1\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0b59\0\u0b59\0\u0b59"+
    "\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0bff\0\u0c52\0\u0ca5"+
    "\0\u0cf8\0\u0b59\0\u0b59\0\u0b59\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44"+
    "\0\u0e97\0\u0eea\0\u0f3d\0\u0b59\0\u0b59\0\u0f90\0\u0b59\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b"+
    "\0\u0391\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0"+
    "\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758"+
    "\0\u17ab\0\u17fe\0\u1851\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0"+
    "\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88"+
    "\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20"+
    "\0\u0b59\0\u1f73\0\u0b59\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u0b59"+
    "\0\u0b59\0\u2112\0\u2165\0\u21b8\0\u0b59\0\u0b59\0\u0b59\0\u0b59"+
    "\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59"+
    "\0\u0b59\0\u220b\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u0b59\0\u225e"+
    "\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u0391\0\u2450\0\u24a3"+
    "\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u0391\0\u2695\0\u26e8"+
    "\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u0391\0\u28da\0\u292d"+
    "\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5"+
    "\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d"+
    "\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u0391\0\u2ffc\0\u304f\0\u30a2"+
    "\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u0b59"+
    "\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f"+
    "\0\u35d2\0\u3625\0\u3678\0\u0391\0\u0391\0\u36cb\0\u371e\0\u3771"+
    "\0\u37c4\0\u3817\0\u386a\0\u0391\0\u38bd\0\u3910\0\u3963\0\u39b6"+
    "\0\u3a09\0\u3a5c\0\u3aaf\0\u0391\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb"+
    "\0\u0391\0\u3c4e\0\u3ca1\0\u3cf4\0\u0391\0\u3d47\0\u3d9a\0\u3ded"+
    "\0\u3e40\0\u0391\0\u3e93\0\u0391\0\u0391\0\u0391\0\u3ee6\0\u3f39"+
    "\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u0391\0\u0391\0\u40d8\0\u412b"+
    "\0\u417e\0\u0b59\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370"+
    "\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u4608"+
    "\0\u0391\0\u0391\0\u465b\0\u46ae\0\u4701\0\u4754\0\u47a7\0\u47fa"+
    "\0\u484d\0\u48a0\0\u48f3\0\u0391\0\u4946\0\u4999\0\u0391\0\u0391"+
    "\0\u0391\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u0391\0\u0391\0\u4b38"+
    "\0\u0391\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u0391\0\u4cd7\0\u0391"+
    "\0\u4d2a\0\u4d7d\0\u0391\0\u4dd0\0\u0391\0\u0391\0\u4e23\0\u0391"+
    "\0\u4e76\0\u4ec9\0\u4f1c\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb"+
    "\0\u0391\0\u510e\0\u5161\0\u0391\0\u51b4\0\u5207\0\u525a\0\u0391"+
    "\0\u0391\0\u52ad\0\u0391\0\u5300\0\u5353\0\u53a6\0\u53f9\0\u544c"+
    "\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb\0\u563e\0\u5691\0\u0391"+
    "\0\u56e4\0\u0391\0\u0391\0\u0391\0\u5737\0\u578a\0\u57dd\0\u5830"+
    "\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8"+
    "\0\u0391\0\u5b1b\0\u0391\0\u0391\0\u0391\0\u0391\0\u0391\0\u0391"+
    "\0\u5b6e\0\u5bc1\0\u5c14\0\u0391\0\u5c67\0\u5cba\0\u5d0d\0\u5d60"+
    "\0\u5db3\0\u0391\0\u0391\0\u5e06\0\u5e59\0\u5eac\0\u0391\0\u5eff"+
    "\0\u5f52\0\u5fa5\0\u0391\0\u5ff8\0\u604b\0\u609e\0\u0391\0\u60f1"+
    "\0\u0391\0\u6144\0\u0391\0\u6197\0\u61ea\0\u0391";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\4\14\1\15\1\14\1\16\5\14\1\17\1\20\1\14"+
    "\1\21\1\14\1\22\1\23\1\14\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\4\14\1\32\1\33\1\14\1\34"+
    "\1\14\1\35\1\36\1\14\1\37\1\40\1\14\1\37"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\37\1\14"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\2\44"+
    "\65\75\1\76\33\75\1\77\115\75\1\100\122\75\1\101"+
    "\6\75\1\0\1\14\1\102\57\14\6\0\2\14\32\0"+
    "\33\14\1\103\1\14\1\104\6\14\1\105\14\14\6\0"+
    "\2\14\32\0\35\14\1\106\5\14\1\107\15\14\6\0"+
    "\2\14\32\0\4\14\1\110\41\14\1\111\2\14\1\112"+
    "\7\14\6\0\2\14\32\0\33\14\1\113\4\14\1\114"+
    "\3\14\1\115\14\14\6\0\2\14\32\0\2\14\1\116"+
    "\37\14\1\117\1\120\1\121\6\14\1\122\5\14\6\0"+
    "\2\14\32\0\7\14\1\123\51\14\6\0\2\14\32\0"+
    "\61\14\6\0\2\14\32\0\7\14\1\124\51\14\6\0"+
    "\2\14\32\0\16\14\1\125\42\14\6\0\2\14\32\0"+
    "\10\14\1\126\13\14\1\127\34\14\6\0\2\14\32\0"+
    "\11\14\1\130\47\14\6\0\2\14\32\0\11\14\1\131"+
    "\47\14\6\0\2\14\32\0\7\14\1\132\51\14\6\0"+
    "\2\14\32\0\7\14\1\133\51\14\6\0\2\14\32\0"+
    "\34\14\1\134\24\14\6\0\2\14\32\0\1\135\34\14"+
    "\1\136\4\14\1\137\16\14\6\0\2\14\32\0\40\14"+
    "\1\140\20\14\6\0\2\14\32\0\1\141\32\14\1\142"+
    "\3\14\1\143\3\14\1\144\15\14\6\0\2\14\32\0"+
    "\1\145\60\14\6\0\2\14\32\0\37\14\1\146\7\14"+
    "\1\147\11\14\6\0\2\14\32\0\1\150\37\14\1\151"+
    "\20\14\6\0\2\14\32\0\1\152\2\14\1\153\27\14"+
    "\1\154\3\14\1\155\21\14\6\0\2\14\32\0\1\156"+
    "\60\14\6\0\2\14\32\0\1\157\60\14\6\0\2\14"+
    "\32\0\43\14\1\160\15\14\6\0\2\14\40\0\1\161"+
    "\4\0\1\162\1\163\15\0\1\163\4\0\1\161\1\162"+
    "\4\0\2\163\6\0\2\37\1\0\1\37\1\164\5\0"+
    "\1\37\41\0\1\161\4\0\1\162\1\163\15\0\1\163"+
    "\4\0\1\161\1\162\4\0\2\163\1\165\5\0\1\166"+
    "\1\167\1\165\1\167\1\164\5\0\1\167\110\0\2\164"+
    "\1\0\1\164\6\0\1\164\115\0\1\170\16\0\1\171"+
    "\20\0\64\172\2\0\1\173\32\172\1\0\1\172\123\0"+
    "\65\45\1\0\1\174\1\175\31\45\1\0\1\45\102\0"+
    "\1\176\122\0\1\177\122\0\1\200\122\0\1\201\122\0"+
    "\1\202\6\0\1\203\113\0\1\204\7\0\1\205\112\0"+
    "\1\206\10\0\1\207\111\0\1\210\122\0\1\211\11\0"+
    "\1\212\1\213\107\0\1\214\122\0\1\215\141\0\1\77"+
    "\116\0\1\216\122\0\1\217\6\0\2\14\1\220\56\14"+
    "\6\0\2\14\32\0\36\14\1\221\22\14\6\0\2\14"+
    "\32\0\1\222\2\14\1\223\55\14\6\0\2\14\32\0"+
    "\34\14\1\224\24\14\6\0\2\14\32\0\33\14\1\225"+
    "\6\14\1\226\1\14\1\227\14\14\6\0\2\14\32\0"+
    "\3\14\1\230\31\14\1\231\23\14\6\0\2\14\32\0"+
    "\2\14\1\232\2\14\1\233\53\14\6\0\2\14\32\0"+
    "\1\14\1\234\57\14\6\0\2\14\32\0\2\14\1\235"+
    "\56\14\6\0\2\14\32\0\53\14\1\236\5\14\6\0"+
    "\2\14\32\0\37\14\1\237\21\14\6\0\2\14\32\0"+
    "\33\14\1\240\25\14\6\0\2\14\32\0\4\14\1\241"+
    "\54\14\6\0\2\14\32\0\1\242\60\14\6\0\2\14"+
    "\32\0\1\14\1\243\57\14\6\0\2\14\32\0\3\14"+
    "\1\244\55\14\6\0\2\14\32\0\7\14\1\245\51\14"+
    "\6\0\2\14\32\0\32\14\1\246\26\14\6\0\2\14"+
    "\32\0\17\14\1\247\41\14\6\0\2\14\32\0\15\14"+
    "\1\250\43\14\6\0\2\14\32\0\13\14\1\251\45\14"+
    "\6\0\2\14\32\0\20\14\1\252\40\14\6\0\2\14"+
    "\32\0\27\14\1\253\31\14\6\0\2\14\32\0\10\14"+
    "\1\254\50\14\6\0\2\14\32\0\20\14\1\255\40\14"+
    "\6\0\2\14\32\0\5\14\1\256\53\14\6\0\2\14"+
    "\32\0\1\257\60\14\6\0\2\14\32\0\40\14\1\260"+
    "\20\14\6\0\2\14\32\0\2\14\1\261\56\14\6\0"+
    "\2\14\32\0\2\14\1\262\56\14\6\0\2\14\32\0"+
    "\4\14\1\263\54\14\6\0\2\14\32\0\2\14\1\264"+
    "\2\14\1\265\53\14\6\0\2\14\32\0\33\14\1\266"+
    "\25\14\6\0\2\14\32\0\33\14\1\267\25\14\6\0"+
    "\2\14\32\0\4\14\1\270\54\14\6\0\2\14\32\0"+
    "\5\14\1\271\53\14\6\0\2\14\32\0\2\14\1\272"+
    "\56\14\6\0\2\14\32\0\44\14\1\273\14\14\6\0"+
    "\2\14\32\0\46\14\1\274\12\14\6\0\2\14\32\0"+
    "\35\14\1\275\23\14\6\0\2\14\32\0\4\14\1\276"+
    "\54\14\6\0\2\14\32\0\37\14\1\277\21\14\6\0"+
    "\2\14\32\0\1\300\60\14\6\0\2\14\32\0\2\14"+
    "\1\301\56\14\6\0\2\14\32\0\3\14\1\302\33\14"+
    "\1\303\21\14\6\0\2\14\32\0\3\14\1\304\55\14"+
    "\6\0\2\14\107\0\2\305\1\0\1\305\1\0\1\306"+
    "\4\0\1\305\22\0\1\306\23\0\1\162\1\163\15\0"+
    "\1\163\5\0\1\162\4\0\2\163\6\0\2\164\1\0"+
    "\1\164\6\0\1\164\44\0\1\307\1\0\2\307\5\0"+
    "\1\307\2\0\1\307\4\0\3\307\1\0\1\307\1\0"+
    "\1\307\4\0\2\307\6\0\2\307\1\0\1\307\6\0"+
    "\1\307\46\0\1\162\1\163\15\0\1\163\5\0\1\162"+
    "\4\0\2\163\6\0\2\166\1\0\1\166\1\164\5\0"+
    "\1\166\41\0\1\161\4\0\1\162\1\163\15\0\1\163"+
    "\4\0\1\161\1\162\4\0\2\163\6\0\1\166\1\167"+
    "\1\0\1\167\1\164\5\0\1\167\116\0\1\310\41\0"+
    "\1\172\1\0\1\172\27\0\2\172\6\0\1\311\1\0"+
    "\1\172\7\0\1\312\1\0\1\313\2\0\1\172\1\0"+
    "\2\172\1\312\35\0\1\45\1\0\1\45\27\0\2\45"+
    "\6\0\1\314\1\0\1\45\7\0\1\45\1\0\1\45"+
    "\2\0\1\45\1\0\3\45\146\0\1\315\7\0\3\14"+
    "\1\316\55\14\6\0\2\14\32\0\41\14\1\317\17\14"+
    "\6\0\2\14\32\0\2\14\1\320\56\14\6\0\2\14"+
    "\32\0\52\14\1\321\6\14\6\0\2\14\32\0\37\14"+
    "\1\322\21\14\6\0\2\14\32\0\4\14\1\323\54\14"+
    "\6\0\2\14\32\0\40\14\1\324\20\14\6\0\2\14"+
    "\32\0\5\14\1\325\53\14\6\0\2\14\32\0\1\326"+
    "\60\14\6\0\2\14\32\0\40\14\1\327\20\14\6\0"+
    "\2\14\32\0\2\14\1\330\56\14\6\0\2\14\32\0"+
    "\1\331\36\14\1\332\21\14\6\0\2\14\32\0\3\14"+
    "\1\333\55\14\6\0\2\14\32\0\37\14\1\334\21\14"+
    "\6\0\2\14\32\0\2\14\1\335\56\14\6\0\2\14"+
    "\32\0\36\14\1\336\22\14\6\0\2\14\32\0\35\14"+
    "\1\337\23\14\6\0\2\14\32\0\40\14\1\340\20\14"+
    "\6\0\2\14\32\0\2\14\1\341\56\14\6\0\2\14"+
    "\32\0\10\14\1\342\50\14\6\0\2\14\32\0\7\14"+
    "\1\343\51\14\6\0\2\14\32\0\24\14\1\344\34\14"+
    "\6\0\2\14\32\0\22\14\1\345\36\14\6\0\2\14"+
    "\32\0\23\14\1\346\35\14\6\0\2\14\32\0\11\14"+
    "\1\347\47\14\6\0\2\14\32\0\13\14\1\350\45\14"+
    "\6\0\2\14\32\0\13\14\1\351\45\14\6\0\2\14"+
    "\32\0\2\14\1\352\56\14\6\0\2\14\32\0\37\14"+
    "\1\353\21\14\6\0\2\14\32\0\33\14\1\354\25\14"+
    "\6\0\2\14\32\0\40\14\1\355\20\14\6\0\2\14"+
    "\32\0\44\14\1\356\14\14\6\0\2\14\32\0\2\14"+
    "\1\357\2\14\1\360\53\14\6\0\2\14\32\0\36\14"+
    "\1\361\22\14\6\0\2\14\32\0\40\14\1\362\20\14"+
    "\6\0\2\14\32\0\5\14\1\363\53\14\6\0\2\14"+
    "\32\0\35\14\1\364\23\14\6\0\2\14\32\0\50\14"+
    "\1\365\10\14\6\0\2\14\32\0\40\14\1\366\20\14"+
    "\6\0\2\14\32\0\40\14\1\367\20\14\6\0\2\14"+
    "\32\0\34\14\1\370\24\14\6\0\2\14\32\0\33\14"+
    "\1\371\25\14\6\0\2\14\32\0\33\14\1\372\25\14"+
    "\6\0\2\14\32\0\5\14\1\373\53\14\6\0\2\14"+
    "\32\0\33\14\1\374\25\14\6\0\2\14\32\0\1\375"+
    "\60\14\6\0\2\14\32\0\45\14\1\376\13\14\6\0"+
    "\2\14\32\0\33\14\1\377\25\14\6\0\2\14\32\0"+
    "\37\14\1\u0100\21\14\6\0\2\14\46\0\1\163\15\0"+
    "\1\163\12\0\2\163\6\0\2\305\1\0\1\305\6\0"+
    "\1\305\110\0\2\305\1\0\1\305\6\0\1\305\41\0"+
    "\1\161\2\0\1\307\1\0\2\307\5\0\1\307\2\0"+
    "\1\307\4\0\3\307\1\0\1\307\1\161\1\307\4\0"+
    "\2\307\6\0\2\307\1\0\1\307\6\0\1\307\44\0"+
    "\1\u0101\1\0\2\u0101\5\0\1\u0101\2\0\1\u0101\4\0"+
    "\3\u0101\1\0\1\u0101\1\0\1\u0101\4\0\2\u0101\6\0"+
    "\2\u0101\1\0\1\u0101\6\0\1\u0101\111\0\1\313\1\0"+
    "\1\313\2\0\1\310\3\0\1\313\111\0\1\172\1\0"+
    "\1\172\2\0\1\310\3\0\1\172\44\0\1\45\1\0"+
    "\2\45\5\0\1\45\2\0\1\45\4\0\3\45\1\0"+
    "\1\45\1\0\1\45\4\0\2\45\6\0\2\45\1\0"+
    "\1\45\6\0\1\45\32\0\115\u0102\1\0\5\u0102\1\0"+
    "\1\u0103\60\14\6\0\2\14\32\0\33\14\1\u0104\25\14"+
    "\6\0\2\14\32\0\40\14\1\u0105\20\14\6\0\2\14"+
    "\32\0\33\14\1\u0106\25\14\6\0\2\14\32\0\3\14"+
    "\1\u0107\55\14\6\0\2\14\32\0\5\14\1\u0108\53\14"+
    "\6\0\2\14\32\0\53\14\1\u0109\5\14\6\0\2\14"+
    "\32\0\35\14\1\u010a\23\14\6\0\2\14\32\0\33\14"+
    "\1\u010b\25\14\6\0\2\14\32\0\35\14\1\u010c\23\14"+
    "\6\0\2\14\32\0\40\14\1\u010d\20\14\6\0\2\14"+
    "\32\0\52\14\1\u010e\6\14\6\0\2\14\32\0\3\14"+
    "\1\u010f\55\14\6\0\2\14\32\0\43\14\1\u0110\15\14"+
    "\6\0\2\14\32\0\2\14\1\u0111\56\14\6\0\2\14"+
    "\32\0\35\14\1\u0112\23\14\6\0\2\14\32\0\36\14"+
    "\1\u0113\22\14\6\0\2\14\32\0\11\14\1\u0114\47\14"+
    "\6\0\2\14\32\0\20\14\1\u0115\40\14\6\0\2\14"+
    "\32\0\15\14\1\u0116\43\14\6\0\2\14\32\0\13\14"+
    "\1\u0117\45\14\6\0\2\14\32\0\22\14\1\u0118\36\14"+
    "\6\0\2\14\32\0\17\14\1\u0119\41\14\6\0\2\14"+
    "\32\0\35\14\1\u011a\23\14\6\0\2\14\32\0\40\14"+
    "\1\u011b\20\14\6\0\2\14\32\0\41\14\1\u011c\17\14"+
    "\6\0\2\14\32\0\35\14\1\u011d\23\14\6\0\2\14"+
    "\32\0\3\14\1\u011e\55\14\6\0\2\14\32\0\2\14"+
    "\1\u011f\56\14\6\0\2\14\32\0\43\14\1\u0120\15\14"+
    "\6\0\2\14\32\0\5\14\1\u0121\53\14\6\0\2\14"+
    "\32\0\4\14\1\u0122\54\14\6\0\2\14\32\0\37\14"+
    "\1\u0123\21\14\6\0\2\14\32\0\44\14\1\u0124\14\14"+
    "\6\0\2\14\32\0\37\14\1\u0125\21\14\6\0\2\14"+
    "\32\0\40\14\1\u0126\20\14\6\0\2\14\32\0\2\14"+
    "\1\u0127\56\14\6\0\2\14\32\0\2\14\1\u0128\56\14"+
    "\6\0\2\14\32\0\40\14\1\u0129\20\14\6\0\2\14"+
    "\43\0\1\u0101\1\0\2\u0101\5\0\1\u0101\2\0\1\u0101"+
    "\4\0\3\u0101\1\0\1\u0101\1\0\1\u0101\4\0\2\u0101"+
    "\6\0\2\u0101\1\0\1\u0101\2\0\1\310\3\0\1\u0101"+
    "\33\0\4\14\1\u012a\54\14\6\0\2\14\32\0\50\14"+
    "\1\u012b\10\14\6\0\2\14\32\0\36\14\1\u012c\22\14"+
    "\6\0\2\14\32\0\2\14\1\u012d\56\14\6\0\2\14"+
    "\32\0\36\14\1\u012e\22\14\6\0\2\14\32\0\3\14"+
    "\1\u012f\55\14\6\0\2\14\32\0\5\14\1\u0130\53\14"+
    "\6\0\2\14\32\0\46\14\1\u0131\12\14\6\0\2\14"+
    "\32\0\4\14\1\u0132\54\14\6\0\2\14\32\0\2\14"+
    "\1\u0133\56\14\6\0\2\14\32\0\51\14\1\u0134\7\14"+
    "\6\0\2\14\32\0\40\14\1\u0135\20\14\6\0\2\14"+
    "\32\0\36\14\1\u0136\22\14\6\0\2\14\32\0\35\14"+
    "\1\u0137\23\14\6\0\2\14\32\0\43\14\1\u0138\15\14"+
    "\6\0\2\14\32\0\12\14\1\u0139\46\14\6\0\2\14"+
    "\32\0\13\14\1\u013a\45\14\6\0\2\14\32\0\11\14"+
    "\1\u013b\47\14\6\0\2\14\32\0\20\14\1\u013c\40\14"+
    "\6\0\2\14\32\0\7\14\1\u013d\51\14\6\0\2\14"+
    "\32\0\21\14\1\u013e\37\14\6\0\2\14\32\0\33\14"+
    "\1\u013f\25\14\6\0\2\14\32\0\33\14\1\u0140\25\14"+
    "\6\0\2\14\32\0\4\14\1\u0141\54\14\6\0\2\14"+
    "\32\0\4\14\1\u0142\54\14\6\0\2\14\32\0\45\14"+
    "\1\u0143\13\14\6\0\2\14\32\0\40\14\1\u0144\20\14"+
    "\6\0\2\14\32\0\37\14\1\u0145\21\14\6\0\2\14"+
    "\32\0\37\14\1\u0146\21\14\6\0\2\14\32\0\3\14"+
    "\1\u0147\55\14\6\0\2\14\32\0\5\14\1\u0148\53\14"+
    "\6\0\2\14\32\0\40\14\1\u0149\20\14\6\0\2\14"+
    "\32\0\2\14\1\u014a\56\14\6\0\2\14\32\0\40\14"+
    "\1\u014b\20\14\6\0\2\14\32\0\40\14\1\u014c\20\14"+
    "\6\0\2\14\32\0\33\14\1\u014d\25\14\6\0\2\14"+
    "\32\0\36\14\1\u014e\22\14\6\0\2\14\32\0\40\14"+
    "\1\u014f\20\14\6\0\2\14\32\0\1\u0150\60\14\6\0"+
    "\2\14\32\0\13\14\1\u0151\45\14\6\0\2\14\32\0"+
    "\21\14\1\u0152\37\14\6\0\2\14\32\0\6\14\1\u0153"+
    "\52\14\6\0\2\14\32\0\21\14\1\u0154\37\14\6\0"+
    "\2\14\32\0\14\14\1\u0155\44\14\6\0\2\14\32\0"+
    "\31\14\1\u0156\27\14\6\0\2\14\32\0\36\14\1\u0157"+
    "\22\14\6\0\2\14\32\0\4\14\1\u0158\54\14\6\0"+
    "\2\14\32\0\44\14\1\u0159\14\14\6\0\2\14\32\0"+
    "\5\14\1\u015a\53\14\6\0\2\14\32\0\2\14\1\u015b"+
    "\56\14\6\0\2\14\32\0\42\14\1\u015c\16\14\6\0"+
    "\2\14\32\0\37\14\1\u015d\21\14\6\0\2\14\32\0"+
    "\40\14\1\u015e\20\14\6\0\2\14\32\0\4\14\1\u015f"+
    "\54\14\6\0\2\14\32\0\36\14\1\u0160\22\14\6\0"+
    "\2\14\32\0\40\14\1\u0161\20\14\6\0\2\14\32\0"+
    "\4\14\1\u0162\54\14\6\0\2\14\32\0\4\14\1\u0163"+
    "\54\14\6\0\2\14\32\0\11\14\1\u0164\47\14\6\0"+
    "\2\14\32\0\22\14\1\u0165\36\14\6\0\2\14\32\0"+
    "\21\14\1\u0166\37\14\6\0\2\14\32\0\13\14\1\u0167"+
    "\11\14\1\u0168\33\14\6\0\2\14\32\0\13\14\1\u0169"+
    "\45\14\6\0\2\14\32\0\16\14\1\u016a\42\14\6\0"+
    "\2\14\32\0\2\14\1\u016b\56\14\6\0\2\14\32\0"+
    "\40\14\1\u016c\20\14\6\0\2\14\32\0\40\14\1\u016d"+
    "\20\14\6\0\2\14\32\0\45\14\1\u016e\13\14\6\0"+
    "\2\14\32\0\2\14\1\u016f\56\14\6\0\2\14\32\0"+
    "\40\14\1\u0170\20\14\6\0\2\14\32\0\1\u0171\60\14"+
    "\6\0\2\14\32\0\2\14\1\u0172\56\14\6\0\2\14"+
    "\32\0\3\14\1\u0173\55\14\6\0\2\14\32\0\14\14"+
    "\1\u0174\44\14\6\0\2\14\32\0\11\14\1\u0175\47\14"+
    "\6\0\2\14\32\0\30\14\1\u0176\30\14\6\0\2\14"+
    "\32\0\17\14\1\u0177\41\14\6\0\2\14\32\0\13\14"+
    "\1\u0178\45\14\6\0\2\14\32\0\20\14\1\u0179\40\14"+
    "\6\0\2\14\32\0\46\14\1\u017a\12\14\6\0\2\14"+
    "\32\0\5\14\1\u017b\53\14\6\0\2\14\32\0\54\14"+
    "\1\u017c\4\14\6\0\2\14\32\0\23\14\1\u017d\35\14"+
    "\6\0\2\14\32\0\7\14\1\u017e\51\14\6\0\2\14"+
    "\32\0\14\14\1\u017f\44\14\6\0\2\14\32\0\16\14"+
    "\1\u0180\42\14\6\0\2\14\32\0\21\14\1\u0181\37\14"+
    "\6\0\2\14\32\0\40\14\1\u0182\20\14\6\0\2\14"+
    "\32\0\13\14\1\u0183\45\14\6\0\2\14\32\0\10\14"+
    "\1\u0184\50\14\6\0\2\14\32\0\15\14\1\u0185\43\14"+
    "\6\0\2\14\32\0\14\14\1\u0186\44\14\6\0\2\14"+
    "\32\0\45\14\1\u0187\13\14\6\0\2\14\32\0\13\14"+
    "\1\u0188\45\14\6\0\2\14\32\0\17\14\1\u0189\41\14"+
    "\6\0\2\14\32\0\13\14\1\u018a\45\14\6\0\2\14"+
    "\32\0\17\14\1\u018b\41\14\6\0\2\14\32\0\22\14"+
    "\1\u018c\36\14\6\0\2\14\32\0\6\14\1\u018d\52\14"+
    "\6\0\2\14\32\0\23\14\1\u018e\35\14\6\0\2\14"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25149];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\36\1\1\0\1\11\1\0\10\11\4\1\3\11"+
    "\7\1\2\11\1\1\1\11\61\1\1\11\1\0\1\11"+
    "\1\1\2\0\1\1\2\11\3\0\15\11\1\1\5\11"+
    "\66\1\1\0\1\1\1\11\5\0\63\1\1\0\1\11"+
    "\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }

  public IElementType advance() throws java.io.IOException {
    IElementType result = internalAdvance();
    int start = zzStartRead;
    while(result != null && (result == JavaCCConstants.MORE || result == JavaCCConstants.SKIP)) {
      result = internalAdvance();
      if (result == JavaCCConstants.SKIP)
        start = zzStartRead;
    }
    zzStartRead = start;
    return result;
  }


  _JavaCCLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaCCLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 280) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType internalAdvance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 90: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.STATIC;
          }
        case 117: break;
        case 79: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CONST;
          }
        case 118: break;
        case 55: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.TRY;
          }
        case 119: break;
        case 12: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SEMICOLON;
          }
        case 120: break;
        case 51: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.XORASSIGN;
          }
        case 121: break;
        case 20: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.COLON;
          }
        case 122: break;
        case 78: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BREAK;
          }
        case 123: break;
        case 48: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SLASHASSIGN;
          }
        case 124: break;
        case 5: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SKIP;
          }
        case 125: break;
        case 66: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BYTE;
          }
        case 126: break;
        case 36: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.STRING_LITERAL;
          }
        case 127: break;
        case 58: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._EOF;
          }
        case 128: break;
        case 54: 
          { yybegin(YYINITIAL);return org.gark87.idea.javacc.generated.JavaCCConstants.MULTI_LINE_COMMENT;
          }
        case 129: break;
        case 10: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LBRACKET;
          }
        case 130: break;
        case 33: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FLOATING_POINT_LITERAL;
          }
        case 131: break;
        case 92: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.RETURN;
          }
        case 132: break;
        case 65: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._MORE;
          }
        case 133: break;
        case 31: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.IF;
          }
        case 134: break;
        case 112: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._IGNORE_CASE;
          }
        case 135: break;
        case 40: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.NE;
          }
        case 136: break;
        case 28: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SHARP;
          }
        case 137: break;
        case 98: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.EXTENDS;
          }
        case 138: break;
        case 76: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SUPER;
          }
        case 139: break;
        case 93: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.DOUBLE;
          }
        case 140: break;
        case 70: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.ELSE;
          }
        case 141: break;
        case 91: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SWITCH;
          }
        case 142: break;
        case 39: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LE;
          }
        case 143: break;
        case 60: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CHARACTER_LITERAL;
          }
        case 144: break;
        case 24: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.STAR;
          }
        case 145: break;
        case 80: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CATCH;
          }
        case 146: break;
        case 13: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.COMMA;
          }
        case 147: break;
        case 94: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._OPTIONS;
          }
        case 148: break;
        case 86: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PUBLIC;
          }
        case 149: break;
        case 45: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PLUSASSIGN;
          }
        case 150: break;
        case 71: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.GOTO;
          }
        case 151: break;
        case 53: 
          { yybegin(YYINITIAL);return org.gark87.idea.javacc.generated.JavaCCConstants.FORMAL_COMMENT;
          }
        case 152: break;
        case 109: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.INSTANCEOF;
          }
        case 153: break;
        case 105: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PROTECTED;
          }
        case 154: break;
        case 89: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.NATIVE;
          }
        case 155: break;
        case 114: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._PARSER_BEGIN;
          }
        case 156: break;
        case 30: 
          { yybegin(YYINITIAL);return org.gark87.idea.javacc.generated.JavaCCConstants.SINGLE_LINE_COMMENT;
          }
        case 157: break;
        case 67: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CASE;
          }
        case 158: break;
        case 27: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.REM;
          }
        case 159: break;
        case 77: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._TOKEN;
          }
        case 160: break;
        case 17: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BANG;
          }
        case 161: break;
        case 62: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.THIS;
          }
        case 162: break;
        case 111: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._PARSER_END;
          }
        case 163: break;
        case 113: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SYNCHRONIZED;
          }
        case 164: break;
        case 26: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.XOR;
          }
        case 165: break;
        case 21: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BIT_OR;
          }
        case 166: break;
        case 81: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CLASS;
          }
        case 167: break;
        case 38: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.GE;
          }
        case 168: break;
        case 22: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BIT_AND;
          }
        case 169: break;
        case 64: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._SKIP;
          }
        case 170: break;
        case 116: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._TOKEN_MGR_DECLS;
          }
        case 171: break;
        case 110: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.IMPLEMENTS;
          }
        case 172: break;
        case 35: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.MINUSASSIGN;
          }
        case 173: break;
        case 1: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.IDENTIFIER;
          }
        case 174: break;
        case 9: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.RBRACE;
          }
        case 175: break;
        case 2: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.INTEGER_LITERAL;
          }
        case 176: break;
        case 82: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FINAL;
          }
        case 177: break;
        case 61: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.TRUE;
          }
        case 178: break;
        case 103: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CONTINUE;
          }
        case 179: break;
        case 87: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.THROWS;
          }
        case 180: break;
        case 83: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FALSE;
          }
        case 181: break;
        case 3: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.DOT;
          }
        case 182: break;
        case 37: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.EQ;
          }
        case 183: break;
        case 95: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PACKAGE;
          }
        case 184: break;
        case 99: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._DEFAULT;
          }
        case 185: break;
        case 73: 
          { yybegin(IN_FORMAL_COMMENT);return org.gark87.idea.javacc.generated.JavaCCConstants.MORE;
          }
        case 186: break;
        case 72: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.VOID;
          }
        case 187: break;
        case 57: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.NEW;
          }
        case 188: break;
        case 107: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.INTERFACE;
          }
        case 189: break;
        case 8: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LBRACE;
          }
        case 190: break;
        case 14: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.ASSIGN;
          }
        case 191: break;
        case 34: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.DECR;
          }
        case 192: break;
        case 84: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FLOAT;
          }
        case 193: break;
        case 41: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.ORASSIGN;
          }
        case 194: break;
        case 18: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.TILDE;
          }
        case 195: break;
        case 56: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.INT;
          }
        case 196: break;
        case 88: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.IMPORT;
          }
        case 197: break;
        case 101: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._JAVACODE;
          }
        case 198: break;
        case 42: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SC_OR;
          }
        case 199: break;
        case 25: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SLASH;
          }
        case 200: break;
        case 49: 
          { yybegin(IN_MULTI_LINE_COMMENT);return org.gark87.idea.javacc.generated.JavaCCConstants.MORE;
          }
        case 201: break;
        case 106: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.TRANSIENT;
          }
        case 202: break;
        case 102: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.ABSTRACT;
          }
        case 203: break;
        case 108: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._LOOKAHEAD;
          }
        case 204: break;
        case 74: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.THROW;
          }
        case 205: break;
        case 7: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.RPAREN;
          }
        case 206: break;
        case 16: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LT;
          }
        case 207: break;
        case 6: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LPAREN;
          }
        case 208: break;
        case 4: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.MINUS;
          }
        case 209: break;
        case 69: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.LONG;
          }
        case 210: break;
        case 23: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PLUS;
          }
        case 211: break;
        case 29: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.MORE;
          }
        case 212: break;
        case 115: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants._SPECIAL_TOKEN;
          }
        case 213: break;
        case 63: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.NULL;
          }
        case 214: break;
        case 52: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.REMASSIGN;
          }
        case 215: break;
        case 44: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SC_AND;
          }
        case 216: break;
        case 32: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.DO;
          }
        case 217: break;
        case 104: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.VOLATILE;
          }
        case 218: break;
        case 59: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FOR;
          }
        case 219: break;
        case 50: 
          { yybegin(IN_SINGLE_LINE_COMMENT);return org.gark87.idea.javacc.generated.JavaCCConstants.MORE;
          }
        case 220: break;
        case 19: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.HOOK;
          }
        case 221: break;
        case 75: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.SHORT;
          }
        case 222: break;
        case 46: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.INCR;
          }
        case 223: break;
        case 47: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.STARASSIGN;
          }
        case 224: break;
        case 11: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.RBRACKET;
          }
        case 225: break;
        case 100: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.FINALLY;
          }
        case 226: break;
        case 97: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.BOOLEAN;
          }
        case 227: break;
        case 96: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.PRIVATE;
          }
        case 228: break;
        case 43: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.ANDASSIGN;
          }
        case 229: break;
        case 68: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.CHAR;
          }
        case 230: break;
        case 15: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.GT;
          }
        case 231: break;
        case 85: 
          { return org.gark87.idea.javacc.generated.JavaCCConstants.WHILE;
          }
        case 232: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
