/* The following code was generated by JFlex 1.4.3 on 13.06.10 1:29 */

/**
 * It's an automatically generated code. Do not modify it.
 * ATTENTION! It was generated by JFlex patched by the JetBrains guys.
 *
 *   # git clone git://git.jetbrains.org/idea/community.git $IDEADIR
 *   # $IDEADIR/tools/lexer/jflex-1.4/bin/jflex --skel $IDEADIR/tools/lexer/idea-flex.skeleton \
 *        --charat -d . ./_JavaCCLexer.flex
 *
 * This file was mostly written by JetBrains, because lexer for JavaCC is pretty the same as for Java
 */
package org.gark87.idea.javacc;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.06.10 1:29 from the specification file
 * <tt>./_JavaCCLexer.flex</tt>
 */
class _JavaCCLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\23\1\0\1\4\1\11\16\6\4\0\1\4\1\60"+
    "\1\26\1\104\1\5\1\67\1\65\1\24\1\70\1\71\1\10\1\62"+
    "\1\77\1\21\1\17\1\7\1\12\7\2\2\1\1\102\1\76\1\63"+
    "\1\57\1\64\1\101\1\103\3\3\1\16\1\20\1\15\5\5\1\14"+
    "\3\5\1\22\7\5\1\13\2\5\1\74\1\25\1\75\1\66\1\5"+
    "\1\0\1\34\1\40\1\41\1\47\1\32\1\33\1\52\1\45\1\46"+
    "\1\5\1\43\1\35\1\50\1\37\1\42\1\53\1\5\1\30\1\36"+
    "\1\27\1\31\1\54\1\55\1\51\1\44\1\56\1\72\1\61\1\73"+
    "\1\100\41\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5"+
    "\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5"+
    "\4\0\14\5\16\0\5\5\11\0\1\5\21\0\130\6\5\0\23\6"+
    "\12\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5\1\0\4\6"+
    "\3\0\105\5\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5"+
    "\2\0\1\5\7\0\47\5\11\0\21\6\1\0\27\6\1\0\3\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\13\0\33\5\5\0\3\5"+
    "\15\0\4\6\14\0\6\6\13\0\32\5\5\0\13\5\16\6\7\0"+
    "\12\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6"+
    "\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0"+
    "\1\6\1\5\1\6\36\5\33\6\2\0\3\5\60\0\46\5\13\6"+
    "\1\5\u014f\0\3\6\66\5\2\0\1\6\1\5\20\6\2\0\1\5"+
    "\4\6\3\0\12\5\2\6\2\0\12\6\21\0\3\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5"+
    "\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\11\0\1\6"+
    "\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5\15\0\3\6"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6"+
    "\2\0\3\6\13\0\4\5\1\0\1\5\7\0\14\6\3\5\14\0"+
    "\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0"+
    "\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6\1\0\1\5"+
    "\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\1\6\1\5\6\6\3\0\2\6"+
    "\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5\4\0\12\6"+
    "\1\0\1\5\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0"+
    "\3\5\3\0\10\5\1\0\3\5\4\0\5\6\3\0\3\6\1\0"+
    "\4\6\11\0\1\6\17\0\11\6\11\0\1\5\7\0\3\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\4\0"+
    "\7\6\1\0\3\6\1\0\4\6\7\0\2\6\11\0\2\5\4\0"+
    "\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0"+
    "\4\6\7\0\2\6\7\0\1\5\1\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\20\5\4\0"+
    "\6\6\2\0\3\6\1\0\4\6\11\0\1\6\10\0\2\5\4\0"+
    "\12\6\22\0\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0"+
    "\1\5\2\0\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0"+
    "\10\6\22\0\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5"+
    "\10\6\1\0\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0"+
    "\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0"+
    "\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6"+
    "\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0"+
    "\12\6\2\0\2\5\42\0\1\5\27\0\2\6\6\0\12\6\13\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5\1\0\42\5"+
    "\6\0\24\6\1\0\2\6\4\5\4\0\10\6\1\0\44\6\11\0"+
    "\1\6\71\0\42\5\1\0\5\5\1\0\2\5\1\0\7\6\3\0"+
    "\4\6\6\0\12\6\6\0\6\5\4\6\106\0\46\5\12\0\51\5"+
    "\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5"+
    "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\47\5\1\0\23\5\16\0\11\6\56\0\125\5"+
    "\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0\113\5\3\0\3\5"+
    "\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5"+
    "\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6"+
    "\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0"+
    "\12\6\6\0\130\5\10\0\51\5\1\6\126\0\35\5\3\0\14\6"+
    "\4\0\14\6\12\0\12\6\36\5\2\0\5\5\u038b\0\154\5\224\0"+
    "\234\5\4\0\132\5\6\0\26\5\2\0\6\5\2\0\46\5\2\0"+
    "\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0"+
    "\7\5\17\0\4\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0"+
    "\4\6\6\0\6\6\1\0\1\5\15\0\1\5\40\0\22\5\36\0"+
    "\15\6\4\0\1\6\3\0\6\6\27\0\1\5\4\0\1\5\2\0"+
    "\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\3\5\1\0\7\5\3\0\3\5\5\0"+
    "\5\5\26\0\44\5\u0e81\0\3\5\31\0\11\5\6\6\1\0\5\5"+
    "\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0\137\5"+
    "\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5"+
    "\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5"+
    "\225\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5"+
    "\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5"+
    "\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6"+
    "\20\0\4\6\17\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5"+
    "\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5"+
    "\4\0\1\5\1\0\32\5\12\0\132\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\20\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\3\43\1\44\1\45"+
    "\1\46\1\47\1\0\2\2\1\0\1\50\1\51\2\11"+
    "\2\12\34\3\1\52\3\3\1\53\6\3\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\43\1\45\1\70\1\0\1\41\1\0"+
    "\1\71\2\3\1\72\10\3\1\73\13\3\1\74\11\3"+
    "\1\75\14\3\1\76\1\0\2\70\1\0\1\77\1\0"+
    "\1\100\2\3\1\101\1\3\1\102\1\103\6\3\1\104"+
    "\6\3\1\105\3\3\1\106\1\3\1\107\3\3\1\110"+
    "\6\3\1\111\5\3\1\112\1\3\1\45\1\0\1\77"+
    "\1\113\1\77\1\3\1\114\2\3\1\115\1\116\1\117"+
    "\4\3\1\120\1\3\1\121\2\3\1\122\1\3\1\123"+
    "\1\124\1\3\1\125\13\3\1\126\1\113\1\77\1\3"+
    "\1\127\1\130\2\3\1\131\2\3\1\132\1\3\1\133"+
    "\1\134\5\3\1\135\1\3\1\136\2\3\1\137\3\3"+
    "\1\140\1\141\3\3\1\142\4\3\1\143\1\3\1\144"+
    "\1\145\2\3\1\146\1\147\1\3\1\150\4\3\1\151"+
    "\1\152\1\3\1\153\2\3\1\154\1\3\1\155\1\156"+
    "\1\3\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\105\0\u08e5\0\u092a\0\u096f\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\u0a83\0\105\0\105\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\105"+
    "\0\105\0\105\0\u0bdc\0\u0c21\0\105\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\317\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\u16a4\0\105\0\105\0\105\0\105"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17b8\0\u17fd\0\105\0\u1842"+
    "\0\u1887\0\317\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\317\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\317\0\u1deb"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\105\0\u23d9\0\u241e"+
    "\0\105\0\u2463\0\u24a8\0\u24ed\0\317\0\u2532\0\u2577\0\317"+
    "\0\u25bc\0\317\0\317\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\317\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8"+
    "\0\317\0\u293d\0\u2982\0\u29c7\0\317\0\u2a0c\0\317\0\u2a51"+
    "\0\u2a96\0\u2adb\0\317\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u2c79\0\317\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\317"+
    "\0\u2e17\0\105\0\u2e5c\0\u2ea1\0\u17b8\0\u17b8\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\u2fb5\0\317\0\317\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\317\0\u3153\0\317\0\u3198\0\u31dd\0\317\0\u3222"+
    "\0\317\0\317\0\u3267\0\317\0\u32ac\0\u32f1\0\u3336\0\u337b"+
    "\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\317"+
    "\0\105\0\105\0\u35a3\0\317\0\317\0\u35e8\0\u362d\0\317"+
    "\0\u3672\0\u36b7\0\317\0\u36fc\0\317\0\317\0\u3741\0\u3786"+
    "\0\u37cb\0\u3810\0\u3855\0\317\0\u389a\0\317\0\u38df\0\u3924"+
    "\0\317\0\u3969\0\u39ae\0\u39f3\0\317\0\317\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\317\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\317\0\u3c1b"+
    "\0\317\0\317\0\u3c60\0\u3ca5\0\317\0\317\0\u3cea\0\317"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\317\0\317\0\u3e43\0\317"+
    "\0\u3e88\0\u3ecd\0\317\0\u3f12\0\317\0\317\0\u3f57\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\2\1\6\1\7"+
    "\1\5\1\10\4\4\1\11\1\4\1\12\1\4\1\5"+
    "\1\13\1\2\1\14\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\4\4\1\27"+
    "\1\30\2\4\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\106\0\2\3\7\0"+
    "\1\3\1\0\1\63\1\64\1\65\1\66\1\67\11\0"+
    "\1\67\1\64\1\0\1\63\11\0\1\65\36\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\30\4\32\0\1\5\4\0\1\5\11\0\1\5"+
    "\70\0\1\70\1\71\46\0\1\72\104\0\1\73\26\0"+
    "\1\74\1\75\7\0\1\75\1\76\1\63\1\64\1\65"+
    "\1\66\1\67\11\0\1\67\1\64\1\0\1\63\11\0"+
    "\1\65\1\0\1\76\34\0\2\66\7\0\1\66\4\0"+
    "\1\77\106\0\1\100\35\0\1\101\25\0\11\13\1\0"+
    "\11\13\1\0\1\102\1\103\57\13\11\14\1\0\11\14"+
    "\1\0\1\14\1\104\1\105\56\14\1\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\4\1\106\14\4\1\107\11\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\110\24\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\6\4\1\111"+
    "\1\4\1\112\11\4\1\113\5\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\114\1\115\4\4\1\116\3\4\1\117\10\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\120\1\4\1\121\16\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\13\4\1\122\14\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\123\1\4\1\124\12\4\1\125\1\126\7\4"+
    "\1\127\1\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\130\1\131"+
    "\1\4\1\132\22\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\4\1\133"+
    "\11\4\1\134\1\4\1\135\12\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\136\1\137\4\4\1\140\2\4\1\141\11\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\4\4\1\142\3\4\1\143\10\4"+
    "\1\144\6\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\145\7\4"+
    "\1\146\14\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\147\14\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\4\1\150\1\151\2\4\1\152"+
    "\22\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\13\4\1\153\14\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\16\4\1\154\11\4\105\0\1\155\104\0"+
    "\1\156\104\0\1\157\1\0\1\160\102\0\1\161\2\0"+
    "\1\162\101\0\1\163\3\0\1\164\100\0\1\165\5\0"+
    "\1\166\76\0\1\167\104\0\1\170\26\0\2\66\7\0"+
    "\1\66\2\0\1\64\1\65\1\0\1\67\11\0\1\67"+
    "\1\64\13\0\1\65\36\0\2\171\7\0\1\171\2\0"+
    "\1\64\1\65\2\0\1\171\11\0\1\64\13\0\1\65"+
    "\12\0\1\171\22\0\11\70\1\0\11\70\1\0\61\70"+
    "\10\172\1\173\74\172\1\0\2\74\7\0\1\74\2\0"+
    "\1\64\1\65\1\66\1\67\11\0\1\67\1\64\13\0"+
    "\1\65\36\0\1\74\1\75\7\0\1\75\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\11\0\1\67\1\64\1\0"+
    "\1\63\11\0\1\65\35\0\1\174\3\76\6\174\1\76"+
    "\1\174\1\175\2\76\1\174\1\76\1\174\1\176\1\0"+
    "\6\174\3\76\1\175\2\174\2\76\5\174\1\76\3\174"+
    "\1\176\31\174\17\0\1\177\65\0\11\13\1\0\11\13"+
    "\1\0\61\13\11\14\1\0\11\14\1\0\61\14\1\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\2\4\1\200\2\4\1\201\7\4\1\202"+
    "\12\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\203\15\4\1\204"+
    "\10\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\205\27\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\206\20\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\207\25\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\210\27\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\211\21\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\13\4\1\212\14\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\4\1\213"+
    "\26\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\10\4\1\214\17\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\7\4\1\215\20\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\7\4\1\216\20\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\10\4\1\217"+
    "\17\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\220\3\4\1\221"+
    "\22\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\24\4\1\222\3\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\10\4\1\223\17\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\13\4\1\224\14\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\17\4\1\225"+
    "\10\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\226\21\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\26\4\1\227\1\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\230\27\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\231\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\13\4\1\232\14\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\233\27\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\234\6\4"+
    "\1\235\20\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\236\22\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\10\4\1\237\17\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\240\22\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\1\241"+
    "\6\4\1\242\20\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\24\4\1\243"+
    "\3\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\4\4\1\244\23\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\2\4\1\245\25\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\246\27\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\247\3\4"+
    "\1\250\10\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\11\4\1\251\16\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\252\15\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\253\10\4\1\254\10\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\17\4\1\255\10\4\105\0\1\256\26\0\2\171"+
    "\7\0\1\171\2\0\1\64\1\65\14\0\1\64\13\0"+
    "\1\65\35\0\10\172\1\257\74\172\7\260\1\261\1\173"+
    "\74\260\1\0\3\174\6\0\1\174\2\0\2\174\1\0"+
    "\1\174\1\0\1\262\7\0\3\174\3\0\2\174\5\0"+
    "\1\174\3\0\1\262\32\0\2\263\1\174\6\0\1\263"+
    "\2\0\2\174\1\0\1\174\1\264\1\262\7\0\3\174"+
    "\3\0\2\174\5\0\1\174\3\0\1\262\6\0\1\264"+
    "\23\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\265\24\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\266\17\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\13\4"+
    "\1\267\14\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\270\20\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\1\271\25\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\272\24\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\21\4"+
    "\1\273\6\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\274\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\275\20\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\276\22\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\277\22\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\300\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\301\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\23\4\1\302\4\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\17\4\1\303"+
    "\10\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\304\27\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\305\24\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\12\4"+
    "\1\306\15\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\307\26\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\310\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\311\21\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\17\4\1\312"+
    "\10\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\313\22\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\314\21\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\315\24\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\12\4\1\316"+
    "\15\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\317\24\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\7\4\1\320\20\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\321\6\4\1\322\20\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\323\26\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\324\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\325\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\326\4\4\1\327\14\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\330\22\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\11\4\1\331"+
    "\16\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\13\4\1\332\14\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\333\27\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\25\4"+
    "\1\334\2\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\335\21\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\14\4\1\336\13\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\337\22\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\20\4"+
    "\1\340\7\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\341\21\4"+
    "\26\0\7\172\1\342\1\257\74\172\10\260\1\343\74\260"+
    "\1\0\2\344\7\0\1\344\6\0\1\264\40\0\1\264"+
    "\23\0\2\263\1\174\6\0\1\263\2\0\1\345\1\346"+
    "\1\0\1\174\1\0\1\262\7\0\1\174\1\345\1\174"+
    "\3\0\2\174\5\0\1\346\3\0\1\262\32\0\2\344"+
    "\7\0\1\344\73\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\347\20\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\26\4\1\350\1\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\351\26\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\10\4"+
    "\1\352\17\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\353\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\354\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\355\21\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\4\1\356"+
    "\26\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\357\26\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\12\4\1\360\15\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\17\4\1\361\10\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\4\1\362"+
    "\26\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\16\4\1\363\11\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\364\27\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\12\4"+
    "\1\365\15\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\25\4\1\366\2\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\14\4\1\367\13\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\370\24\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\16\4"+
    "\1\371\11\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\372\20\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\17\4\1\373\10\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\374\27\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\4\1\375"+
    "\26\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\376\22\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\3\4\1\377\24\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\4\1\u0100\26\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\2\4\1\u0101"+
    "\25\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\u0102\21\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\3\4\1\u0103\24\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\u0104\22\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\17\4\1\u0105"+
    "\10\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\u0106\22\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\u0107\27\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\u0108\24\4\26\0\7\260\1\261\1\343\74\260\1\0"+
    "\2\344\7\0\1\344\2\0\1\u0109\1\u010a\14\0\1\u0109"+
    "\13\0\1\u010a\36\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\17\4\1\u010b\10\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\7\4\1\u010c\20\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\u010d\17\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\20\4"+
    "\1\u010e\7\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\u010f\21\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\u0110\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\5\4\1\u0111\22\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\u0112\27\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\u0113\15\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\u0114\26\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\16\4"+
    "\1\u0115\11\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\u0116\24\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\u0117\22\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\u0118\17\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\4\4"+
    "\1\u0119\23\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\10\4\1\u011a\17\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\21\4\1\u011b\6\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\u011c\27\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\6\4\1\u011d"+
    "\21\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u011e\24\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\12\4\1\u011f\15\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\u0120\27\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\u0121\15\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\23\4\1\u0122\4\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\17\4\1\u0123\10\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\u0124\24\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\u0125\20\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\15\4\1\u0126\12\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\12\4\1\u0127\15\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\4\4"+
    "\1\u0128\23\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\u0129\14\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\10\4\1\u012a\17\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\1\u012b\25\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\5\4"+
    "\1\u012c\22\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\u012d\15\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\u012e\24\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\u012f\27\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\1\u0130\27\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\u0131\24\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\u0132\24\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\u0133\21\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\10\4\1\u0134\17\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\u0135\27\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\24\4\1\u0136\3\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\10\4\1\u0137"+
    "\17\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u0138\24\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\12\4\1\u0139\15\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\u013a\24\4\27\0\3\4\1\0\2\4\3\0"+
    "\5\4\1\0\1\4\1\0\1\4\4\0\10\4\1\u013b"+
    "\17\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\u013c\24\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\3\4\1\u013d\24\4\27\0\3\4\1\0"+
    "\2\4\3\0\5\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\u013e\27\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\17\4\1\u013f\10\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\u0140\24\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\13\4\1\u0141\14\4\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\1\u0142"+
    "\27\4\27\0\3\4\1\0\2\4\3\0\5\4\1\0"+
    "\1\4\1\0\1\4\4\0\20\4\1\u0143\7\4\27\0"+
    "\3\4\1\0\2\4\3\0\5\4\1\0\1\4\1\0"+
    "\1\4\4\0\27\4\1\u0144\27\0\3\4\1\0\2\4"+
    "\3\0\5\4\1\0\1\4\1\0\1\4\4\0\4\4"+
    "\1\u0145\23\4\27\0\3\4\1\0\2\4\3\0\5\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\u0146\20\4"+
    "\27\0\3\4\1\0\2\4\3\0\5\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\u0147\24\4\27\0\3\4"+
    "\1\0\2\4\3\0\5\4\1\0\1\4\1\0\1\4"+
    "\4\0\20\4\1\u0148\7\4\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16284];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\11\3\1\20\11\4\1\2\11"+
    "\1\0\2\1\1\0\3\11\2\1\1\11\47\1\7\11"+
    "\1\1\4\11\3\1\1\0\1\1\1\0\1\11\56\1"+
    "\1\11\1\0\1\1\1\11\1\0\1\1\1\0\55\1"+
    "\1\11\1\0\45\1\2\11\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private boolean myAssertKeywordEnabled;
private boolean myJdk15Enabled;

public _JavaCCLexer(boolean isAssertKeywordEnabled, boolean jdk15Enabled){
this((java.io.Reader)null);
myAssertKeywordEnabled = isAssertKeywordEnabled;
myJdk15Enabled = jdk15Enabled;
}

public void goTo(int offset) {
zzCurrentPos = zzMarkedPos = zzStartRead = offset;
zzPushbackPos = 0;
zzAtEOF = offset < zzEndRead;
}


  _JavaCCLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaCCLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LONG_LITERAL;
          }
        case 112: break;
        case 6: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ASTERISK;
          }
        case 113: break;
        case 30: 
          { return org.gark87.idea.javacc.JavaCCTokenType.COLON;
          }
        case 114: break;
        case 39: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ASTERISKEQ;
          }
        case 115: break;
        case 23: 
          { return org.gark87.idea.javacc.JavaCCTokenType.RBRACE;
          }
        case 116: break;
        case 32: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SHARP;
          }
        case 117: break;
        case 19: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PERC;
          }
        case 118: break;
        case 82: 
          { return org.gark87.idea.javacc.JavaCCTokenType.BREAK_KEYWORD;
          }
        case 119: break;
        case 95: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PUBLIC_KEYWORD;
          }
        case 120: break;
        case 64: 
          { return org.gark87.idea.javacc.JavaCCTokenType.TRUE_KEYWORD;
          }
        case 121: break;
        case 58: 
          { return org.gark87.idea.javacc.JavaCCTokenType.TRY_KEYWORD;
          }
        case 122: break;
        case 31: 
          { return org.gark87.idea.javacc.JavaCCTokenType.AT;
          }
        case 123: break;
        case 9: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CHARACTER_LITERAL;
          }
        case 124: break;
        case 45: 
          { return org.gark87.idea.javacc.JavaCCTokenType.NE;
          }
        case 125: break;
        case 4: 
          { return org.gark87.idea.javacc.JavaCCTokenType.WHITE_SPACE;
          }
        case 126: break;
        case 42: 
          { return org.gark87.idea.javacc.JavaCCTokenType.IF_KEYWORD;
          }
        case 127: break;
        case 22: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LBRACE;
          }
        case 128: break;
        case 50: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LE;
          }
        case 129: break;
        case 71: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CASE_KEYWORD;
          }
        case 130: break;
        case 102: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ABSTRACT_KEYWORD;
          }
        case 131: break;
        case 20: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LPARENTH;
          }
        case 132: break;
        case 56: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DOC_COMMENT;
          }
        case 133: break;
        case 54: 
          { return org.gark87.idea.javacc.JavaCCTokenType.XOREQ;
          }
        case 134: break;
        case 41: 
          { return org.gark87.idea.javacc.JavaCCTokenType.MINUSEQ;
          }
        case 135: break;
        case 103: 
          { return org.gark87.idea.javacc.JavaCCTokenType.STRICTFP_KEYWORD;
          }
        case 136: break;
        case 27: 
          { return org.gark87.idea.javacc.JavaCCTokenType.COMMA;
          }
        case 137: break;
        case 80: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SUPER_KEYWORD;
          }
        case 138: break;
        case 47: 
          { return org.gark87.idea.javacc.JavaCCTokenType.OROR;
          }
        case 139: break;
        case 61: 
          { return org.gark87.idea.javacc.JavaCCTokenType.INT_KEYWORD;
          }
        case 140: break;
        case 90: 
          { return org.gark87.idea.javacc.JavaCCTokenType.STATIC_KEYWORD;
          }
        case 141: break;
        case 18: 
          { return org.gark87.idea.javacc.JavaCCTokenType.XOR;
          }
        case 142: break;
        case 79: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FINAL_KEYWORD;
          }
        case 143: break;
        case 5: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DIV;
          }
        case 144: break;
        case 91: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SWITCH_KEYWORD;
          }
        case 145: break;
        case 57: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ELLIPSIS;
          }
        case 146: break;
        case 86: 
          { return org.gark87.idea.javacc.JavaCCTokenType.WHILE_KEYWORD;
          }
        case 147: break;
        case 35: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_LITERAL;
          }
        case 148: break;
        case 26: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SEMICOLON;
          }
        case 149: break;
        case 37: 
          { return org.gark87.idea.javacc.JavaCCTokenType.C_STYLE_COMMENT;
          }
        case 150: break;
        case 3: 
          { return org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER;
          }
        case 151: break;
        case 65: 
          { return org.gark87.idea.javacc.JavaCCTokenType.THIS_KEYWORD;
          }
        case 152: break;
        case 110: 
          { return org.gark87.idea.javacc.JavaCCTokenType.IMPLEMENTS_KEYWORD;
          }
        case 153: break;
        case 97: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FINALLY_KEYWORD;
          }
        case 154: break;
        case 68: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LONG_KEYWORD;
          }
        case 155: break;
        case 38: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DIVEQ;
          }
        case 156: break;
        case 53: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ANDAND;
          }
        case 157: break;
        case 75: 
          { if (myJdk15Enabled) return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_LITERAL;
          }
        case 158: break;
        case 10: 
          { return org.gark87.idea.javacc.JavaCCTokenType.STRING_LITERAL;
          }
        case 159: break;
        case 7: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DOT;
          }
        case 160: break;
        case 108: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PROTECTED_KEYWORD;
          }
        case 161: break;
        case 69: 
          { return org.gark87.idea.javacc.JavaCCTokenType.NULL_KEYWORD;
          }
        case 162: break;
        case 11: 
          { return org.gark87.idea.javacc.JavaCCTokenType.EQ;
          }
        case 163: break;
        case 111: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SYNCHRONIZED_KEYWORD;
          }
        case 164: break;
        case 92: 
          { return org.gark87.idea.javacc.JavaCCTokenType.NATIVE_KEYWORD;
          }
        case 165: break;
        case 89: 
          { return myAssertKeywordEnabled ? org.gark87.idea.javacc.JavaCCTokenType.ASSERT_KEYWORD : org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER;
          }
        case 166: break;
        case 101: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PACKAGE_KEYWORD;
          }
        case 167: break;
        case 52: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ANDEQ;
          }
        case 168: break;
        case 28: 
          { return org.gark87.idea.javacc.JavaCCTokenType.TILDE;
          }
        case 169: break;
        case 60: 
          { return org.gark87.idea.javacc.JavaCCTokenType.NEW_KEYWORD;
          }
        case 170: break;
        case 14: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PLUS;
          }
        case 171: break;
        case 99: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DEFAULT_KEYWORD;
          }
        case 172: break;
        case 63: 
          { if (myJdk15Enabled) return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_LITERAL;
          }
        case 173: break;
        case 44: 
          { return org.gark87.idea.javacc.JavaCCTokenType.EQEQ;
          }
        case 174: break;
        case 83: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CATCH_KEYWORD;
          }
        case 175: break;
        case 62: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LTLTEQ;
          }
        case 176: break;
        case 51: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LTLT;
          }
        case 177: break;
        case 12: 
          { return org.gark87.idea.javacc.JavaCCTokenType.EXCL;
          }
        case 178: break;
        case 109: 
          { return org.gark87.idea.javacc.JavaCCTokenType.INSTANCEOF_KEYWORD;
          }
        case 179: break;
        case 107: 
          { return org.gark87.idea.javacc.JavaCCTokenType.INTERFACE_KEYWORD;
          }
        case 180: break;
        case 85: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CONST_KEYWORD;
          }
        case 181: break;
        case 72: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CHAR_KEYWORD;
          }
        case 182: break;
        case 36: 
          { return org.gark87.idea.javacc.JavaCCTokenType.END_OF_LINE_COMMENT;
          }
        case 183: break;
        case 25: 
          { return org.gark87.idea.javacc.JavaCCTokenType.RBRACKET;
          }
        case 184: break;
        case 106: 
          { return org.gark87.idea.javacc.JavaCCTokenType.TRANSIENT_KEYWORD;
          }
        case 185: break;
        case 66: 
          { return org.gark87.idea.javacc.JavaCCTokenType.ELSE_KEYWORD;
          }
        case 186: break;
        case 98: 
          { return org.gark87.idea.javacc.JavaCCTokenType.BOOLEAN_KEYWORD;
          }
        case 187: break;
        case 87: 
          { return org.gark87.idea.javacc.JavaCCTokenType.THROWS_KEYWORD;
          }
        case 188: break;
        case 29: 
          { return org.gark87.idea.javacc.JavaCCTokenType.QUEST;
          }
        case 189: break;
        case 67: 
          { return myJdk15Enabled ? org.gark87.idea.javacc.JavaCCTokenType.ENUM_KEYWORD : org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER;
          }
        case 190: break;
        case 46: 
          { return org.gark87.idea.javacc.JavaCCTokenType.OREQ;
          }
        case 191: break;
        case 34: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_LITERAL;
          }
        case 192: break;
        case 104: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CONTINUE_KEYWORD;
          }
        case 193: break;
        case 94: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_KEYWORD;
          }
        case 194: break;
        case 84: 
          { return org.gark87.idea.javacc.JavaCCTokenType.CLASS_KEYWORD;
          }
        case 195: break;
        case 76: 
          { return org.gark87.idea.javacc.JavaCCTokenType.THROW_KEYWORD;
          }
        case 196: break;
        case 15: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LT;
          }
        case 197: break;
        case 40: 
          { return org.gark87.idea.javacc.JavaCCTokenType.MINUSMINUS;
          }
        case 198: break;
        case 81: 
          { return org.gark87.idea.javacc.JavaCCTokenType.SHORT_KEYWORD;
          }
        case 199: break;
        case 8: 
          { return org.gark87.idea.javacc.JavaCCTokenType.MINUS;
          }
        case 200: break;
        case 49: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PLUSPLUS;
          }
        case 201: break;
        case 100: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PRIVATE_KEYWORD;
          }
        case 202: break;
        case 24: 
          { return org.gark87.idea.javacc.JavaCCTokenType.LBRACKET;
          }
        case 203: break;
        case 88: 
          { return org.gark87.idea.javacc.JavaCCTokenType.RETURN_KEYWORD;
          }
        case 204: break;
        case 105: 
          { return org.gark87.idea.javacc.JavaCCTokenType.VOLATILE_KEYWORD;
          }
        case 205: break;
        case 70: 
          { return org.gark87.idea.javacc.JavaCCTokenType.BYTE_KEYWORD;
          }
        case 206: break;
        case 74: 
          { return org.gark87.idea.javacc.JavaCCTokenType.VOID_KEYWORD;
          }
        case 207: break;
        case 59: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FOR_KEYWORD;
          }
        case 208: break;
        case 48: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PLUSEQ;
          }
        case 209: break;
        case 16: 
          { return org.gark87.idea.javacc.JavaCCTokenType.GT;
          }
        case 210: break;
        case 73: 
          { return org.gark87.idea.javacc.JavaCCTokenType.GOTO_KEYWORD;
          }
        case 211: break;
        case 55: 
          { return org.gark87.idea.javacc.JavaCCTokenType.PERCEQ;
          }
        case 212: break;
        case 43: 
          { return org.gark87.idea.javacc.JavaCCTokenType.DO_KEYWORD;
          }
        case 213: break;
        case 77: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FALSE_KEYWORD;
          }
        case 214: break;
        case 1: 
          { return org.gark87.idea.javacc.JavaCCTokenType.BAD_CHARACTER;
          }
        case 215: break;
        case 13: 
          { return org.gark87.idea.javacc.JavaCCTokenType.OR;
          }
        case 216: break;
        case 93: 
          { return org.gark87.idea.javacc.JavaCCTokenType.IMPORT_KEYWORD;
          }
        case 217: break;
        case 17: 
          { return org.gark87.idea.javacc.JavaCCTokenType.AND;
          }
        case 218: break;
        case 96: 
          { return org.gark87.idea.javacc.JavaCCTokenType.EXTENDS_KEYWORD;
          }
        case 219: break;
        case 78: 
          { return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_KEYWORD;
          }
        case 220: break;
        case 21: 
          { return org.gark87.idea.javacc.JavaCCTokenType.RPARENTH;
          }
        case 221: break;
        case 2: 
          { return org.gark87.idea.javacc.JavaCCTokenType.INTEGER_LITERAL;
          }
        case 222: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
