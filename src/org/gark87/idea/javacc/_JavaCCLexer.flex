/**
 * It's an automatically generated code. Do not modify it.
 * ATTENTION! It was generated by JFlex patched by the JetBrains guys.
 *
 *   # git clone git://git.jetbrains.org/idea/community.git $IDEADIR
 *   # $IDEADIR/tools/lexer/jflex-1.4/bin/jflex --skel $IDEADIR/tools/lexer/idea-flex.skeleton \
 *        --charat -d . ./_JavaCCLexer.flex
 *
 * This file was mostly written by JetBrains, because lexer for JavaCC is pretty the same as for Java
 */
package org.gark87.idea.javacc;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

%%

%{
private boolean myAssertKeywordEnabled;
private boolean myJdk15Enabled;

public _JavaCCLexer(boolean isAssertKeywordEnabled, boolean jdk15Enabled){
this((java.io.Reader)null);
myAssertKeywordEnabled = isAssertKeywordEnabled;
myJdk15Enabled = jdk15Enabled;
}

public void goTo(int offset) {
zzCurrentPos = zzMarkedPos = zzStartRead = offset;
zzPushbackPos = 0;
zzAtEOF = offset < zzEndRead;
}
%}

%unicode
%class _JavaCCLexer
%implements FlexLexer
%function advance
%type IElementType
%eof{  return;
%eof}

DIGIT=[0-9]
OCTAL_DIGIT=[0-7]
HEX_DIGIT=[0-9A-Fa-f]
WHITE_SPACE_CHAR=[\ \n\r\t\f]

IDENTIFIER=[:jletter:] [:jletterdigit:]*

C_STYLE_COMMENT=("/*"[^"*"]{COMMENT_TAIL})|"/*"
DOC_COMMENT="/*""*"+("/"|([^"/""*"]{COMMENT_TAIL}))?
COMMENT_TAIL=([^"*"]*("*"+[^"*""/"])?)*("*"+"/")?
END_OF_LINE_COMMENT="/""/"[^\r\n]*

INTEGER_LITERAL={DECIMAL_INTEGER_LITERAL}|{HEX_INTEGER_LITERAL}|{OCTAL_INTEGER_LITERAL}
DECIMAL_INTEGER_LITERAL=(0|([1-9]({DIGIT})*))
HEX_INTEGER_LITERAL=0[Xx]({HEX_DIGIT})*
OCTAL_INTEGER_LITERAL=0({OCTAL_DIGIT})+
LONG_LITERAL=({INTEGER_LITERAL})[Ll]

FLOAT_LITERAL=(({FLOATING_POINT_LITERAL1})[Ff])|(({FLOATING_POINT_LITERAL2})[Ff])|(({FLOATING_POINT_LITERAL3})[Ff])|(({FLOATING_POINT_LITERAL4})[Ff])
DOUBLE_LITERAL=(({FLOATING_POINT_LITERAL1})[Dd]?)|(({FLOATING_POINT_LITERAL2})[Dd]?)|(({FLOATING_POINT_LITERAL3})[Dd]?)|(({FLOATING_POINT_LITERAL4})[Dd])
FLOATING_POINT_LITERAL1=({DIGIT})+"."({DIGIT})*({EXPONENT_PART})?
FLOATING_POINT_LITERAL2="."({DIGIT})+({EXPONENT_PART})?
FLOATING_POINT_LITERAL3=({DIGIT})+({EXPONENT_PART})
FLOATING_POINT_LITERAL4=({DIGIT})+
EXPONENT_PART=[Ee]["+""-"]?({DIGIT})*
HEX_FLOAT_LITERAL={HEX_SIGNIFICAND}{BINARY_EXPONENT}[Ff]
HEX_DOUBLE_LITERAL={HEX_SIGNIFICAND}{BINARY_EXPONENT}[Dd]?
BINARY_EXPONENT=[Pp][+-]?{DIGIT}+
HEX_SIGNIFICAND={HEX_INTEGER_LITERAL}|{HEX_INTEGER_LITERAL}.|0[Xx]{HEX_DIGIT}*.{HEX_DIGIT}+

CHARACTER_LITERAL="'"([^\\\'\r\n]|{ESCAPE_SEQUENCE})*("'"|\\)?
STRING_LITERAL=\"([^\\\"\r\n]|{ESCAPE_SEQUENCE})*(\"|\\)?
ESCAPE_SEQUENCE=\\[^\r\n]

%%

<YYINITIAL> {WHITE_SPACE_CHAR}+ { return org.gark87.idea.javacc.JavaCCTokenType.WHITE_SPACE; }

<YYINITIAL> {C_STYLE_COMMENT} { return org.gark87.idea.javacc.JavaCCTokenType.C_STYLE_COMMENT; }
<YYINITIAL> {END_OF_LINE_COMMENT} { return org.gark87.idea.javacc.JavaCCTokenType.END_OF_LINE_COMMENT; }
<YYINITIAL> {DOC_COMMENT} { return org.gark87.idea.javacc.JavaCCTokenType.DOC_COMMENT; }

<YYINITIAL> {LONG_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.LONG_LITERAL; }
<YYINITIAL> {INTEGER_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.INTEGER_LITERAL; }
<YYINITIAL> {FLOAT_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_LITERAL; }
<YYINITIAL> {HEX_FLOAT_LITERAL} { if (myJdk15Enabled) return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_LITERAL; }
<YYINITIAL> {DOUBLE_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_LITERAL; }
<YYINITIAL> {HEX_DOUBLE_LITERAL} { if (myJdk15Enabled) return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_LITERAL; }

<YYINITIAL> {CHARACTER_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.CHARACTER_LITERAL; }
<YYINITIAL> {STRING_LITERAL} { return org.gark87.idea.javacc.JavaCCTokenType.STRING_LITERAL; }

<YYINITIAL> "true" { return org.gark87.idea.javacc.JavaCCTokenType.TRUE_KEYWORD; }
<YYINITIAL> "false" { return org.gark87.idea.javacc.JavaCCTokenType.FALSE_KEYWORD; }
<YYINITIAL> "null" { return org.gark87.idea.javacc.JavaCCTokenType.NULL_KEYWORD; }

<YYINITIAL> "abstract" { return org.gark87.idea.javacc.JavaCCTokenType.ABSTRACT_KEYWORD; }
<YYINITIAL> "assert" { return myAssertKeywordEnabled ? org.gark87.idea.javacc.JavaCCTokenType.ASSERT_KEYWORD : org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER; }
<YYINITIAL> "boolean" { return org.gark87.idea.javacc.JavaCCTokenType.BOOLEAN_KEYWORD; }
<YYINITIAL> "break" { return org.gark87.idea.javacc.JavaCCTokenType.BREAK_KEYWORD; }
<YYINITIAL> "byte" { return org.gark87.idea.javacc.JavaCCTokenType.BYTE_KEYWORD; }
<YYINITIAL> "case" { return org.gark87.idea.javacc.JavaCCTokenType.CASE_KEYWORD; }
<YYINITIAL> "catch" { return org.gark87.idea.javacc.JavaCCTokenType.CATCH_KEYWORD; }
<YYINITIAL> "char" { return org.gark87.idea.javacc.JavaCCTokenType.CHAR_KEYWORD; }
<YYINITIAL> "class" { return org.gark87.idea.javacc.JavaCCTokenType.CLASS_KEYWORD; }
<YYINITIAL> "const" { return org.gark87.idea.javacc.JavaCCTokenType.CONST_KEYWORD; }
<YYINITIAL> "continue" { return org.gark87.idea.javacc.JavaCCTokenType.CONTINUE_KEYWORD; }
<YYINITIAL> "default" { return org.gark87.idea.javacc.JavaCCTokenType.DEFAULT_KEYWORD; }
<YYINITIAL> "do" { return org.gark87.idea.javacc.JavaCCTokenType.DO_KEYWORD; }
<YYINITIAL> "double" { return org.gark87.idea.javacc.JavaCCTokenType.DOUBLE_KEYWORD; }
<YYINITIAL> "else" { return org.gark87.idea.javacc.JavaCCTokenType.ELSE_KEYWORD; }
<YYINITIAL> "enum" { return myJdk15Enabled ? org.gark87.idea.javacc.JavaCCTokenType.ENUM_KEYWORD : org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER; }
<YYINITIAL> "extends" { return org.gark87.idea.javacc.JavaCCTokenType.EXTENDS_KEYWORD; }
<YYINITIAL> "final" { return org.gark87.idea.javacc.JavaCCTokenType.FINAL_KEYWORD; }
<YYINITIAL> "finally" { return org.gark87.idea.javacc.JavaCCTokenType.FINALLY_KEYWORD; }
<YYINITIAL> "float" { return org.gark87.idea.javacc.JavaCCTokenType.FLOAT_KEYWORD; }
<YYINITIAL> "for" { return org.gark87.idea.javacc.JavaCCTokenType.FOR_KEYWORD; }
<YYINITIAL> "goto" { return org.gark87.idea.javacc.JavaCCTokenType.GOTO_KEYWORD; }
<YYINITIAL> "if" { return org.gark87.idea.javacc.JavaCCTokenType.IF_KEYWORD; }
<YYINITIAL> "implements" { return org.gark87.idea.javacc.JavaCCTokenType.IMPLEMENTS_KEYWORD; }
<YYINITIAL> "import" { return org.gark87.idea.javacc.JavaCCTokenType.IMPORT_KEYWORD; }
<YYINITIAL> "instanceof" { return org.gark87.idea.javacc.JavaCCTokenType.INSTANCEOF_KEYWORD; }
<YYINITIAL> "int" { return org.gark87.idea.javacc.JavaCCTokenType.INT_KEYWORD; }
<YYINITIAL> "interface" { return org.gark87.idea.javacc.JavaCCTokenType.INTERFACE_KEYWORD; }
<YYINITIAL> "long" { return org.gark87.idea.javacc.JavaCCTokenType.LONG_KEYWORD; }
<YYINITIAL> "native" { return org.gark87.idea.javacc.JavaCCTokenType.NATIVE_KEYWORD; }
<YYINITIAL> "new" { return org.gark87.idea.javacc.JavaCCTokenType.NEW_KEYWORD; }
<YYINITIAL> "package" { return org.gark87.idea.javacc.JavaCCTokenType.PACKAGE_KEYWORD; }
<YYINITIAL> "private" { return org.gark87.idea.javacc.JavaCCTokenType.PRIVATE_KEYWORD; }
<YYINITIAL> "public" { return org.gark87.idea.javacc.JavaCCTokenType.PUBLIC_KEYWORD; }
<YYINITIAL> "short" { return org.gark87.idea.javacc.JavaCCTokenType.SHORT_KEYWORD; }
<YYINITIAL> "super" { return org.gark87.idea.javacc.JavaCCTokenType.SUPER_KEYWORD; }
<YYINITIAL> "switch" { return org.gark87.idea.javacc.JavaCCTokenType.SWITCH_KEYWORD; }
<YYINITIAL> "synchronized" { return org.gark87.idea.javacc.JavaCCTokenType.SYNCHRONIZED_KEYWORD; }
<YYINITIAL> "this" { return org.gark87.idea.javacc.JavaCCTokenType.THIS_KEYWORD; }
<YYINITIAL> "throw" { return org.gark87.idea.javacc.JavaCCTokenType.THROW_KEYWORD; }
<YYINITIAL> "protected" { return org.gark87.idea.javacc.JavaCCTokenType.PROTECTED_KEYWORD; }
<YYINITIAL> "transient" { return org.gark87.idea.javacc.JavaCCTokenType.TRANSIENT_KEYWORD; }
<YYINITIAL> "return" { return org.gark87.idea.javacc.JavaCCTokenType.RETURN_KEYWORD; }
<YYINITIAL> "void" { return org.gark87.idea.javacc.JavaCCTokenType.VOID_KEYWORD; }
<YYINITIAL> "static" { return org.gark87.idea.javacc.JavaCCTokenType.STATIC_KEYWORD; }
<YYINITIAL> "strictfp" { return org.gark87.idea.javacc.JavaCCTokenType.STRICTFP_KEYWORD; }
<YYINITIAL> "while" { return org.gark87.idea.javacc.JavaCCTokenType.WHILE_KEYWORD; }
<YYINITIAL> "try" { return org.gark87.idea.javacc.JavaCCTokenType.TRY_KEYWORD; }
<YYINITIAL> "volatile" { return org.gark87.idea.javacc.JavaCCTokenType.VOLATILE_KEYWORD; }
<YYINITIAL> "throws" { return org.gark87.idea.javacc.JavaCCTokenType.THROWS_KEYWORD; }

<YYINITIAL> {IDENTIFIER} { return org.gark87.idea.javacc.JavaCCTokenType.IDENTIFIER; }

<YYINITIAL> "==" { return org.gark87.idea.javacc.JavaCCTokenType.EQEQ; }
<YYINITIAL> "!=" { return org.gark87.idea.javacc.JavaCCTokenType.NE; }
<YYINITIAL> "||" { return org.gark87.idea.javacc.JavaCCTokenType.OROR; }
<YYINITIAL> "++" { return org.gark87.idea.javacc.JavaCCTokenType.PLUSPLUS; }
<YYINITIAL> "--" { return org.gark87.idea.javacc.JavaCCTokenType.MINUSMINUS; }

<YYINITIAL> "<" { return org.gark87.idea.javacc.JavaCCTokenType.LT; }
<YYINITIAL> "<=" { return org.gark87.idea.javacc.JavaCCTokenType.LE; }
<YYINITIAL> "<<=" { return org.gark87.idea.javacc.JavaCCTokenType.LTLTEQ; }
<YYINITIAL> "<<" { return org.gark87.idea.javacc.JavaCCTokenType.LTLT; }
<YYINITIAL> ">" { return org.gark87.idea.javacc.JavaCCTokenType.GT; }
<YYINITIAL> "&" { return org.gark87.idea.javacc.JavaCCTokenType.AND; }
<YYINITIAL> "&&" { return org.gark87.idea.javacc.JavaCCTokenType.ANDAND; }

<YYINITIAL> "+=" { return org.gark87.idea.javacc.JavaCCTokenType.PLUSEQ; }
<YYINITIAL> "-=" { return org.gark87.idea.javacc.JavaCCTokenType.MINUSEQ; }
<YYINITIAL> "*=" { return org.gark87.idea.javacc.JavaCCTokenType.ASTERISKEQ; }
<YYINITIAL> "/=" { return org.gark87.idea.javacc.JavaCCTokenType.DIVEQ; }
<YYINITIAL> "&=" { return org.gark87.idea.javacc.JavaCCTokenType.ANDEQ; }
<YYINITIAL> "|=" { return org.gark87.idea.javacc.JavaCCTokenType.OREQ; }
<YYINITIAL> "^=" { return org.gark87.idea.javacc.JavaCCTokenType.XOREQ; }
<YYINITIAL> "%=" { return org.gark87.idea.javacc.JavaCCTokenType.PERCEQ; }

<YYINITIAL> "("   { return org.gark87.idea.javacc.JavaCCTokenType.LPARENTH; }
<YYINITIAL> ")"   { return org.gark87.idea.javacc.JavaCCTokenType.RPARENTH; }
<YYINITIAL> "{"   { return org.gark87.idea.javacc.JavaCCTokenType.LBRACE; }
<YYINITIAL> "}"   { return org.gark87.idea.javacc.JavaCCTokenType.RBRACE; }
<YYINITIAL> "["   { return org.gark87.idea.javacc.JavaCCTokenType.LBRACKET; }
<YYINITIAL> "]"   { return org.gark87.idea.javacc.JavaCCTokenType.RBRACKET; }
<YYINITIAL> ";"   { return org.gark87.idea.javacc.JavaCCTokenType.SEMICOLON; }
<YYINITIAL> ","   { return org.gark87.idea.javacc.JavaCCTokenType.COMMA; }
<YYINITIAL> "..." { return org.gark87.idea.javacc.JavaCCTokenType.ELLIPSIS; }
<YYINITIAL> "."   { return org.gark87.idea.javacc.JavaCCTokenType.DOT; }

<YYINITIAL> "=" { return org.gark87.idea.javacc.JavaCCTokenType.EQ; }
<YYINITIAL> "!" { return org.gark87.idea.javacc.JavaCCTokenType.EXCL; }
<YYINITIAL> "~" { return org.gark87.idea.javacc.JavaCCTokenType.TILDE; }
<YYINITIAL> "?" { return org.gark87.idea.javacc.JavaCCTokenType.QUEST; }
<YYINITIAL> ":" { return org.gark87.idea.javacc.JavaCCTokenType.COLON; }
<YYINITIAL> "+" { return org.gark87.idea.javacc.JavaCCTokenType.PLUS; }
<YYINITIAL> "-" { return org.gark87.idea.javacc.JavaCCTokenType.MINUS; }
<YYINITIAL> "*" { return org.gark87.idea.javacc.JavaCCTokenType.ASTERISK; }
<YYINITIAL> "/" { return org.gark87.idea.javacc.JavaCCTokenType.DIV; }
<YYINITIAL> "|" { return org.gark87.idea.javacc.JavaCCTokenType.OR; }
<YYINITIAL> "^" { return org.gark87.idea.javacc.JavaCCTokenType.XOR; }
<YYINITIAL> "%" { return org.gark87.idea.javacc.JavaCCTokenType.PERC; }
<YYINITIAL> "@" { return org.gark87.idea.javacc.JavaCCTokenType.AT; }
<YYINITIAL> "#" { return org.gark87.idea.javacc.JavaCCTokenType.SHARP; }


<YYINITIAL> . { return org.gark87.idea.javacc.JavaCCTokenType.BAD_CHARACTER; }

